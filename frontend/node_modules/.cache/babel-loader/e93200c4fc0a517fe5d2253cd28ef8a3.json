{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ControlBox: () => ControlBox\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/control-box.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar ControlBox = props => {\n  const {\n    type = \"checkbox\",\n    _hover,\n    _invalid,\n    _disabled,\n    _focus,\n    _checked,\n    _child = {\n      opacity: 0\n    },\n    _checkedAndChild = {\n      opacity: 1\n    },\n    _checkedAndDisabled,\n    _checkedAndFocus,\n    _checkedAndHover,\n    children,\n    ...rest\n  } = props;\n  const checkedAndDisabled = `input[type=${type}]:checked:disabled + &`;\n  const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + &`;\n  const checkedAndFocus = `input[type=${type}]:checked:focus + &`;\n  const disabled = `input[type=${type}]:disabled + &`;\n  const focus = `input[type=${type}]:focus + &`;\n  const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + &`;\n  const checked = `input[type=${type}]:checked + &, input[type=${type}][aria-checked=mixed] + &`;\n  const invalid = `input[type=${type}][aria-invalid=true] + &`;\n  const child = `& > *`;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n    ...rest,\n    \"aria-hidden\": true,\n    __css: {\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      transitionProperty: \"common\",\n      transitionDuration: \"fast\",\n      flexShrink: 0,\n      [focus]: _focus,\n      [hover]: _hover,\n      [disabled]: _disabled,\n      [invalid]: _invalid,\n      [checkedAndDisabled]: _checkedAndDisabled,\n      [checkedAndFocus]: _checkedAndFocus,\n      [checkedAndHover]: _checkedAndHover,\n      [child]: _child,\n      [checked]: {\n        ..._checked,\n        [child]: _checkedAndChild\n      }\n    },\n    children\n  });\n};\nControlBox.displayName = \"ControlBox\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ControlBox\n});","map":{"version":3,"names":["src_exports","__export","ControlBox","module","exports","__toCommonJS","import_system","require","import_jsx_runtime","props","type","_hover","_invalid","_disabled","_focus","_checked","_child","opacity","_checkedAndChild","_checkedAndDisabled","_checkedAndFocus","_checkedAndHover","children","rest","checkedAndDisabled","checkedAndHover","checkedAndFocus","disabled","focus","hover","checked","invalid","child","jsx","chakra","div","__css","display","alignItems","justifyContent","transitionProperty","transitionDuration","flexShrink","displayName"],"sources":["../src/index.ts","../src/control-box.tsx"],"sourcesContent":["export { ControlBox } from \"./control-box\"\nexport type { ControlBoxOptions, ControlBoxProps } from \"./control-box\"\n","import { chakra, SystemStyleObject, HTMLChakraProps } from \"@chakra-ui/system\"\n\nexport interface ControlBoxOptions {\n  type?: \"checkbox\" | \"radio\"\n  _hover?: SystemStyleObject\n  _invalid?: SystemStyleObject\n  _disabled?: SystemStyleObject\n  _focus?: SystemStyleObject\n  _checked?: SystemStyleObject\n  _child?: SystemStyleObject\n  _checkedAndChild?: SystemStyleObject\n  _checkedAndDisabled?: SystemStyleObject\n  _checkedAndFocus?: SystemStyleObject\n  _checkedAndHover?: SystemStyleObject\n}\n\nexport type IControlBox = ControlBoxOptions\n\ninterface BaseControlProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof ControlBoxOptions> {}\n\nexport interface ControlBoxProps extends BaseControlProps, ControlBoxOptions {}\n\n/**\n * @deprecated This component will be removed in the next major release.\n */\nexport const ControlBox: React.FC<ControlBoxProps> = (props) => {\n  const {\n    type = \"checkbox\",\n    _hover,\n    _invalid,\n    _disabled,\n    _focus,\n    _checked,\n    _child = { opacity: 0 },\n    _checkedAndChild = { opacity: 1 },\n    _checkedAndDisabled,\n    _checkedAndFocus,\n    _checkedAndHover,\n    children,\n    ...rest\n  } = props\n\n  const checkedAndDisabled = `input[type=${type}]:checked:disabled + &`\n  const checkedAndHover = `input[type=${type}]:checked:hover:not(:disabled) + &`\n  const checkedAndFocus = `input[type=${type}]:checked:focus + &`\n  const disabled = `input[type=${type}]:disabled + &`\n  const focus = `input[type=${type}]:focus + &`\n  const hover = `input[type=${type}]:hover:not(:disabled):not(:checked) + &`\n  const checked = `input[type=${type}]:checked + &, input[type=${type}][aria-checked=mixed] + &`\n  const invalid = `input[type=${type}][aria-invalid=true] + &`\n  const child = `& > *`\n\n  return (\n    <chakra.div\n      {...rest}\n      aria-hidden\n      __css={{\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        transitionProperty: \"common\",\n        transitionDuration: \"fast\",\n        flexShrink: 0,\n        [focus]: _focus,\n        [hover]: _hover,\n        [disabled]: _disabled,\n        [invalid]: _invalid,\n        [checkedAndDisabled]: _checkedAndDisabled,\n        [checkedAndFocus]: _checkedAndFocus,\n        [checkedAndHover]: _checkedAndHover,\n        [child]: _child,\n        [checked]: {\n          ..._checked,\n          [child]: _checkedAndChild,\n        },\n      }}\n    >\n      {children}\n    </chakra.div>\n  )\n}\n\nControlBox.displayName = \"ControlBox\"\n\nexport default ControlBox\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,UAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,WAAA;;;ACAA,IAAAM,aAAA,GAA2DC,OAAA;AAsDvD,IAAAC,kBAAA,GAAAD,OAAA;AA5BG,IAAML,UAAA,GAAyCO,KAAA,IAAU;EAC9D,MAAM;IACJC,IAAA,GAAO;IACPC,MAAA;IACAC,QAAA;IACAC,SAAA;IACAC,MAAA;IACAC,QAAA;IACAC,MAAA,GAAS;MAAEC,OAAA,EAAS;IAAE;IACtBC,gBAAA,GAAmB;MAAED,OAAA,EAAS;IAAE;IAChCE,mBAAA;IACAC,gBAAA;IACAC,gBAAA;IACAC,QAAA;IACA,GAAGC;EACL,IAAId,KAAA;EAEJ,MAAMe,kBAAA,GAAqB,cAAcd,IAAA;EACzC,MAAMe,eAAA,GAAkB,cAAcf,IAAA;EACtC,MAAMgB,eAAA,GAAkB,cAAchB,IAAA;EACtC,MAAMiB,QAAA,GAAW,cAAcjB,IAAA;EAC/B,MAAMkB,KAAA,GAAQ,cAAclB,IAAA;EAC5B,MAAMmB,KAAA,GAAQ,cAAcnB,IAAA;EAC5B,MAAMoB,OAAA,GAAU,cAAcpB,IAAA,6BAAiCA,IAAA;EAC/D,MAAMqB,OAAA,GAAU,cAAcrB,IAAA;EAC9B,MAAMsB,KAAA,GAAQ;EAEd,OACE,mBAAAxB,kBAAA,CAAAyB,GAAA,EAAC3B,aAAA,CAAA4B,MAAA,CAAOC,GAAA,EAAP;IACE,GAAGZ,IAAA;IACJ,eAAW;IACXa,KAAA,EAAO;MACLC,OAAA,EAAS;MACTC,UAAA,EAAY;MACZC,cAAA,EAAgB;MAChBC,kBAAA,EAAoB;MACpBC,kBAAA,EAAoB;MACpBC,UAAA,EAAY;MACZ,CAACd,KAAK,GAAGd,MAAA;MACT,CAACe,KAAK,GAAGlB,MAAA;MACT,CAACgB,QAAQ,GAAGd,SAAA;MACZ,CAACkB,OAAO,GAAGnB,QAAA;MACX,CAACY,kBAAkB,GAAGL,mBAAA;MACtB,CAACO,eAAe,GAAGN,gBAAA;MACnB,CAACK,eAAe,GAAGJ,gBAAA;MACnB,CAACW,KAAK,GAAGhB,MAAA;MACT,CAACc,OAAO,GAAG;QACT,GAAGf,QAAA;QACH,CAACiB,KAAK,GAAGd;MACX;IACF;IAECI;EAAA,CACH;AAEJ;AAEApB,UAAA,CAAWyC,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"script"}