{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Accordion: () => Accordion,\n  AccordionButton: () => AccordionButton,\n  AccordionIcon: () => AccordionIcon,\n  AccordionItem: () => AccordionItem,\n  AccordionPanel: () => AccordionPanel,\n  AccordionProvider: () => AccordionProvider,\n  useAccordion: () => useAccordion,\n  useAccordionContext: () => useAccordionContext,\n  useAccordionItem: () => useAccordionItem,\n  useAccordionItemState: () => useAccordionItemState,\n  useAccordionStyles: () => useAccordionStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/accordion.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react2 = require(\"react\");\n\n// src/accordion-context.ts\nvar import_descendant = require(\"@chakra-ui/descendant\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [AccordionStylesProvider, useAccordionStyles] = (0, import_react_context.createContext)({\n  name: \"AccordionStylesContext\",\n  hookName: \"useAccordionStyles\",\n  providerName: \"<Accordion />\"\n});\nvar [AccordionItemProvider, useAccordionItemContext] = (0, import_react_context.createContext)({\n  name: \"AccordionItemContext\",\n  hookName: \"useAccordionItemContext\",\n  providerName: \"<AccordionItem />\"\n});\nvar [AccordionDescendantsProvider, useAccordionDescendantsContext, useAccordionDescendants, useAccordionDescendant] = (0, import_descendant.createDescendantContext)();\n\n// src/use-accordion.ts\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nfunction useAccordion(props) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    ...htmlProps\n  } = props;\n  allowMultipleWarning(props);\n  allowMultipleAndAllowToggleWarning(props);\n  const descendants = useAccordionDescendants();\n  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(-1);\n  (0, import_react.useEffect)(() => {\n    return () => {\n      setFocusedIndex(-1);\n    };\n  }, []);\n  const [index, setIndex] = (0, import_react_use_controllable_state.useControllableState)({\n    value: indexProp,\n    defaultValue() {\n      if (allowMultiple) return defaultIndex != null ? defaultIndex : [];\n      return defaultIndex != null ? defaultIndex : -1;\n    },\n    onChange\n  });\n  const getAccordionItemProps = idx => {\n    let isOpen = false;\n    if (idx !== null) {\n      isOpen = Array.isArray(index) ? index.includes(idx) : index === idx;\n    }\n    const onChange2 = isOpen2 => {\n      if (idx === null) return;\n      if (allowMultiple && Array.isArray(index)) {\n        const nextState = isOpen2 ? index.concat(idx) : index.filter(i => i !== idx);\n        setIndex(nextState);\n      } else if (isOpen2) {\n        setIndex(idx);\n      } else if (allowToggle) {\n        setIndex(-1);\n      }\n    };\n    return {\n      isOpen,\n      onChange: onChange2\n    };\n  };\n  return {\n    index,\n    setIndex,\n    htmlProps,\n    getAccordionItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    descendants\n  };\n}\nvar [AccordionProvider, useAccordionContext] = (0, import_react_context2.createContext)({\n  name: \"AccordionContext\",\n  hookName: \"useAccordionContext\",\n  providerName: \"Accordion\"\n});\nfunction useAccordionItem(props) {\n  const {\n    isDisabled,\n    isFocusable,\n    id,\n    ...htmlProps\n  } = props;\n  const {\n    getAccordionItemProps,\n    setFocusedIndex\n  } = useAccordionContext();\n  const buttonRef = (0, import_react.useRef)(null);\n  const reactId = (0, import_react.useId)();\n  const uid = id != null ? id : reactId;\n  const buttonId = `accordion-button-${uid}`;\n  const panelId = `accordion-panel-${uid}`;\n  focusableNotDisabledWarning(props);\n  const {\n    register,\n    index,\n    descendants\n  } = useAccordionDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  const {\n    isOpen,\n    onChange\n  } = getAccordionItemProps(index === -1 ? null : index);\n  warnIfOpenAndDisabled({\n    isOpen,\n    isDisabled\n  });\n  const onOpen = () => {\n    onChange == null ? void 0 : onChange(true);\n  };\n  const onClose = () => {\n    onChange == null ? void 0 : onChange(false);\n  };\n  const onClick = (0, import_react.useCallback)(() => {\n    onChange == null ? void 0 : onChange(!isOpen);\n    setFocusedIndex(index);\n  }, [index, setFocusedIndex, isOpen, onChange]);\n  const onKeyDown = (0, import_react.useCallback)(event => {\n    const keyMap = {\n      ArrowDown: () => {\n        const next = descendants.nextEnabled(index);\n        next == null ? void 0 : next.node.focus();\n      },\n      ArrowUp: () => {\n        const prev = descendants.prevEnabled(index);\n        prev == null ? void 0 : prev.node.focus();\n      },\n      Home: () => {\n        const first = descendants.firstEnabled();\n        first == null ? void 0 : first.node.focus();\n      },\n      End: () => {\n        const last = descendants.lastEnabled();\n        last == null ? void 0 : last.node.focus();\n      }\n    };\n    const action = keyMap[event.key];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, index]);\n  const onFocus = (0, import_react.useCallback)(() => {\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index]);\n  const getButtonProps = (0, import_react.useCallback)(function getButtonProps2(props2 = {}, ref = null) {\n    return {\n      ...props2,\n      type: \"button\",\n      ref: (0, import_react_use_merge_refs.mergeRefs)(register, buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onClick),\n      onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onFocus),\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown)\n    };\n  }, [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId, register]);\n  const getPanelProps = (0, import_react.useCallback)(function getPanelProps2(props2 = {}, ref = null) {\n    return {\n      ...props2,\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen\n    };\n  }, [buttonId, isOpen, panelId]);\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps\n  };\n}\nfunction allowMultipleWarning(props) {\n  const index = props.index || props.defaultIndex;\n  const condition = index != null && !Array.isArray(index) && props.allowMultiple;\n  (0, import_shared_utils.warn)({\n    condition: !!condition,\n    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`\n  });\n}\nfunction allowMultipleAndAllowToggleWarning(props) {\n  (0, import_shared_utils.warn)({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`\n  });\n}\nfunction focusableNotDisabledWarning(props) {\n  (0, import_shared_utils.warn)({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    `\n  });\n}\nfunction warnIfOpenAndDisabled(props) {\n  (0, import_shared_utils.warn)({\n    condition: props.isOpen && !!props.isDisabled,\n    message: \"Cannot open a disabled accordion item\"\n  });\n}\n\n// src/accordion.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Accordion = (0, import_system.forwardRef)(function Accordion2({\n  children,\n  reduceMotion,\n  ...props\n}, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Accordion\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    htmlProps,\n    descendants,\n    ...context\n  } = useAccordion(ownProps);\n  const ctx = (0, import_react2.useMemo)(() => ({\n    ...context,\n    reduceMotion: !!reduceMotion\n  }), [context, reduceMotion]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionProvider, {\n      value: ctx,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(AccordionStylesProvider, {\n        value: styles,\n        children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n          ref,\n          ...htmlProps,\n          className: (0, import_shared_utils2.cx)(\"chakra-accordion\", props.className),\n          __css: styles.root,\n          children\n        })\n      })\n    })\n  });\n});\nAccordion.displayName = \"Accordion\";\n\n// src/accordion-button.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar AccordionButton = (0, import_system2.forwardRef)(function AccordionButton2(props, ref) {\n  const {\n    getButtonProps\n  } = useAccordionItemContext();\n  const buttonProps = getButtonProps(props, ref);\n  const styles = useAccordionStyles();\n  const buttonStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.button\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.button, {\n    ...buttonProps,\n    className: (0, import_shared_utils3.cx)(\"chakra-accordion__button\", props.className),\n    __css: buttonStyles\n  });\n});\nAccordionButton.displayName = \"AccordionButton\";\n\n// src/accordion-icon.tsx\nvar import_icon = require(\"@chakra-ui/icon\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nfunction AccordionIcon(props) {\n  const {\n    isOpen,\n    isDisabled\n  } = useAccordionItemContext();\n  const {\n    reduceMotion\n  } = useAccordionContext();\n  const _className = (0, import_shared_utils4.cx)(\"chakra-accordion__icon\", props.className);\n  const styles = useAccordionStyles();\n  const iconStyles = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : void 0,\n    transition: reduceMotion ? void 0 : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_icon.Icon, {\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": true,\n    className: _className,\n    __css: iconStyles,\n    ...props,\n    children: /* @__PURE__ */(0, import_jsx_runtime3.jsx)(\"path\", {\n      fill: \"currentColor\",\n      d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    })\n  });\n}\nAccordionIcon.displayName = \"AccordionIcon\";\n\n// src/accordion-item.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_react3 = require(\"react\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar AccordionItem = (0, import_system3.forwardRef)(function AccordionItem2(props, ref) {\n  const {\n    children,\n    className\n  } = props;\n  const {\n    htmlProps,\n    ...context\n  } = useAccordionItem(props);\n  const styles = useAccordionStyles();\n  const containerStyles = {\n    ...styles.container,\n    overflowAnchor: \"none\"\n  };\n  const ctx = (0, import_react3.useMemo)(() => context, [context]);\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(AccordionItemProvider, {\n    value: ctx,\n    children: /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system3.chakra.div, {\n      ref,\n      ...htmlProps,\n      className: (0, import_shared_utils5.cx)(\"chakra-accordion__item\", className),\n      __css: containerStyles,\n      children: typeof children === \"function\" ? children({\n        isExpanded: !!context.isOpen,\n        isDisabled: !!context.isDisabled\n      }) : children\n    })\n  });\n});\nAccordionItem.displayName = \"AccordionItem\";\n\n// src/accordion-panel.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_transition = require(\"@chakra-ui/transition\");\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar AccordionPanel = (0, import_system4.forwardRef)(function AccordionPanel2(props, ref) {\n  const {\n    className,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    reduceMotion\n  } = useAccordionContext();\n  const {\n    getPanelProps,\n    isOpen\n  } = useAccordionItemContext();\n  const panelProps = getPanelProps(rest, ref);\n  const _className = (0, import_shared_utils6.cx)(\"chakra-accordion__panel\", className);\n  const styles = useAccordionStyles();\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n  const child = /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system4.chakra.div, {\n    ...panelProps,\n    __css: styles.panel,\n    className: _className\n  });\n  if (!reduceMotion) {\n    return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_transition.Collapse, {\n      in: isOpen,\n      ...motionProps,\n      children: child\n    });\n  }\n  return child;\n});\nAccordionPanel.displayName = \"AccordionPanel\";\n\n// src/use-accordion-item-state.ts\nfunction useAccordionItemState() {\n  const {\n    isOpen,\n    isDisabled,\n    onClose,\n    onOpen\n  } = useAccordionItemContext();\n  return {\n    isOpen,\n    onClose,\n    isDisabled,\n    onOpen\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  useAccordionItemState,\n  useAccordionStyles\n});","map":{"version":3,"names":["src_exports","__export","Accordion","AccordionButton","AccordionIcon","AccordionItem","AccordionPanel","AccordionProvider","useAccordion","useAccordionContext","useAccordionItem","useAccordionItemState","useAccordionStyles","module","exports","__toCommonJS","import_system","require","import_shared_utils2","import_react2","import_descendant","import_react_context","AccordionStylesProvider","createContext","name","hookName","providerName","AccordionItemProvider","useAccordionItemContext","AccordionDescendantsProvider","useAccordionDescendantsContext","useAccordionDescendants","useAccordionDescendant","createDescendantContext","import_react_context2","import_react_use_controllable_state","import_react_use_merge_refs","import_shared_utils","import_react","props","onChange","defaultIndex","index","indexProp","allowMultiple","allowToggle","htmlProps","allowMultipleWarning","allowMultipleAndAllowToggleWarning","descendants","focusedIndex","setFocusedIndex","useState","useEffect","setIndex","useControllableState","value","defaultValue","getAccordionItemProps","idx","isOpen","Array","isArray","includes","onChange2","isOpen2","nextState","concat","filter","i","isDisabled","isFocusable","id","buttonRef","useRef","reactId","useId","uid","buttonId","panelId","focusableNotDisabledWarning","register","disabled","warnIfOpenAndDisabled","onOpen","onClose","onClick","useCallback","onKeyDown","event","keyMap","ArrowDown","next","nextEnabled","node","focus","ArrowUp","prev","prevEnabled","Home","first","firstEnabled","End","last","lastEnabled","action","key","preventDefault","onFocus","getButtonProps","getButtonProps2","props2","ref","type","mergeRefs","callAllHandlers","getPanelProps","getPanelProps2","role","hidden","condition","warn","message","import_jsx_runtime","forwardRef","Accordion2","children","reduceMotion","styles","useMultiStyleConfig","ownProps","omitThemingProps","context","ctx","useMemo","jsx","chakra","div","className","cx","__css","root","displayName","import_system2","import_shared_utils3","import_jsx_runtime2","AccordionButton2","buttonProps","buttonStyles","display","alignItems","width","outline","button","import_icon","import_shared_utils4","import_jsx_runtime3","_className","iconStyles","opacity","transform","transition","transformOrigin","icon","Icon","viewBox","fill","d","import_system3","import_shared_utils5","import_react3","import_jsx_runtime4","AccordionItem2","containerStyles","container","overflowAnchor","isExpanded","import_system4","import_transition","import_shared_utils6","import_jsx_runtime5","AccordionPanel2","motionProps","rest","panelProps","child","panel","Collapse","in"],"sources":["../src/index.ts","../src/accordion.tsx","../src/accordion-context.ts","../src/use-accordion.ts","../src/accordion-button.tsx","../src/accordion-icon.tsx","../src/accordion-item.tsx","../src/accordion-panel.tsx","../src/use-accordion-item-state.ts"],"sourcesContent":["export { Accordion } from \"./accordion\"\nexport type { AccordionProps } from \"./accordion\"\nexport { AccordionButton } from \"./accordion-button\"\nexport type { AccordionButtonProps } from \"./accordion-button\"\nexport { useAccordionStyles } from \"./accordion-context\"\nexport { AccordionIcon } from \"./accordion-icon\"\nexport type { AccordionIconProps } from \"./accordion-icon\"\nexport { AccordionItem } from \"./accordion-item\"\nexport type { AccordionItemProps } from \"./accordion-item\"\nexport { AccordionPanel } from \"./accordion-panel\"\nexport type { AccordionPanelProps } from \"./accordion-panel\"\nexport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n} from \"./use-accordion\"\nexport type {\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n  UseAccordionReturn,\n  ExpandedIndex,\n} from \"./use-accordion\"\nexport { useAccordionItemState } from \"./use-accordion-item-state\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport {\n  AccordionDescendantsProvider,\n  AccordionStylesProvider,\n} from \"./accordion-context\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  UseAccordionProps,\n} from \"./use-accordion\"\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<HTMLChakraProps<\"div\">, keyof UseAccordionProps>,\n    ThemingProps<\"Accordion\"> {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   *\n   * @default false\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/accordion\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(function Accordion(\n  { children, reduceMotion, ...props },\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Accordion\", props)\n  const ownProps = omitThemingProps(props)\n\n  const { htmlProps, descendants, ...context } = useAccordion(ownProps)\n\n  const ctx = useMemo(\n    () => ({ ...context, reduceMotion: !!reduceMotion }),\n    [context, reduceMotion],\n  )\n\n  return (\n    <AccordionDescendantsProvider value={descendants}>\n      <AccordionProvider value={ctx}>\n        <AccordionStylesProvider value={styles}>\n          <chakra.div\n            ref={ref}\n            {...htmlProps}\n            className={cx(\"chakra-accordion\", props.className)}\n            __css={styles.root}\n          >\n            {children}\n          </chakra.div>\n        </AccordionStylesProvider>\n      </AccordionProvider>\n    </AccordionDescendantsProvider>\n  )\n})\n\nAccordion.displayName = \"Accordion\"\n","import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\nimport { UseAccordionItemReturn } from \"./use-accordion\"\n\nexport const [AccordionStylesProvider, useAccordionStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: \"AccordionStylesContext\",\n  hookName: \"useAccordionStyles\",\n  providerName: \"<Accordion />\",\n})\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nexport const [AccordionItemProvider, useAccordionItemContext] =\n  createContext<AccordionItemContext>({\n    name: \"AccordionItemContext\",\n    hookName: \"useAccordionItemContext\",\n    providerName: \"<AccordionItem />\",\n  })\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  AccordionDescendantsProvider,\n  useAccordionDescendantsContext,\n  useAccordionDescendants,\n  useAccordionDescendant,\n] = createDescendantContext<HTMLButtonElement>()\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers, warn } from \"@chakra-ui/shared-utils\"\n\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\nimport {\n  useAccordionDescendant,\n  useAccordionDescendants,\n} from \"./accordion-context\"\n\n/* -------------------------------------------------------------------------------------------------\n * useAccordion - The root react hook that manages all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @deprecated - This will be removed in future versions.\n * Please use `number | number[]` instead.\n */\nexport type ExpandedIndex = number | number[]\n\nexport interface UseAccordionProps {\n  /**\n   * If `true`, multiple accordion items can be expanded at once.\n   *\n   * @default false\n   */\n  allowMultiple?: boolean\n  /**\n   * If `true`, any expanded accordion item can be collapsed again.\n   *\n   * @default false\n   */\n  allowToggle?: boolean\n  /**\n   * The index(es) of the expanded accordion item\n   */\n  index?: ExpandedIndex\n  /**\n   * The initial index(es) of the expanded accordion item\n   */\n  defaultIndex?: ExpandedIndex\n  /**\n   * The callback invoked when accordion items are expanded or collapsed.\n   */\n  onChange?(expandedIndex: ExpandedIndex): void\n}\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n *\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\nexport function useAccordion(props: UseAccordionProps) {\n  const {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle,\n    ...htmlProps\n  } = props\n\n  // validate the props and `warn` if used incorrectly\n  allowMultipleWarning(props)\n  allowMultipleAndAllowToggleWarning(props)\n\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n  const descendants = useAccordionDescendants()\n\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Reset focused index when accordion unmounts\n   * or descendants change\n   */\n  useEffect(() => {\n    return () => {\n      setFocusedIndex(-1)\n    }\n  }, [])\n\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n  const [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue() {\n      if (allowMultiple) return defaultIndex ?? []\n      return defaultIndex ?? -1\n    },\n    onChange,\n  })\n\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n  const getAccordionItemProps = (idx: number | null) => {\n    let isOpen = false\n\n    if (idx !== null) {\n      isOpen = Array.isArray(index) ? index.includes(idx) : index === idx\n    }\n\n    const onChange = (isOpen: boolean) => {\n      if (idx === null) return\n\n      if (allowMultiple && Array.isArray(index)) {\n        //\n        const nextState = isOpen\n          ? index.concat(idx)\n          : index.filter((i) => i !== idx)\n\n        setIndex(nextState)\n        //\n      } else if (isOpen) {\n        setIndex(idx)\n      } else if (allowToggle) {\n        setIndex(-1)\n      }\n    }\n\n    return { isOpen, onChange }\n  }\n\n  return {\n    index,\n    setIndex,\n    htmlProps,\n    getAccordionItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    descendants,\n  }\n}\n\nexport type UseAccordionReturn = ReturnType<typeof useAccordion>\n\n/* -------------------------------------------------------------------------------------------------\n * Create context for the root accordion logic\n * -----------------------------------------------------------------------------------------------*/\n\ninterface AccordionContext\n  extends Omit<UseAccordionReturn, \"htmlProps\" | \"descendants\"> {\n  reduceMotion: boolean\n}\n\nexport const [AccordionProvider, useAccordionContext] =\n  createContext<AccordionContext>({\n    name: \"AccordionContext\",\n    hookName: \"useAccordionContext\",\n    providerName: \"Accordion\",\n  })\n\n/* -------------------------------------------------------------------------------------------------\n * Hook for a single accordion item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseAccordionItemProps {\n  /**\n   * If `true`, the accordion item will be disabled.\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the accordion item will be focusable.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * A unique id for the accordion item.\n   */\n  id?: string\n}\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and its children\n */\nexport function useAccordionItem(props: UseAccordionItemProps) {\n  const { isDisabled, isFocusable, id, ...htmlProps } = props\n  const { getAccordionItemProps, setFocusedIndex } = useAccordionContext()\n\n  const buttonRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n  const reactId = useId()\n  const uid = id ?? reactId\n\n  const buttonId = `accordion-button-${uid}`\n  const panelId = `accordion-panel-${uid}`\n\n  focusableNotDisabledWarning(props)\n\n  /**\n   * Think of this as a way to register this accordion item\n   * with its parent `useAccordion`\n   */\n  const { register, index, descendants } = useAccordionDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const { isOpen, onChange } = getAccordionItemProps(\n    index === -1 ? null : index,\n  )\n\n  warnIfOpenAndDisabled({ isOpen, isDisabled })\n\n  const onOpen = () => {\n    onChange?.(true)\n  }\n\n  const onClose = () => {\n    onChange?.(false)\n  }\n\n  /**\n   * Toggle the visibility of the accordion item\n   */\n  const onClick = useCallback(() => {\n    onChange?.(!isOpen)\n    setFocusedIndex(index)\n  }, [index, setFocusedIndex, isOpen, onChange])\n\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(index)\n          next?.node.focus()\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(index)\n          prev?.node.focus()\n        },\n        Home: () => {\n          const first = descendants.firstEnabled()\n          first?.node.focus()\n        },\n        End: () => {\n          const last = descendants.lastEnabled()\n          last?.node.focus()\n        },\n      }\n\n      const action = keyMap[event.key]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, index],\n  )\n\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n  const onFocus = useCallback(() => {\n    setFocusedIndex(index)\n  }, [setFocusedIndex, index])\n\n  const getButtonProps = useCallback(\n    function getButtonProps(\n      props: Omit<React.HTMLAttributes<HTMLElement>, \"color\"> = {},\n      ref: React.Ref<HTMLButtonElement> | null = null,\n    ): React.ComponentProps<\"button\"> {\n      return {\n        ...props,\n        type: \"button\",\n        ref: mergeRefs(register, buttonRef, ref),\n        id: buttonId,\n        disabled: !!isDisabled,\n        \"aria-expanded\": !!isOpen,\n        \"aria-controls\": panelId,\n        onClick: callAllHandlers(props.onClick, onClick),\n        onFocus: callAllHandlers(props.onFocus, onFocus),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      }\n    },\n    [\n      buttonId,\n      isDisabled,\n      isOpen,\n      onClick,\n      onFocus,\n      onKeyDown,\n      panelId,\n      register,\n    ],\n  )\n\n  const getPanelProps = useCallback(\n    function getPanelProps<T>(\n      props: Omit<React.HTMLAttributes<T>, \"color\"> = {},\n      ref: React.Ref<T> | null = null,\n    ): React.HTMLAttributes<T> & React.RefAttributes<T> {\n      return {\n        ...props,\n        ref,\n        role: \"region\",\n        id: panelId,\n        \"aria-labelledby\": buttonId,\n        hidden: !isOpen,\n      }\n    },\n    [buttonId, isOpen, panelId],\n  )\n\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps,\n  }\n}\n\nexport type UseAccordionItemReturn = ReturnType<typeof useAccordionItem>\n\n/* -------------------------------------------------------------------------------------------------\n * Validate accordion and accordion item props, and emit warnings.\n * -----------------------------------------------------------------------------------------------*/\n\nfunction allowMultipleWarning(props: UseAccordionProps) {\n  const index = props.index || props.defaultIndex\n  const condition =\n    index != null && !Array.isArray(index) && props.allowMultiple\n\n  warn({\n    condition: !!condition,\n    message: `If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: ${typeof index},`,\n  })\n}\n\nfunction allowMultipleAndAllowToggleWarning(props: UseAccordionProps) {\n  warn({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: `If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not`,\n  })\n}\n\nfunction focusableNotDisabledWarning(props: UseAccordionItemProps) {\n  warn({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: `Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    `,\n  })\n}\n\nfunction warnIfOpenAndDisabled(props: {\n  isOpen: boolean\n  isDisabled?: boolean\n}) {\n  warn({\n    condition: props.isOpen && !!props.isDisabled,\n    message: \"Cannot open a disabled accordion item\",\n  })\n}\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  useAccordionItemContext,\n  useAccordionStyles,\n} from \"./accordion-context\"\n\nexport interface AccordionButtonProps extends HTMLChakraProps<\"button\"> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note 🚨: Each accordion button must be wrapped in a heading tag,\n * that is appropriate for the information architecture of the page.\n */\n\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  function AccordionButton(props, ref) {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useAccordionStyles()\n    const buttonStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nAccordionButton.displayName = \"AccordionButton\"\n","import { Icon } from \"@chakra-ui/icon\"\nimport { PropsOf, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  useAccordionItemContext,\n  useAccordionStyles,\n} from \"./accordion-context\"\nimport { useAccordionContext } from \"./use-accordion\"\n\nexport type AccordionIconProps = PropsOf<typeof Icon>\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\n\nexport function AccordionIcon(props: AccordionIconProps) {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const _className = cx(\"chakra-accordion__icon\", props.className)\n  const styles = useAccordionStyles()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon,\n  }\n\n  return (\n    <Icon\n      viewBox=\"0 0 24 24\"\n      aria-hidden\n      className={_className}\n      __css={iconStyles}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nAccordionIcon.displayName = \"AccordionIcon\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { AccordionItemProvider, useAccordionStyles } from \"./accordion-context\"\nimport { useAccordionItem, UseAccordionItemProps } from \"./use-accordion\"\n\nexport interface AccordionItemProps\n  extends Omit<\n      HTMLChakraProps<\"div\">,\n      keyof UseAccordionItemProps | \"children\"\n    >,\n    UseAccordionItemProps {\n  children?:\n    | React.ReactNode\n    | ((props: { isExpanded: boolean; isDisabled: boolean }) => React.ReactNode)\n}\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\n\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  function AccordionItem(props, ref) {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useAccordionStyles()\n    const containerStyles: SystemStyleObject = {\n      ...styles.container,\n      overflowAnchor: \"none\",\n    }\n\n    const ctx = useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={ctx}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={containerStyles}\n        >\n          {typeof children === \"function\"\n            ? children({\n                isExpanded: !!context.isOpen,\n                isDisabled: !!context.isDisabled,\n              })\n            : children}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nAccordionItem.displayName = \"AccordionItem\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { Collapse, CollapseProps } from \"@chakra-ui/transition\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  useAccordionItemContext,\n  useAccordionStyles,\n} from \"./accordion-context\"\nimport { useAccordionContext } from \"./use-accordion\"\n\nexport interface AccordionPanelProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The properties passed to the underlying `Collapse` component.\n   */\n  motionProps?: CollapseProps\n}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  function AccordionPanel(props, ref) {\n    const { className, motionProps, ...rest } = props\n\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(rest, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", className)\n    const styles = useAccordionStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div {...panelProps} __css={styles.panel} className={_className} />\n    )\n\n    if (!reduceMotion) {\n      return (\n        <Collapse in={isOpen} {...motionProps}>\n          {child}\n        </Collapse>\n      )\n    }\n\n    return child\n  },\n)\n\nAccordionPanel.displayName = \"AccordionPanel\"\n","import { useAccordionItemContext } from \"./accordion-context\"\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}