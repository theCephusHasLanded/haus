{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Editable: () => Editable,\n  EditableInput: () => EditableInput,\n  EditablePreview: () => EditablePreview,\n  EditableTextarea: () => EditableTextarea,\n  useEditable: () => useEditable,\n  useEditableContext: () => useEditableContext,\n  useEditableControls: () => useEditableControls,\n  useEditableState: () => useEditableState,\n  useEditableStyles: () => useEditableStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/editable.tsx\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_system = require(\"@chakra-ui/system\");\n\n// src/editable-context.ts\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [EditableStylesProvider, useEditableStyles] = (0, import_react_context.createContext)({\n  name: `EditableStylesContext`,\n  errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Editable />\" `\n});\nvar [EditableProvider, useEditableContext] = (0, import_react_context.createContext)({\n  name: \"EditableContext\",\n  errorMessage: \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\"\n});\n\n// src/use-editable.ts\nvar import_react_use_focus_on_pointer_down = require(\"@chakra-ui/react-use-focus-on-pointer-down\");\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react_use_update_effect = require(\"@chakra-ui/react-use-update-effect\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_react_use_callback_ref = require(\"@chakra-ui/react-use-callback-ref\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nfunction contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\nfunction useEditable(props = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props;\n  const onEditProp = (0, import_react_use_callback_ref.useCallbackRef)(onEditCallback);\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  const [isEditing, setIsEditing] = (0, import_react.useState)(defaultIsEditing);\n  const [value, setValue] = (0, import_react_use_controllable_state.useControllableState)({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const [prevValue, setPrevValue] = (0, import_react.useState)(value);\n  const inputRef = (0, import_react.useRef)(null);\n  const previewRef = (0, import_react.useRef)(null);\n  const editButtonRef = (0, import_react.useRef)(null);\n  const cancelButtonRef = (0, import_react.useRef)(null);\n  const submitButtonRef = (0, import_react.useRef)(null);\n  (0, import_react_use_focus_on_pointer_down.useFocusOnPointerDown)({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  const isInteractive = !isEditing && !isDisabled;\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    var _a, _b;\n    if (isEditing) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      if (selectAllOnFocus) (_b = inputRef.current) == null ? void 0 : _b.select();\n    }\n  }, []);\n  (0, import_react_use_update_effect.useUpdateEffect)(() => {\n    var _a, _b, _c, _d;\n    if (!isEditing) {\n      if (finalFocusRef) {\n        (_a = finalFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        (_b = editButtonRef.current) == null ? void 0 : _b.focus();\n      }\n      return;\n    }\n    (_c = inputRef.current) == null ? void 0 : _c.focus();\n    if (selectAllOnFocus) {\n      (_d = inputRef.current) == null ? void 0 : _d.select();\n    }\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  const onEdit = (0, import_react.useCallback)(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  const onUpdatePrevValue = (0, import_react.useCallback)(() => {\n    setPrevValue(value);\n  }, [value]);\n  const onCancel = (0, import_react.useCallback)(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [onCancelProp, onBlurProp, setValue, prevValue]);\n  const onSubmit = (0, import_react.useCallback)(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [value, onSubmitProp, onBlurProp, prevValue]);\n  (0, import_react.useEffect)(() => {\n    if (isEditing) return;\n    const inputEl = inputRef.current;\n    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {\n      inputEl == null ? void 0 : inputEl.blur();\n    }\n  }, [isEditing]);\n  const onChange = (0, import_react.useCallback)(event => {\n    setValue(event.currentTarget.value);\n  }, [setValue]);\n  const onKeyDown = (0, import_react.useCallback)(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel,\n      Enter: event2 => {\n        if (!event2.shiftKey && !event2.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  const onKeyDownWithoutSubmit = (0, import_react.useCallback)(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel]);\n  const isValueEmpty = value.length === 0;\n  const onBlur = (0, import_react.useCallback)(event => {\n    var _a;\n    if (!isEditing) return;\n    const doc = event.currentTarget.ownerDocument;\n    const relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;\n    const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    const isValidBlur = !targetIsCancel && !targetIsSubmit;\n    if (isValidBlur) {\n      if (submitOnBlur) {\n        onSubmit();\n      } else {\n        onCancel();\n      }\n    }\n  }, [submitOnBlur, onSubmit, onCancel, isEditing]);\n  const getPreviewProps = (0, import_react.useCallback)((props2 = {}, ref = null) => {\n    const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;\n    return {\n      ...props2,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": (0, import_shared_utils.ariaAttr)(isDisabled),\n      tabIndex,\n      onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onEdit, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);\n  const getInputProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    hidden: !isEditing,\n    placeholder,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": (0, import_shared_utils.ariaAttr)(isDisabled),\n    value,\n    onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, onBlur),\n    onChange: (0, import_shared_utils.callAllHandlers)(props2.onChange, onChange),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown),\n    onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onUpdatePrevValue)\n  }), [isDisabled, isEditing, onBlur, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);\n  const getTextareaProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    hidden: !isEditing,\n    placeholder,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": (0, import_shared_utils.ariaAttr)(isDisabled),\n    value,\n    onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, onBlur),\n    onChange: (0, import_shared_utils.callAllHandlers)(props2.onChange, onChange),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDownWithoutSubmit),\n    onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, onUpdatePrevValue)\n  }), [isDisabled, isEditing, onBlur, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);\n  const getEditButtonProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    \"aria-label\": \"Edit\",\n    ...props2,\n    type: \"button\",\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onEdit),\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, editButtonRef),\n    disabled: isDisabled\n  }), [onEdit, isDisabled]);\n  const getSubmitButtonProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    \"aria-label\": \"Submit\",\n    ref: (0, import_react_use_merge_refs.mergeRefs)(submitButtonRef, ref),\n    type: \"button\",\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onSubmit),\n    disabled: isDisabled\n  }), [onSubmit, isDisabled]);\n  const getCancelButtonProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    \"aria-label\": \"Cancel\",\n    id: \"cancel\",\n    ...props2,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(cancelButtonRef, ref),\n    type: \"button\",\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onCancel),\n    disabled: isDisabled\n  }), [onCancel, isDisabled]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}\n\n// src/editable.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar Editable = (0, import_system.forwardRef)(function Editable2(props, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Editable\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    htmlProps,\n    ...context\n  } = useEditable(ownProps);\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  } = context;\n  const _className = (0, import_shared_utils2.cx)(\"chakra-editable\", props.className);\n  const children = (0, import_shared_utils2.runIfFn)(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(EditableProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(EditableStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n        ref,\n        ...htmlProps,\n        className: _className,\n        children\n      })\n    })\n  });\n});\nEditable.displayName = \"Editable\";\n\n// src/editable-input.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\n\n// src/shared.ts\nvar commonStyles = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\"\n};\n\n// src/editable-input.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar EditableInput = (0, import_system2.forwardRef)(function EditableInput2(props, ref) {\n  const {\n    getInputProps\n  } = useEditableContext();\n  const styles = useEditableStyles();\n  const inputProps = getInputProps(props, ref);\n  const _className = (0, import_shared_utils3.cx)(\"chakra-editable__input\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.input, {\n    ...inputProps,\n    __css: {\n      outline: 0,\n      ...commonStyles,\n      ...styles.input\n    },\n    className: _className\n  });\n});\nEditableInput.displayName = \"EditableInput\";\n\n// src/editable-preview.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar EditablePreview = (0, import_system3.forwardRef)(function EditablePreview2(props, ref) {\n  const {\n    getPreviewProps\n  } = useEditableContext();\n  const styles = useEditableStyles();\n  const previewProps = getPreviewProps(props, ref);\n  const _className = (0, import_shared_utils4.cx)(\"chakra-editable__preview\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.span, {\n    ...previewProps,\n    __css: {\n      cursor: \"text\",\n      display: \"inline-block\",\n      ...commonStyles,\n      ...styles.preview\n    },\n    className: _className\n  });\n});\nEditablePreview.displayName = \"EditablePreview\";\n\n// src/editable-textarea.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar EditableTextarea = (0, import_system4.forwardRef)(function EditableTextarea2(props, ref) {\n  const {\n    getTextareaProps\n  } = useEditableContext();\n  const styles = useEditableStyles();\n  const textareaProps = getTextareaProps(props, ref);\n  const _className = (0, import_shared_utils5.cx)(\"chakra-editable__textarea\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system4.chakra.textarea, {\n    ...textareaProps,\n    __css: {\n      outline: 0,\n      ...commonStyles,\n      ...styles.textarea\n    },\n    className: _className\n  });\n});\nEditableTextarea.displayName = \"EditableTextarea\";\n\n// src/use-editable-controls.tsx\nfunction useEditableControls() {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  } = useEditableContext();\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps\n  };\n}\n\n// src/use-editable-state.tsx\nfunction useEditableState() {\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  } = useEditableContext();\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled\n  };\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Editable,\n  EditableInput,\n  EditablePreview,\n  EditableTextarea,\n  useEditable,\n  useEditableContext,\n  useEditableControls,\n  useEditableState,\n  useEditableStyles\n});","map":{"version":3,"names":["src_exports","__export","Editable","EditableInput","EditablePreview","EditableTextarea","useEditable","useEditableContext","useEditableControls","useEditableState","useEditableStyles","module","exports","__toCommonJS","import_shared_utils2","require","import_system","import_react_context","EditableStylesProvider","createContext","name","errorMessage","EditableProvider","import_react_use_focus_on_pointer_down","import_react_use_safe_layout_effect","import_react_use_update_effect","import_react_use_controllable_state","import_react_use_merge_refs","import_react_use_callback_ref","import_shared_utils","import_react","contains","parent","child","props","onChange","onChangeProp","onCancel","onCancelProp","onSubmit","onSubmitProp","onBlur","onBlurProp","value","valueProp","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEdit","onEditCallback","finalFocusRef","htmlProps","onEditProp","useCallbackRef","defaultIsEditing","Boolean","isEditing","setIsEditing","useState","setValue","useControllableState","prevValue","setPrevValue","inputRef","useRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","useFocusOnPointerDown","ref","enabled","elements","isInteractive","useSafeLayoutEffect","_a","_b","current","focus","select","useUpdateEffect","_c","_d","useCallback","onUpdatePrevValue","useEffect","inputEl","ownerDocument","activeElement","blur","event","currentTarget","onKeyDown","eventKey","key","keyMap","Escape","Enter","event2","shiftKey","metaKey","action","preventDefault","onKeyDownWithoutSubmit","isValueEmpty","length","doc","relatedTarget","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","props2","tabIndex","mergeRefs","children","hidden","ariaAttr","onFocus","callAllHandlers","getInputProps","disabled","getTextareaProps","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id","import_jsx_runtime","forwardRef","Editable2","styles","useMultiStyleConfig","ownProps","omitThemingProps","context","_className","cx","className","runIfFn","jsx","chakra","div","displayName","import_system2","import_shared_utils3","commonStyles","fontSize","fontWeight","textAlign","bg","import_jsx_runtime2","EditableInput2","inputProps","input","__css","outline","import_system3","import_shared_utils4","import_jsx_runtime3","EditablePreview2","previewProps","span","cursor","display","preview","import_system4","import_shared_utils5","import_jsx_runtime4","EditableTextarea2","textareaProps","textarea"],"sources":["../src/index.ts","../src/editable.tsx","../src/editable-context.ts","../src/use-editable.ts","../src/editable-input.tsx","../src/shared.ts","../src/editable-preview.tsx","../src/editable-textarea.tsx","../src/use-editable-controls.tsx","../src/use-editable-state.tsx"],"sourcesContent":["export { Editable } from \"./editable\"\nexport type { EditableProps } from \"./editable\"\nexport { useEditableStyles } from \"./editable-context\"\nexport { useEditableContext } from \"./editable-context\"\nexport { EditableInput } from \"./editable-input\"\nexport type { EditableInputProps } from \"./editable-input\"\nexport { EditablePreview } from \"./editable-preview\"\nexport type { EditablePreviewProps } from \"./editable-preview\"\nexport { EditableTextarea } from \"./editable-textarea\"\nexport type { EditableTextareaProps } from \"./editable-textarea\"\nexport { useEditable } from \"./use-editable\"\nexport type { UseEditableProps, UseEditableReturn } from \"./use-editable\"\nexport { useEditableControls } from \"./use-editable-controls\"\nexport { useEditableState } from \"./use-editable-state\"\n","import { cx, runIfFn } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { EditableProvider, EditableStylesProvider } from \"./editable-context\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode)\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\" | \"onBlur\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    Omit<BaseEditableProps, \"children\">,\n    ThemingProps<\"Editable\"> {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n *\n * @see Docs https://chakra-ui.com/docs/components/editable\n */\nexport const Editable = forwardRef<EditableProps, \"div\">(function Editable(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <EditableStylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...(htmlProps as HTMLChakraProps<\"div\">)}\n          className={_className}\n        >\n          {children}\n        </chakra.div>\n      </EditableStylesProvider>\n    </EditableProvider>\n  )\n})\n\nEditable.displayName = \"Editable\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\nimport { UseEditableReturn } from \"./use-editable\"\n\nexport const [EditableStylesProvider, useEditableStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `EditableStylesContext`,\n  errorMessage: `useEditableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Editable />\" `,\n})\n\nexport type EditableContext = Omit<UseEditableReturn, \"htmlProps\">\n\nexport const [EditableProvider, useEditableContext] =\n  createContext<EditableContext>({\n    name: \"EditableContext\",\n    errorMessage:\n      \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\",\n  })\n","import { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useEffect, useRef, useState, RefObject } from \"react\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can receive focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * Callback invoked when the user either submits or cancels.\n   * It provides the last confirmed value as argument.\n   */\n  onBlur?: (nextValue: string) => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: RefObject<FocusableElement>\n}\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement) {\n  if (!parent) return false\n  return parent === child || parent.contains(child)\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props\n\n  const onEditProp = useCallbackRef(onEditCallback)\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing && !isDisabled\n\n  useSafeLayoutEffect(() => {\n    if (isEditing) {\n      inputRef.current?.focus()\n      if (selectAllOnFocus) inputRef.current?.select()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      if (finalFocusRef) {\n        finalFocusRef.current?.focus()\n      } else {\n        editButtonRef.current?.focus()\n      }\n      return\n    }\n\n    inputRef.current?.focus()\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value)\n  }, [value])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n    onBlurProp?.(prevValue)\n  }, [onCancelProp, onBlurProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n    onBlurProp?.(prevValue)\n  }, [value, onSubmitProp, onBlurProp, prevValue])\n\n  useEffect(() => {\n    if (isEditing) return\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=559561\n    const inputEl = inputRef.current\n    if (inputEl?.ownerDocument.activeElement === inputEl) {\n      inputEl?.blur()\n    }\n  }, [isEditing])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(event.currentTarget.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const onKeyDownWithoutSubmit = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel],\n  )\n\n  const isValueEmpty = value.length === 0\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      if (!isEditing) return\n      const doc = event.currentTarget.ownerDocument\n      const relatedTarget = (event.relatedTarget ??\n        doc.activeElement) as HTMLElement\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur) {\n        if (submitOnBlur) {\n          onSubmit()\n        } else {\n          onCancel()\n        }\n      }\n    },\n    [submitOnBlur, onSubmit, onCancel, isEditing],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit, onUpdatePrevValue),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDown,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getTextareaProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDownWithoutSubmit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled,\n    }),\n    [onEdit, isDisabled],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n      disabled: isDisabled,\n    }),\n    [onSubmit, isDisabled],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n      disabled: isDisabled,\n    }),\n    [onCancel, isDisabled],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useEditableContext, useEditableStyles } from \"./editable-context\"\nimport { commonStyles } from \"./shared\"\n\nexport interface EditableInputProps extends HTMLChakraProps<\"input\"> {}\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\n\nexport const EditableInput = forwardRef<EditableInputProps, \"input\">(\n  function EditableInput(props, ref) {\n    const { getInputProps } = useEditableContext()\n    const styles = useEditableStyles()\n\n    const inputProps = getInputProps(props, ref)\n    const _className = cx(\"chakra-editable__input\", props.className)\n\n    return (\n      <chakra.input\n        {...inputProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.input,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\nEditableInput.displayName = \"EditableInput\"\n","import { SystemStyleObject } from \"@chakra-ui/system\"\n\nexport const commonStyles: SystemStyleObject = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n}\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useEditableContext, useEditableStyles } from \"./editable-context\"\nimport { commonStyles } from \"./shared\"\n\nexport interface EditablePreviewProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = forwardRef<EditablePreviewProps, \"span\">(\n  function EditablePreview(props, ref) {\n    const { getPreviewProps } = useEditableContext()\n    const styles = useEditableStyles()\n\n    const previewProps = getPreviewProps(props, ref) as HTMLChakraProps<\"span\">\n    const _className = cx(\"chakra-editable__preview\", props.className)\n\n    return (\n      <chakra.span\n        {...previewProps}\n        __css={{\n          cursor: \"text\",\n          display: \"inline-block\",\n          ...commonStyles,\n          ...styles.preview,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\nEditablePreview.displayName = \"EditablePreview\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useEditableContext, useEditableStyles } from \"./editable-context\"\nimport { commonStyles } from \"./shared\"\n\nexport interface EditableTextareaProps extends HTMLChakraProps<\"textarea\"> {}\n\n/**\n * EditableTextarea\n *\n * The textarea used in the `edit` mode\n */\n\nexport const EditableTextarea = forwardRef<EditableTextareaProps, \"textarea\">(\n  function EditableTextarea(props, ref) {\n    const { getTextareaProps } = useEditableContext()\n    const styles = useEditableStyles()\n\n    const textareaProps = getTextareaProps(props, ref)\n    const _className = cx(\"chakra-editable__textarea\", props.className)\n\n    return (\n      <chakra.textarea\n        {...textareaProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.textarea,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\nEditableTextarea.displayName = \"EditableTextarea\"\n","import { useEditableContext } from \"./editable-context\"\n\n/**\n * React hook use to create controls for the editable component\n */\n\nexport function useEditableControls() {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  }\n}\n","import { useEditableContext } from \"./editable-context\"\n\n/**\n * React hook use to gain access to the editable state and actions.\n */\n\nexport function useEditableState() {\n  const { isEditing, onSubmit, onCancel, onEdit, isDisabled } =\n    useEditableContext()\n\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}