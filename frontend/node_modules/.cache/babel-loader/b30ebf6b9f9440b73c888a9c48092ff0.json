{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  AlertDialog: () => AlertDialog,\n  AlertDialogBody: () => ModalBody,\n  AlertDialogCloseButton: () => ModalCloseButton,\n  AlertDialogContent: () => AlertDialogContent,\n  AlertDialogFooter: () => ModalFooter,\n  AlertDialogHeader: () => ModalHeader,\n  AlertDialogOverlay: () => ModalOverlay,\n  Drawer: () => Drawer,\n  DrawerBody: () => ModalBody,\n  DrawerCloseButton: () => ModalCloseButton,\n  DrawerContent: () => DrawerContent,\n  DrawerFooter: () => ModalFooter,\n  DrawerHeader: () => ModalHeader,\n  DrawerOverlay: () => ModalOverlay,\n  Modal: () => Modal,\n  ModalBody: () => ModalBody,\n  ModalCloseButton: () => ModalCloseButton,\n  ModalContent: () => ModalContent,\n  ModalContextProvider: () => ModalContextProvider,\n  ModalFocusScope: () => ModalFocusScope,\n  ModalFooter: () => ModalFooter,\n  ModalHeader: () => ModalHeader,\n  ModalOverlay: () => ModalOverlay,\n  useDrawerContext: () => useDrawerContext,\n  useModal: () => useModal,\n  useModalContext: () => useModalContext,\n  useModalManager: () => useModalManager,\n  useModalStyles: () => useModalStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/alert-dialog.tsx\nvar import_system9 = require(\"@chakra-ui/system\");\n\n// src/modal.tsx\nvar import_portal = require(\"@chakra-ui/portal\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_framer_motion = require(\"framer-motion\");\n\n// src/use-modal.ts\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_aria_hidden = require(\"aria-hidden\");\nvar import_react2 = require(\"react\");\n\n// src/modal-manager.ts\nvar import_react = require(\"react\");\nvar ModalManager = class {\n  constructor() {\n    __publicField(this, \"modals\");\n    this.modals = /* @__PURE__ */new Map();\n  }\n  add(modal) {\n    this.modals.set(modal, this.modals.size + 1);\n    return this.modals.size;\n  }\n  remove(modal) {\n    this.modals.delete(modal);\n  }\n  isTopModal(modal) {\n    if (!modal) return false;\n    return this.modals.get(modal) === this.modals.size;\n  }\n};\nvar modalManager = new ModalManager();\nfunction useModalManager(ref, isOpen) {\n  const [index, setIndex] = (0, import_react.useState)(0);\n  (0, import_react.useEffect)(() => {\n    const node = ref.current;\n    if (!node) return;\n    if (isOpen) {\n      const index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n    return () => {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\n\n// src/use-modal.ts\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = (0, import_react2.useRef)(null);\n  const overlayRef = (0, import_react2.useRef)(null);\n  const [dialogId, headerId, bodyId] = useIds(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);\n  useAriaHidden(dialogRef, isOpen && useInert);\n  const index = useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = (0, import_react2.useRef)(null);\n  const onMouseDown = (0, import_react2.useCallback)(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = (0, import_react2.useCallback)(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = (0, import_react2.useState)(false);\n  const [bodyMounted, setBodyMounted] = (0, import_react2.useState)(false);\n  const getDialogProps = (0, import_react2.useCallback)((props2 = {}, ref = null) => ({\n    role: \"dialog\",\n    ...props2,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, dialogRef),\n    id: dialogId,\n    tabIndex: -1,\n    \"aria-modal\": true,\n    \"aria-labelledby\": headerMounted ? headerId : void 0,\n    \"aria-describedby\": bodyMounted ? bodyId : void 0,\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, event => event.stopPropagation())\n  }), [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = (0, import_react2.useCallback)(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!modalManager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = (0, import_react2.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, overlayRef),\n    onClick: (0, import_shared_utils.callAllHandlers)(props2.onClick, onOverlayClick),\n    onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown),\n    onMouseDown: (0, import_shared_utils.callAllHandlers)(props2.onMouseDown, onMouseDown)\n  }), [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  (0, import_react2.useEffect)(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return (0, import_aria_hidden.hideOthers)(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp, ...prefixes) {\n  const reactId = (0, import_react2.useId)();\n  const id = idProp || reactId;\n  return (0, import_react2.useMemo)(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\n// src/modal.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [ModalStylesProvider, useModalStyles] = (0, import_react_context.createContext)({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `\n});\nvar [ModalContextProvider, useModalContext] = (0, import_react_context.createContext)({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage: \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\"\n});\nvar Modal = props => {\n  const modalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    motionPreset: \"scale\",\n    lockFocusAcrossFrames: true,\n    ...props\n  };\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    onCloseComplete\n  } = modalProps;\n  const styles = (0, import_system.useMultiStyleConfig)(\"Modal\", modalProps);\n  const modal = useModal(modalProps);\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ModalContextProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(ModalStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, {\n        onExitComplete: onCloseComplete,\n        children: context.isOpen && /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_portal.Portal, {\n          ...portalProps,\n          children\n        })\n      })\n    })\n  });\n};\nModal.displayName = \"Modal\";\n\n// src/modal-content.tsx\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_system3 = require(\"@chakra-ui/system\");\n\n// src/modal-focus.tsx\nvar import_focus_lock = require(\"@chakra-ui/focus-lock\");\nvar import_framer_motion2 = require(\"framer-motion\");\nvar import_react3 = require(\"react\");\nvar import_react_remove_scroll = require(\"react-remove-scroll\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nfunction ModalFocusScope(props) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen\n  } = useModalContext();\n  const [isPresent, safeToRemove] = (0, import_framer_motion2.usePresence)();\n  (0, import_react3.useEffect)(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  const index = useModalManager(dialogRef, isOpen);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_focus_lock.FocusLock, {\n    autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_react_remove_scroll.RemoveScroll, {\n      removeScrollBar: !preserveScrollBarGap,\n      allowPinchZoom,\n      enabled: index === 1 && blockScrollOnMount,\n      forwardProps: true,\n      children: props.children\n    })\n  });\n}\n\n// src/modal-transition.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_transition = require(\"@chakra-ui/transition\");\nvar import_framer_motion3 = require(\"framer-motion\");\nvar import_react4 = require(\"react\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar transitions = {\n  slideInBottom: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetY: 16,\n      reverse: true\n    }\n  },\n  slideInRight: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetX: 16,\n      reverse: true\n    }\n  },\n  slideInTop: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetY: -16,\n      reverse: true\n    }\n  },\n  slideInLeft: {\n    ...import_transition.slideFadeConfig,\n    custom: {\n      offsetX: -16,\n      reverse: true\n    }\n  },\n  scale: {\n    ...import_transition.scaleFadeConfig,\n    custom: {\n      initialScale: 0.95,\n      reverse: true\n    }\n  },\n  none: {}\n};\nvar MotionSection = (0, import_system2.chakra)(import_framer_motion3.motion.section);\nvar getMotionProps = preset => {\n  return transitions[preset || \"none\"];\n};\nvar ModalTransition = (0, import_react4.forwardRef)((props, ref) => {\n  const {\n    preset,\n    motionProps = getMotionProps(preset),\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(MotionSection, {\n    ref,\n    ...motionProps,\n    ...rest\n  });\n});\nModalTransition.displayName = \"ModalTransition\";\n\n// src/modal-content.tsx\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar ModalContent = (0, import_system3.forwardRef)((props, ref) => {\n  const {\n    className,\n    children,\n    containerProps: rootProps,\n    motionProps,\n    ...rest\n  } = props;\n  const {\n    getDialogProps,\n    getDialogContainerProps\n  } = useModalContext();\n  const dialogProps = getDialogProps(rest, ref);\n  const containerProps = getDialogContainerProps(rootProps);\n  const _className = (0, import_shared_utils2.cx)(\"chakra-modal__content\", className);\n  const styles = useModalStyles();\n  const dialogStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.dialog\n  };\n  const dialogContainerStyles = {\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"$100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    ...styles.dialogContainer\n  };\n  const {\n    motionPreset\n  } = useModalContext();\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(ModalFocusScope, {\n    children: /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system3.chakra.div, {\n      ...containerProps,\n      className: \"chakra-modal__content-container\",\n      tabIndex: -1,\n      __css: dialogContainerStyles,\n      children: /* @__PURE__ */(0, import_jsx_runtime4.jsx)(ModalTransition, {\n        preset: motionPreset,\n        motionProps,\n        className: _className,\n        ...dialogProps,\n        __css: dialogStyles,\n        children\n      })\n    })\n  });\n});\nModalContent.displayName = \"ModalContent\";\n\n// src/modal-body.tsx\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_react5 = require(\"react\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar ModalBody = (0, import_system4.forwardRef)((props, ref) => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const {\n    bodyId,\n    setBodyMounted\n  } = useModalContext();\n  (0, import_react5.useEffect)(() => {\n    setBodyMounted(true);\n    return () => setBodyMounted(false);\n  }, [setBodyMounted]);\n  const _className = (0, import_shared_utils3.cx)(\"chakra-modal__body\", className);\n  const styles = useModalStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system4.chakra.div, {\n    ref,\n    className: _className,\n    id: bodyId,\n    ...rest,\n    __css: styles.body\n  });\n});\nModalBody.displayName = \"ModalBody\";\n\n// src/modal-close-button.tsx\nvar import_close_button = require(\"@chakra-ui/close-button\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar ModalCloseButton = (0, import_system5.forwardRef)((props, ref) => {\n  const {\n    onClick,\n    className,\n    ...rest\n  } = props;\n  const {\n    onClose\n  } = useModalContext();\n  const _className = (0, import_shared_utils4.cx)(\"chakra-modal__close-btn\", className);\n  const styles = useModalStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_close_button.CloseButton, {\n    ref,\n    __css: styles.closeButton,\n    className: _className,\n    onClick: (0, import_shared_utils4.callAllHandlers)(onClick, event => {\n      event.stopPropagation();\n      onClose();\n    }),\n    ...rest\n  });\n});\nModalCloseButton.displayName = \"ModalCloseButton\";\n\n// src/modal-footer.tsx\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_system6 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime7 = require(\"react/jsx-runtime\");\nvar ModalFooter = (0, import_system6.forwardRef)((props, ref) => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils5.cx)(\"chakra-modal__footer\", className);\n  const styles = useModalStyles();\n  const footerStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    ...styles.footer\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime7.jsx)(import_system6.chakra.footer, {\n    ref,\n    ...rest,\n    __css: footerStyles,\n    className: _className\n  });\n});\nModalFooter.displayName = \"ModalFooter\";\n\n// src/modal-header.tsx\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_system7 = require(\"@chakra-ui/system\");\nvar import_react6 = require(\"react\");\nvar import_jsx_runtime8 = require(\"react/jsx-runtime\");\nvar ModalHeader = (0, import_system7.forwardRef)((props, ref) => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const {\n    headerId,\n    setHeaderMounted\n  } = useModalContext();\n  (0, import_react6.useEffect)(() => {\n    setHeaderMounted(true);\n    return () => setHeaderMounted(false);\n  }, [setHeaderMounted]);\n  const _className = (0, import_shared_utils6.cx)(\"chakra-modal__header\", className);\n  const styles = useModalStyles();\n  const headerStyles = {\n    flex: 0,\n    ...styles.header\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime8.jsx)(import_system7.chakra.header, {\n    ref,\n    className: _className,\n    id: headerId,\n    ...rest,\n    __css: headerStyles\n  });\n});\nModalHeader.displayName = \"ModalHeader\";\n\n// src/modal-overlay.tsx\nvar import_shared_utils7 = require(\"@chakra-ui/shared-utils\");\nvar import_system8 = require(\"@chakra-ui/system\");\nvar import_transition2 = require(\"@chakra-ui/transition\");\nvar import_framer_motion4 = require(\"framer-motion\");\nvar import_jsx_runtime9 = require(\"react/jsx-runtime\");\nvar MotionDiv = (0, import_system8.chakra)(import_framer_motion4.motion.div);\nvar ModalOverlay = (0, import_system8.forwardRef)((props, ref) => {\n  const {\n    className,\n    transition,\n    motionProps: _motionProps,\n    ...rest\n  } = props;\n  const _className = (0, import_shared_utils7.cx)(\"chakra-modal__overlay\", className);\n  const styles = useModalStyles();\n  const overlayStyle = {\n    pos: \"fixed\",\n    left: \"0\",\n    top: \"0\",\n    w: \"100vw\",\n    h: \"100vh\",\n    ...styles.overlay\n  };\n  const {\n    motionPreset\n  } = useModalContext();\n  const defaultMotionProps = motionPreset === \"none\" ? {} : import_transition2.fadeConfig;\n  const motionProps = _motionProps || defaultMotionProps;\n  return /* @__PURE__ */(0, import_jsx_runtime9.jsx)(MotionDiv, {\n    ...motionProps,\n    __css: overlayStyle,\n    ref,\n    className: _className,\n    ...rest\n  });\n});\nModalOverlay.displayName = \"ModalOverlay\";\n\n// src/alert-dialog.tsx\nvar import_jsx_runtime10 = require(\"react/jsx-runtime\");\nfunction AlertDialog(props) {\n  const {\n    leastDestructiveRef,\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime10.jsx)(Modal, {\n    ...rest,\n    initialFocusRef: leastDestructiveRef\n  });\n}\nvar AlertDialogContent = (0, import_system9.forwardRef)((props, ref) => /* @__PURE__ */(0, import_jsx_runtime10.jsx)(ModalContent, {\n  ref,\n  role: \"alertdialog\",\n  ...props\n}));\n\n// src/drawer.tsx\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_system10 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime11 = require(\"react/jsx-runtime\");\nvar [DrawerContextProvider, useDrawerContext] = (0, import_react_context2.createContext)();\nvar placementMap = {\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\nfunction getDrawerPlacement(placement, dir) {\n  var _a, _b;\n  if (!placement) return;\n  return (_b = (_a = placementMap[placement]) == null ? void 0 : _a[dir]) != null ? _b : placement;\n}\nfunction Drawer(props) {\n  var _a;\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props;\n  const theme = (0, import_system10.useTheme)();\n  const drawerStyleConfig = (_a = theme.components) == null ? void 0 : _a.Drawer;\n  const placement = getDrawerPlacement(placementProp, theme.direction);\n  return /* @__PURE__ */(0, import_jsx_runtime11.jsx)(DrawerContextProvider, {\n    value: {\n      placement\n    },\n    children: /* @__PURE__ */(0, import_jsx_runtime11.jsx)(Modal, {\n      isOpen,\n      onClose,\n      styleConfig: drawerStyleConfig,\n      ...rest,\n      children\n    })\n  });\n}\n\n// src/drawer-content.tsx\nvar import_shared_utils8 = require(\"@chakra-ui/shared-utils\");\nvar import_system11 = require(\"@chakra-ui/system\");\nvar import_transition3 = require(\"@chakra-ui/transition\");\nvar import_jsx_runtime12 = require(\"react/jsx-runtime\");\nvar MotionDiv2 = (0, import_system11.chakra)(import_transition3.Slide);\nvar DrawerContent = (0, import_system11.forwardRef)((props, ref) => {\n  const {\n    className,\n    children,\n    motionProps,\n    containerProps: rootProps,\n    ...rest\n  } = props;\n  const {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  const dialogProps = getDialogProps(rest, ref);\n  const containerProps = getDialogContainerProps(rootProps);\n  const _className = (0, import_shared_utils8.cx)(\"chakra-modal__content\", className);\n  const styles = useModalStyles();\n  const dialogStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0,\n    ...styles.dialog\n  };\n  const dialogContainerStyles = {\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"$100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    ...styles.dialogContainer\n  };\n  const {\n    placement\n  } = useDrawerContext();\n  return /* @__PURE__ */(0, import_jsx_runtime12.jsx)(ModalFocusScope, {\n    children: /* @__PURE__ */(0, import_jsx_runtime12.jsx)(import_system11.chakra.div, {\n      ...containerProps,\n      className: \"chakra-modal__content-container\",\n      __css: dialogContainerStyles,\n      children: /* @__PURE__ */(0, import_jsx_runtime12.jsx)(MotionDiv2, {\n        motionProps,\n        direction: placement,\n        in: isOpen,\n        className: _className,\n        ...dialogProps,\n        __css: dialogStyles,\n        children\n      })\n    })\n  });\n});\nDrawerContent.displayName = \"DrawerContent\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogCloseButton,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalContextProvider,\n  ModalFocusScope,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDrawerContext,\n  useModal,\n  useModalContext,\n  useModalManager,\n  useModalStyles\n});","map":{"version":3,"names":["src_exports","__export","AlertDialog","AlertDialogBody","ModalBody","AlertDialogCloseButton","ModalCloseButton","AlertDialogContent","AlertDialogFooter","ModalFooter","AlertDialogHeader","ModalHeader","AlertDialogOverlay","ModalOverlay","Drawer","DrawerBody","DrawerCloseButton","DrawerContent","DrawerFooter","DrawerHeader","DrawerOverlay","Modal","ModalContent","ModalContextProvider","ModalFocusScope","useDrawerContext","useModal","useModalContext","useModalManager","useModalStyles","module","exports","__toCommonJS","import_system9","require","import_portal","import_react_context","import_system","import_framer_motion","import_shared_utils","import_react_use_merge_refs","import_aria_hidden","import_react2","import_react","ModalManager","constructor","__publicField","modals","Map","add","modal","set","size","remove","delete","isTopModal","get","modalManager","ref","isOpen","index","setIndex","useState","useEffect","node","current","index2","props","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","dialogRef","useRef","overlayRef","dialogId","headerId","bodyId","useIds","useAriaHidden","mouseDownTarget","onMouseDown","useCallback","event","target","onKeyDown","key","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","props2","role","mergeRefs","tabIndex","onClick","callAllHandlers","getDialogContainerProps","shouldHide","currentElement","hideOthers","idProp","prefixes","reactId","useId","useMemo","map","prefix","import_jsx_runtime","ModalStylesProvider","createContext","name","errorMessage","strict","modalProps","scrollBehavior","autoFocus","trapFocus","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","motionPreset","lockFocusAcrossFrames","portalProps","children","initialFocusRef","finalFocusRef","preserveScrollBarGap","onCloseComplete","styles","useMultiStyleConfig","context","jsx","value","AnimatePresence","onExitComplete","Portal","displayName","import_shared_utils2","import_system3","import_focus_lock","import_framer_motion2","import_react3","import_react_remove_scroll","import_jsx_runtime2","isPresent","safeToRemove","usePresence","setTimeout","FocusLock","isDisabled","restoreFocus","contentRef","RemoveScroll","removeScrollBar","enabled","forwardProps","import_system2","import_transition","import_framer_motion3","import_react4","import_jsx_runtime3","transitions","slideInBottom","slideFadeConfig","custom","offsetY","reverse","slideInRight","offsetX","slideInTop","slideInLeft","scale","scaleFadeConfig","initialScale","none","MotionSection","chakra","motion","section","getMotionProps","preset","ModalTransition","forwardRef","motionProps","rest","import_jsx_runtime4","className","containerProps","rootProps","dialogProps","_className","cx","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","div","__css","import_shared_utils3","import_system4","import_react5","import_jsx_runtime5","body","import_close_button","import_shared_utils4","import_system5","import_jsx_runtime6","CloseButton","closeButton","import_shared_utils5","import_system6","import_jsx_runtime7","footerStyles","alignItems","justifyContent","footer","import_shared_utils6","import_system7","import_react6","import_jsx_runtime8","headerStyles","flex","header","import_shared_utils7","import_system8","import_transition2","import_framer_motion4","import_jsx_runtime9","MotionDiv","transition","_motionProps","overlayStyle","pos","w","h","overlay","defaultMotionProps","fadeConfig","import_jsx_runtime10","leastDestructiveRef","import_react_context2","import_system10","import_jsx_runtime11","DrawerContextProvider","placementMap","start","ltr","rtl","end","getDrawerPlacement","placement","dir","_a","_b","placementProp","theme","useTheme","drawerStyleConfig","components","direction","styleConfig","import_shared_utils8","import_system11","import_transition3","import_jsx_runtime12","MotionDiv2","Slide","in"],"sources":["../src/index.ts","../src/alert-dialog.tsx","../src/modal.tsx","../src/use-modal.ts","../src/modal-manager.ts","../src/modal-content.tsx","../src/modal-focus.tsx","../src/modal-transition.tsx","../src/modal-body.tsx","../src/modal-close-button.tsx","../src/modal-footer.tsx","../src/modal-header.tsx","../src/modal-overlay.tsx","../src/drawer.tsx","../src/drawer-content.tsx"],"sourcesContent":["export {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogCloseButton,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n} from \"./alert-dialog\"\nexport type { AlertDialogProps } from \"./alert-dialog\"\nexport {\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  useDrawerContext,\n} from \"./drawer\"\nexport type { DrawerProps } from \"./drawer\"\nexport { DrawerContent } from \"./drawer-content\"\nexport type { DrawerContentProps } from \"./drawer-content\"\nexport {\n  Modal,\n  ModalContextProvider,\n  useModalContext,\n  useModalStyles,\n} from \"./modal\"\nexport type { ModalProps } from \"./modal\"\nexport { ModalBody } from \"./modal-body\"\nexport type { ModalBodyProps } from \"./modal-body\"\nexport { ModalCloseButton } from \"./modal-close-button\"\nexport type { ModalCloseButtonProps } from \"./modal-close-button\"\nexport { ModalContent } from \"./modal-content\"\nexport type { ModalContentProps } from \"./modal-content\"\nexport { ModalFocusScope } from \"./modal-focus\"\nexport { ModalFooter } from \"./modal-footer\"\nexport type { ModalFooterProps } from \"./modal-footer\"\nexport { ModalHeader } from \"./modal-header\"\nexport type { ModalHeaderProps } from \"./modal-header\"\nexport { ModalOverlay } from \"./modal-overlay\"\nexport type { ModalOverlayProps } from \"./modal-overlay\"\nexport { useModal } from \"./use-modal\"\nexport type { UseModalProps, UseModalReturn } from \"./use-modal\"\nexport { useModalManager } from \"./modal-manager\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { ModalProps, Modal } from \"./modal\"\nimport { ModalContentProps, ModalContent } from \"./modal-content\"\n\nexport interface AlertDialogProps extends Omit<ModalProps, \"initialFocusRef\"> {\n  leastDestructiveRef: NonNullable<ModalProps[\"initialFocusRef\"]>\n}\n\n/**\n * `AlertDialog` component is used interrupt the user with a mandatory confirmation or action.\n *\n * @see Docs https://chakra-ui.com/docs/components/alert-dialog\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/alertdialog/\n */\nexport function AlertDialog(props: AlertDialogProps) {\n  const { leastDestructiveRef, ...rest } = props\n  return <Modal {...rest} initialFocusRef={leastDestructiveRef} />\n}\n\nexport const AlertDialogContent = forwardRef<ModalContentProps, \"section\">(\n  (props, ref) => <ModalContent ref={ref} role=\"alertdialog\" {...props} />,\n)\n\nexport { ModalBody as AlertDialogBody } from \"./modal-body\"\nexport { ModalCloseButton as AlertDialogCloseButton } from \"./modal-close-button\"\nexport { ModalFooter as AlertDialogFooter } from \"./modal-footer\"\nexport { ModalHeader as AlertDialogHeader } from \"./modal-header\"\nexport { ModalOverlay as AlertDialogOverlay } from \"./modal-overlay\"\n","import { FocusLockProps } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { AnimatePresence } from \"framer-motion\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nconst [ModalStylesProvider, useModalStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ModalStylesContext`,\n  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Modal />\" `,\n})\n\nexport { ModalContextProvider, useModalContext, useModalStyles }\n\ninterface ModalOptions extends Pick<FocusLockProps, \"lockFocusAcrossFrames\"> {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * 🚨Warning: We don't recommend doing this because it hurts the\n   * accessibility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interactive\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   * @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * @default false.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   *\n   * @default true\n   */\n  preserveScrollBarGap?: boolean\n}\n\ntype ScrollBehavior = \"inside\" | \"outside\"\n\ntype MotionPreset =\n  | \"slideInBottom\"\n  | \"slideInRight\"\n  | \"slideInTop\"\n  | \"slideInLeft\"\n  | \"scale\"\n  | \"none\"\n\nexport interface ModalProps\n  extends UseModalProps,\n    ModalOptions,\n    ThemingProps<\"Modal\"> {\n  children: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behavior should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: ScrollBehavior\n  /**\n   * Props to be forwarded to the portal component\n   */\n  portalProps?: Pick<PortalProps, \"appendToParentPortal\" | \"containerRef\">\n  /**\n   * The transition that should be used for the modal\n   * @default \"scale\"\n   */\n  motionPreset?: MotionPreset\n  /**\n   * Fires when all exiting nodes have completed animating out\n   */\n  onCloseComplete?: () => void\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n *\n * @see Docs https://chakra-ui.com/docs/components/modal\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/dialogmodal/\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const modalProps: ModalProps = {\n    scrollBehavior: \"outside\",\n    autoFocus: true,\n    trapFocus: true,\n    returnFocusOnClose: true,\n    blockScrollOnMount: true,\n    allowPinchZoom: false,\n    motionPreset: \"scale\",\n    lockFocusAcrossFrames: true,\n    ...props,\n  }\n\n  const {\n    portalProps,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n    onCloseComplete,\n  } = modalProps\n\n  const styles = useMultiStyleConfig(\"Modal\", modalProps)\n  const modal = useModal(modalProps)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n    lockFocusAcrossFrames,\n  }\n\n  return (\n    <ModalContextProvider value={context}>\n      <ModalStylesProvider value={styles}>\n        <AnimatePresence onExitComplete={onCloseComplete}>\n          {context.isOpen && <Portal {...portalProps}>{children}</Portal>}\n        </AnimatePresence>\n      </ModalStylesProvider>\n    </ModalContextProvider>\n  )\n}\n\nModal.displayName = \"Modal\"\n","import { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { hideOthers } from \"aria-hidden\"\n\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { modalManager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   * @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook used to manage multiple or nested modals\n   */\n  const index = useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: React.MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: React.MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!modalManager.isTopModal(dialogRef.current)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: React.RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  // save current ref in a local var to trigger the effect on identity change\n  const currentElement = ref.current\n\n  useEffect(() => {\n    // keep using `ref.current` inside the effect\n    // it may have changed during render and the execution of the effect\n    if (!ref.current || !shouldHide) return undefined\n\n    return hideOthers(ref.current)\n  }, [shouldHide, ref, currentElement])\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n","import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  chakra,\n  SystemStyleObject,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { HTMLMotionProps } from \"framer-motion\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\nimport { ModalFocusScope } from \"./modal-focus\"\nimport { ModalTransition } from \"./modal-transition\"\n\nexport interface ModalContentProps extends HTMLChakraProps<\"section\"> {\n  /**\n   * The props to forward to the modal's content wrapper\n   */\n  containerProps?: HTMLChakraProps<\"div\">\n  /**\n   * The custom framer-motion transition to use for the modal\n   */\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      containerProps: rootProps,\n      motionProps,\n      ...rest\n    } = props\n\n    const { getDialogProps, getDialogContainerProps } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps(rootProps)\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useModalStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"$100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { motionPreset } = useModalContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          tabIndex={-1}\n          __css={dialogContainerStyles}\n        >\n          <ModalTransition\n            preset={motionPreset}\n            motionProps={motionProps}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </ModalTransition>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nModalContent.displayName = \"ModalContent\"\n","import { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { usePresence } from \"framer-motion\"\nimport { useEffect } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\n\nimport { useModalContext } from \"./modal\"\nimport { useModalManager } from \"./modal-manager\"\n\ninterface ModalFocusScopeProps {\n  /**\n   * @type React.ReactElement\n   */\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent, safeToRemove])\n\n  const index = useModalManager(dialogRef, isOpen)\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n      lockFocusAcrossFrames={lockFocusAcrossFrames}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        // only block scroll for first dialog\n        enabled={index === 1 && blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n","import { chakra, ChakraProps } from \"@chakra-ui/system\"\nimport { scaleFadeConfig, slideFadeConfig } from \"@chakra-ui/transition\"\nimport { HTMLMotionProps, motion } from \"framer-motion\"\nimport { forwardRef } from \"react\"\n\nexport interface ModalTransitionProps\n  extends Omit<HTMLMotionProps<\"section\">, \"color\" | \"transition\">,\n    ChakraProps {\n  preset?:\n    | \"slideInBottom\"\n    | \"slideInRight\"\n    | \"slideInTop\"\n    | \"slideInLeft\"\n    | \"scale\"\n    | \"none\"\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\nconst transitions = {\n  slideInBottom: {\n    ...slideFadeConfig,\n    custom: { offsetY: 16, reverse: true },\n  },\n  slideInRight: {\n    ...slideFadeConfig,\n    custom: { offsetX: 16, reverse: true },\n  },\n  slideInTop: {\n    ...slideFadeConfig,\n    custom: { offsetY: -16, reverse: true },\n  },\n  slideInLeft: {\n    ...slideFadeConfig,\n    custom: { offsetX: -16, reverse: true },\n  },\n  scale: {\n    ...scaleFadeConfig,\n    custom: { initialScale: 0.95, reverse: true },\n  },\n  none: {},\n}\n\nconst MotionSection = chakra(motion.section)\n\nconst getMotionProps = (preset: ModalTransitionProps[\"preset\"]) => {\n  return transitions[preset || \"none\"]\n}\n\nexport const ModalTransition = forwardRef(\n  (props: ModalTransitionProps, ref: React.Ref<any>) => {\n    const { preset, motionProps = getMotionProps(preset), ...rest } = props\n    return (\n      <MotionSection ref={ref} {...(motionProps as ChakraProps)} {...rest} />\n    )\n  },\n)\n\nModalTransition.displayName = \"ModalTransition\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useEffect } from \"react\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\n\nexport interface ModalBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">((props, ref) => {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used,\n   * so we can append `aria-describedby` automatically\n   */\n  useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useModalStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nModalBody.displayName = \"ModalBody\"\n","import { CloseButtonProps, CloseButton } from \"@chakra-ui/close-button\"\nimport { cx, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { forwardRef } from \"@chakra-ui/system\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\n\nexport type ModalCloseButtonProps = CloseButtonProps\n\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it reads the\n * `onClose` action from the modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    const styles = useModalStyles()\n\n    return (\n      <CloseButton\n        ref={ref}\n        __css={styles.closeButton}\n        className={_className}\n        onClick={callAllHandlers(onClick, (event: React.MouseEvent) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nModalCloseButton.displayName = \"ModalCloseButton\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\n\nimport { useModalStyles } from \"./modal\"\n\nexport interface ModalFooterProps extends HTMLChakraProps<\"footer\"> {}\n\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n\n    const styles = useModalStyles()\n    const footerStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      ...styles.footer,\n    }\n\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={footerStyles}\n        className={_className}\n      />\n    )\n  },\n)\n\nModalFooter.displayName = \"ModalFooter\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { useEffect } from \"react\"\n\nimport { useModalContext, useModalStyles } from \"./modal\"\n\nexport interface ModalHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  (props, ref) => {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used,\n     * so we can append `aria-labelledby` automatically\n     */\n    useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n\n    const styles = useModalStyles()\n    const headerStyles: SystemStyleObject = {\n      flex: 0,\n      ...styles.header,\n    }\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={headerStyles}\n      />\n    )\n  },\n)\n\nModalHeader.displayName = \"ModalHeader\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  ChakraProps,\n  SystemStyleObject,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { fadeConfig } from \"@chakra-ui/transition\"\nimport { motion, HTMLMotionProps } from \"framer-motion\"\n\nimport { useModalStyles, useModalContext } from \"./modal\"\n\nconst MotionDiv = chakra(motion.div)\n\nexport interface ModalOverlayProps\n  extends Omit<HTMLMotionProps<\"div\">, \"color\" | \"transition\">,\n    ChakraProps {\n  children?: React.ReactNode\n  motionProps?: HTMLMotionProps<\"div\">\n}\n\n/**\n * ModalOverlay renders a backdrop behind the modal. It is\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  (props, ref) => {\n    const { className, transition, motionProps: _motionProps, ...rest } = props\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useModalStyles()\n    const overlayStyle: SystemStyleObject = {\n      pos: \"fixed\",\n      left: \"0\",\n      top: \"0\",\n      w: \"100vw\",\n      h: \"100vh\",\n      ...styles.overlay,\n    }\n\n    const { motionPreset } = useModalContext()\n    const defaultMotionProps: HTMLMotionProps<\"div\"> =\n      motionPreset === \"none\" ? {} : fadeConfig\n\n    const motionProps: any = _motionProps || defaultMotionProps\n\n    return (\n      <MotionDiv\n        {...motionProps}\n        __css={overlayStyle}\n        ref={ref}\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\nModalOverlay.displayName = \"ModalOverlay\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps, useTheme } from \"@chakra-ui/system\"\nimport { SlideOptions } from \"@chakra-ui/transition\"\nimport { Modal, ModalProps } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(\n  placement: DrawerPlacement | undefined,\n  dir: \"ltr\" | \"rtl\",\n) {\n  if (!placement) return\n  //@ts-expect-error\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   * @default \"right\"\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    ThemingProps<\"Drawer\">,\n    Omit<\n      ModalProps,\n      \"scrollBehavior\" | \"motionPreset\" | \"isCentered\" | keyof ThemingProps\n    > {}\n\n/**\n * The Drawer component is a panel that slides out from the edge of the screen.\n * It can be useful when you need users to complete a task or view some details without leaving the current page.\n *\n * @see Docs https://chakra-ui.com/docs/components/drawer\n */\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nexport { ModalBody as DrawerBody } from \"./modal-body\"\nexport { ModalCloseButton as DrawerCloseButton } from \"./modal-close-button\"\nexport { ModalFooter as DrawerFooter } from \"./modal-footer\"\nexport { ModalHeader as DrawerHeader } from \"./modal-header\"\nexport { ModalOverlay as DrawerOverlay } from \"./modal-overlay\"\n\nexport { useDrawerContext }\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { Slide } from \"@chakra-ui/transition\"\nimport type { HTMLMotionProps } from \"framer-motion\"\n\nimport { useDrawerContext } from \"./drawer\"\nimport { useModalContext, useModalStyles } from \"./modal\"\nimport { ModalFocusScope } from \"./modal-focus\"\n\nconst MotionDiv = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {\n  /**\n   * The props to forward to the modal's content wrapper\n   */\n  containerProps?: HTMLChakraProps<\"div\">\n  /**\n   * The custom framer-motion transition to use for the modal\n   */\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      motionProps,\n      containerProps: rootProps,\n      ...rest\n    } = props\n\n    const { getDialogProps, getDialogContainerProps, isOpen } =\n      useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps(rootProps)\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useModalStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"$100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          __css={dialogContainerStyles}\n        >\n          <MotionDiv\n            motionProps={motionProps}\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </MotionDiv>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nDrawerContent.displayName = \"DrawerContent\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}