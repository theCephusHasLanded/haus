{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  FormControl: () => FormControl,\n  FormErrorIcon: () => FormErrorIcon,\n  FormErrorMessage: () => FormErrorMessage,\n  FormHelperText: () => FormHelperText,\n  FormLabel: () => FormLabel,\n  RequiredIndicator: () => RequiredIndicator,\n  useFormControl: () => useFormControl,\n  useFormControlContext: () => useFormControlContext,\n  useFormControlProps: () => useFormControlProps,\n  useFormControlStyles: () => useFormControlStyles,\n  useFormErrorStyles: () => useFormErrorStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/form-control.tsx\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react = require(\"react\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar [FormControlStylesProvider, useFormControlStyles] = (0, import_react_context.createContext)({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `\n});\nvar [FormControlProvider, useFormControlContext] = (0, import_react_context.createContext)({\n  strict: false,\n  name: \"FormControlContext\"\n});\nfunction useFormControlProvider(props) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n  const uuid = (0, import_react.useId)();\n  const id = idProp || `field-${uuid}`;\n  const labelId = `${id}-label`;\n  const feedbackId = `${id}-feedback`;\n  const helpTextId = `${id}-helptext`;\n  const [hasFeedbackText, setHasFeedbackText] = (0, import_react.useState)(false);\n  const [hasHelpText, setHasHelpText] = (0, import_react.useState)(false);\n  const [isFocused, setFocus] = (0, import_react.useState)(false);\n  const getHelpTextProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    id: helpTextId,\n    ...props2,\n    /**\n     * Notify the field context when the help text is rendered on screen,\n     * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n     */\n    ref: (0, import_react_use_merge_refs.mergeRefs)(forwardedRef, node => {\n      if (!node) return;\n      setHasHelpText(true);\n    })\n  }), [helpTextId]);\n  const getLabelProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: forwardedRef,\n    \"data-focus\": (0, import_shared_utils.dataAttr)(isFocused),\n    \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n    \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid),\n    \"data-readonly\": (0, import_shared_utils.dataAttr)(isReadOnly),\n    id: props2.id !== void 0 ? props2.id : labelId,\n    htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id\n  }), [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);\n  const getErrorMessageProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    id: feedbackId,\n    ...props2,\n    /**\n     * Notify the field context when the error message is rendered on screen,\n     * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n     */\n    ref: (0, import_react_use_merge_refs.mergeRefs)(forwardedRef, node => {\n      if (!node) return;\n      setHasFeedbackText(true);\n    }),\n    \"aria-live\": \"polite\"\n  }), [feedbackId]);\n  const getRootProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ...htmlProps,\n    ref: forwardedRef,\n    role: \"group\",\n    \"data-focus\": (0, import_shared_utils.dataAttr)(isFocused),\n    \"data-disabled\": (0, import_shared_utils.dataAttr)(isDisabled),\n    \"data-invalid\": (0, import_shared_utils.dataAttr)(isInvalid),\n    \"data-readonly\": (0, import_shared_utils.dataAttr)(isReadOnly)\n  }), [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly]);\n  const getRequiredIndicatorProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => ({\n    ...props2,\n    ref: forwardedRef,\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    children: props2.children || \"*\"\n  }), []);\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps\n  };\n}\nvar FormControl = (0, import_system.forwardRef)(function FormControl2(props, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Form\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const {\n    getRootProps,\n    htmlProps: _,\n    ...context\n  } = useFormControlProvider(ownProps);\n  const className = (0, import_shared_utils.cx)(\"chakra-form-control\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormControlProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(FormControlStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n        ...getRootProps({}, ref),\n        className,\n        __css: styles[\"container\"]\n      })\n    })\n  });\n});\nFormControl.displayName = \"FormControl\";\nvar FormHelperText = (0, import_system.forwardRef)(function FormHelperText2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  const className = (0, import_shared_utils.cx)(\"chakra-form__helper-text\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n    ...(field == null ? void 0 : field.getHelpTextProps(props, ref)),\n    __css: styles.helperText,\n    className\n  });\n});\nFormHelperText.displayName = \"FormHelperText\";\n\n// src/use-form-control.ts\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nfunction useFormControl(props) {\n  const {\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isRequired,\n    ...rest\n  } = useFormControlProps(props);\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": (0, import_shared_utils2.ariaAttr)(isInvalid),\n    \"aria-required\": (0, import_shared_utils2.ariaAttr)(isRequired),\n    \"aria-readonly\": (0, import_shared_utils2.ariaAttr)(isReadOnly)\n  };\n}\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n  const field = useFormControlContext();\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props;\n  const labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: (0, import_shared_utils2.callAllHandlers)(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: (0, import_shared_utils2.callAllHandlers)(field == null ? void 0 : field.onBlur, onBlur)\n  };\n}\n\n// src/form-error.tsx\nvar import_icon = require(\"@chakra-ui/icon\");\nvar import_react_context2 = require(\"@chakra-ui/react-context\");\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar [FormErrorStylesProvider, useFormErrorStyles] = (0, import_react_context2.createContext)({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `\n});\nvar FormErrorMessage = (0, import_system2.forwardRef)((props, ref) => {\n  const styles = (0, import_system2.useMultiStyleConfig)(\"FormError\", props);\n  const ownProps = (0, import_system2.omitThemingProps)(props);\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(FormErrorStylesProvider, {\n    value: styles,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n      ...(field == null ? void 0 : field.getErrorMessageProps(ownProps, ref)),\n      className: (0, import_shared_utils3.cx)(\"chakra-form__error-message\", props.className),\n      __css: {\n        display: \"flex\",\n        alignItems: \"center\",\n        ...styles.text\n      }\n    })\n  });\n});\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = (0, import_system2.forwardRef)((props, ref) => {\n  const styles = useFormErrorStyles();\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid)) return null;\n  const _className = (0, import_shared_utils3.cx)(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_icon.Icon, {\n    ref,\n    \"aria-hidden\": true,\n    ...props,\n    __css: styles.icon,\n    className: _className,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"path\", {\n      fill: \"currentColor\",\n      d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n    })\n  });\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\n\n// src/form-label.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar FormLabel = (0, import_system3.forwardRef)(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = (0, import_system3.useStyleConfig)(\"FormLabel\", passedProps);\n  const props = (0, import_system3.omitThemingProps)(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */(0, import_jsx_runtime3.jsx)(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsxs)(import_system3.chakra.label, {\n    ...ownProps,\n    className: (0, import_shared_utils4.cx)(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = (0, import_system3.forwardRef)(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  const className = (0, import_shared_utils4.cx)(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.span, {\n    ...(field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  FormControl,\n  FormErrorIcon,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  RequiredIndicator,\n  useFormControl,\n  useFormControlContext,\n  useFormControlProps,\n  useFormControlStyles,\n  useFormErrorStyles\n});","map":{"version":3,"names":["src_exports","__export","FormControl","FormErrorIcon","FormErrorMessage","FormHelperText","FormLabel","RequiredIndicator","useFormControl","useFormControlContext","useFormControlProps","useFormControlStyles","useFormErrorStyles","module","exports","__toCommonJS","import_react_context","require","import_react_use_merge_refs","import_system","import_shared_utils","import_react","import_jsx_runtime","FormControlStylesProvider","createContext","name","errorMessage","FormControlProvider","strict","useFormControlProvider","props","id","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","useState","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","props2","forwardedRef","ref","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","forwardRef","FormControl2","styles","useMultiStyleConfig","ownProps","omitThemingProps","_","context","className","cx","jsx","value","chakra","div","__css","displayName","FormHelperText2","field","helperText","import_shared_utils2","rest","disabled","readOnly","required","ariaAttr","_a","_b","_c","labelIds","push","join","callAllHandlers","import_icon","import_react_context2","import_system2","import_shared_utils3","import_jsx_runtime2","FormErrorStylesProvider","display","alignItems","text","_className","Icon","icon","fill","d","import_system3","import_shared_utils4","import_jsx_runtime3","FormLabel2","passedProps","useStyleConfig","requiredIndicator","optionalIndicator","jsxs","label","textAlign","RequiredIndicator2","span"],"sources":["../src/index.ts","../src/form-control.tsx","../src/use-form-control.ts","../src/form-error.tsx","../src/form-label.tsx"],"sourcesContent":["export {\n  FormControl,\n  FormHelperText,\n  useFormControlContext,\n  useFormControlStyles,\n} from \"./form-control\"\nexport type {\n  FormControlOptions,\n  FormControlProps,\n  FormHelperTextProps,\n} from \"./form-control\"\nexport { useFormControl, useFormControlProps } from \"./use-form-control\"\nexport type { UseFormControlProps } from \"./use-form-control\"\nexport {\n  FormErrorIcon,\n  FormErrorMessage,\n  useFormErrorStyles,\n} from \"./form-error\"\nexport type { FormErrorMessageProps } from \"./form-error\"\nexport { FormLabel, RequiredIndicator } from \"./form-label\"\nexport type { FormLabelProps, RequiredIndicatorProps } from \"./form-label\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}