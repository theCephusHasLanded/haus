{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Image: () => Image2,\n  Img: () => Img,\n  useImage: () => useImage\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/image.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/use-image.ts\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react = require(\"react\");\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = (0, import_react.useState)(\"pending\");\n  (0, import_react.useEffect)(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = (0, import_react.useRef)();\n  const load = (0, import_react.useCallback)(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    if (ignoreFallback) return void 0;\n    if (status === \"loading\") {\n      load();\n    }\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n\n// src/native-image.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar NativeImage = (0, import_system.forwardRef)(function NativeImage2(props, ref) {\n  const {\n    htmlWidth,\n    htmlHeight,\n    alt,\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"img\", {\n    width: htmlWidth,\n    height: htmlHeight,\n    ref,\n    alt,\n    ...rest\n  });\n});\nNativeImage.displayName = \"NativeImage\";\n\n// src/image.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar Image2 = (0, import_system2.forwardRef)(function Image3(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props;\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null ||\n  // use can opt out of fallback image\n  ignoreFallback ||\n  // if the user doesn't provide any kind of fallback we should ignore it\n  !providedFallback;\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]))\n  };\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.img, {\n      as: NativeImage,\n      className: \"chakra-image__placeholder\",\n      src: fallbackSrc,\n      ...shared\n    });\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.img, {\n    as: NativeImage,\n    src,\n    srcSet,\n    crossOrigin,\n    loading,\n    referrerPolicy,\n    className: \"chakra-image\",\n    ...shared\n  });\n});\nImage2.displayName = \"Image\";\n\n// src/img.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar Img = (0, import_system3.forwardRef)((props, ref) => /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.img, {\n  ref,\n  as: NativeImage,\n  className: \"chakra-image\",\n  ...props\n}));\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Image,\n  Img,\n  useImage\n});","map":{"version":3,"names":["src_exports","__export","Image","Image2","Img","useImage","module","exports","__toCommonJS","import_system2","require","omit","object","keysToOmit","clone","Object","assign","key","import_react_use_safe_layout_effect","import_react","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","useState","useEffect","imageRef","useRef","load","useCallback","flush","img","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","shouldShowFallbackImage","fallbackStrategy","import_system","import_jsx_runtime","NativeImage","forwardRef","NativeImage2","ref","htmlWidth","htmlHeight","alt","rest","jsx","width","height","displayName","import_jsx_runtime2","Image3","fallbackSrc","fallback","align","fit","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","showFallbackImage","shared","objectFit","objectPosition","chakra","as","className","import_system3","import_jsx_runtime3"],"sources":["../src/index.ts","../src/image.tsx","../../../utilities/object-utils/src/omit.ts","../src/use-image.ts","../src/native-image.tsx","../src/img.tsx"],"sourcesContent":["export { Image } from \"./image\"\nexport type { ImageProps } from \"./image\"\nexport { Img } from \"./img\"\nexport type { ImgProps } from \"./img\"\nexport { useImage } from \"./use-image\"\nexport type { UseImageProps, UseImageReturn } from \"./use-image\"\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nimport { NativeImageOptions, NativeImage } from \"./native-image\"\n\nexport interface ImgProps extends HTMLChakraProps<\"img\">, NativeImageOptions {}\n\n/**\n * Fallback component for most SSR users who want to use the native `img` with\n * support for chakra props\n */\nexport const Img = forwardRef<ImgProps, \"img\">((props, ref) => (\n  <chakra.img ref={ref} as={NativeImage} className=\"chakra-image\" {...props} />\n))\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}