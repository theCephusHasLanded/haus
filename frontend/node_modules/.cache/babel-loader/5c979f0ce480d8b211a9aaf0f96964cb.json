{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Avatar: () => Avatar,\n  AvatarBadge: () => AvatarBadge,\n  AvatarGroup: () => AvatarGroup,\n  GenericAvatarIcon: () => GenericAvatarIcon,\n  useAvatarStyles: () => useAvatarStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/avatar.tsx\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\n\n// src/avatar-context.tsx\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [AvatarStylesProvider, useAvatarStyles] = (0, import_react_context.createContext)({\n  name: `AvatarStylesContext`,\n  hookName: `useAvatarStyles`,\n  providerName: \"<Avatar/>\"\n});\n\n// src/avatar-image.tsx\nvar import_image = require(\"@chakra-ui/image\");\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_react = require(\"react\");\n\n// src/avatar-name.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction initials(name) {\n  var _a;\n  const names = name.split(\" \");\n  const firstName = (_a = names[0]) != null ? _a : \"\";\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\";\n  return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);\n}\nfunction AvatarName(props) {\n  const {\n    name,\n    getInitials,\n    ...rest\n  } = props;\n  const styles = useAvatarStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.div, {\n    role: \"img\",\n    \"aria-label\": name,\n    ...rest,\n    __css: styles.label,\n    children: name ? getInitials == null ? void 0 : getInitials(name) : null\n  });\n}\nAvatarName.displayName = \"AvatarName\";\n\n// src/generic-avatar-icon.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar GenericAvatarIcon = props => /* @__PURE__ */(0, import_jsx_runtime2.jsxs)(import_system2.chakra.svg, {\n  viewBox: \"0 0 128 128\",\n  color: \"#fff\",\n  width: \"100%\",\n  height: \"100%\",\n  className: \"chakra-avatar__svg\",\n  ...props,\n  children: [/* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"path\", {\n    fill: \"currentColor\",\n    d: \"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n  }), /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"path\", {\n    fill: \"currentColor\",\n    d: \"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n  })]\n});\n\n// src/avatar-image.tsx\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nfunction AvatarImage(props) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /* @__PURE__ */(0, import_jsx_runtime3.jsx)(GenericAvatarIcon, {}),\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin\n  } = props;\n  const status = (0, import_image.useImage)({\n    src,\n    onError,\n    crossOrigin,\n    ignoreFallback\n  });\n  const hasLoaded = status === \"loaded\";\n  const showFallback = !src || !hasLoaded;\n  if (showFallback) {\n    return name ? /* @__PURE__ */(0, import_jsx_runtime3.jsx)(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials,\n      name\n    }) : (0, import_react.cloneElement)(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.img, {\n    src,\n    srcSet,\n    alt: name,\n    onLoad,\n    referrerPolicy,\n    crossOrigin: crossOrigin != null ? crossOrigin : void 0,\n    className: \"chakra-avatar__img\",\n    loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n}\nAvatarImage.displayName = \"AvatarImage\";\n\n// src/avatar.tsx\nvar import_react2 = require(\"react\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = (0, import_system4.forwardRef)((props, ref) => {\n  const styles = (0, import_system4.useMultiStyleConfig)(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = (0, import_react2.useState)(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */(0, import_jsx_runtime4.jsx)(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = (0, import_system4.omitThemingProps)(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_system4.chakra.span, {\n    ref,\n    ...rest,\n    className: (0, import_shared_utils.cx)(\"chakra-avatar\", props.className),\n    \"data-loaded\": (0, import_shared_utils.dataAttr)(isLoaded),\n    __css: avatarStyles,\n    children: /* @__PURE__ */(0, import_jsx_runtime4.jsxs)(AvatarStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */(0, import_jsx_runtime4.jsx)(AvatarImage, {\n        src,\n        srcSet,\n        loading,\n        onLoad: (0, import_shared_utils.callAllHandlers)(onLoadProp, () => {\n          setIsLoaded(true);\n        }),\n        onError,\n        getInitials,\n        name,\n        borderRadius,\n        icon,\n        iconLabel,\n        ignoreFallback,\n        crossOrigin,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nAvatar.displayName = \"Avatar\";\n\n// src/avatar-badge.tsx\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nvar placementMap = {\n  \"top-start\": {\n    top: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, -25%)\"\n  },\n  \"top-end\": {\n    top: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, -25%)\"\n  },\n  \"bottom-start\": {\n    bottom: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, 25%)\"\n  },\n  \"bottom-end\": {\n    bottom: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, 25%)\"\n  }\n};\nvar AvatarBadge = (0, import_system5.forwardRef)(function AvatarBadge2(props, ref) {\n  const {\n    placement = \"bottom-end\",\n    className,\n    ...rest\n  } = props;\n  const styles = useAvatarStyles();\n  const placementStyles = placementMap[placement];\n  const badgeStyles = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...placementStyles,\n    ...styles.badge\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(import_system5.chakra.div, {\n    ref,\n    ...rest,\n    className: (0, import_shared_utils2.cx)(\"chakra-avatar__badge\", className),\n    __css: badgeStyles\n  });\n});\nAvatarBadge.displayName = \"AvatarBadge\";\n\n// src/avatar-group.tsx\nvar import_system6 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_react_children_utils = require(\"@chakra-ui/react-children-utils\");\n\n// ../../utilities/object-utils/src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\n\n// src/avatar-group.tsx\nvar import_react3 = require(\"react\");\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar AvatarGroup = (0, import_system6.forwardRef)(function AvatarGroup2(props, ref) {\n  const styles = (0, import_system6.useMultiStyleConfig)(\"Avatar\", props);\n  const {\n    children,\n    borderColor,\n    max,\n    spacing = \"-0.75rem\",\n    borderRadius = \"full\",\n    ...rest\n  } = (0, import_system6.omitThemingProps)(props);\n  const validChildren = (0, import_react_children_utils.getValidChildren)(children);\n  const childrenWithinMax = max != null ? validChildren.slice(0, max) : validChildren;\n  const excess = max != null ? validChildren.length - max : 0;\n  const reversedChildren = childrenWithinMax.reverse();\n  const clones = reversedChildren.map((child, index) => {\n    var _a;\n    const isFirstAvatar = index === 0;\n    const childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: (_a = child.props.borderColor) != null ? _a : borderColor,\n      showBorder: true\n    };\n    return (0, import_react3.cloneElement)(child, compact(childProps));\n  });\n  const groupStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\",\n    ...styles.group\n  };\n  const excessStyles = {\n    borderRadius,\n    marginStart: spacing,\n    ...baseStyle,\n    ...styles.excessLabel\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsxs)(import_system6.chakra.div, {\n    ref,\n    role: \"group\",\n    __css: groupStyles,\n    ...rest,\n    className: (0, import_shared_utils3.cx)(\"chakra-avatar__group\", props.className),\n    children: [excess > 0 && /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_system6.chakra.span, {\n      className: \"chakra-avatar__excess\",\n      __css: excessStyles,\n      children: `+${excess}`\n    }), clones]\n  });\n});\nAvatarGroup.displayName = \"AvatarGroup\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Avatar,\n  AvatarBadge,\n  AvatarGroup,\n  GenericAvatarIcon,\n  useAvatarStyles\n});","map":{"version":3,"names":["src_exports","__export","Avatar","AvatarBadge","AvatarGroup","GenericAvatarIcon","useAvatarStyles","module","exports","__toCommonJS","import_system4","require","import_shared_utils","import_react_context","AvatarStylesProvider","createContext","name","hookName","providerName","import_image","import_system3","import_react","import_system","import_jsx_runtime","initials","_a","names","split","firstName","lastName","length","charAt","AvatarName","props","getInitials","rest","styles","jsx","chakra","div","role","__css","label","children","displayName","import_system2","import_jsx_runtime2","jsxs","svg","viewBox","color","width","height","className","fill","d","import_jsx_runtime3","AvatarImage","src","srcSet","onError","onLoad","borderRadius","loading","iconLabel","icon","ignoreFallback","referrerPolicy","crossOrigin","status","useImage","hasLoaded","showFallback","cloneElement","img","alt","objectFit","import_react2","import_jsx_runtime4","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","fontWeight","position","flexShrink","forwardRef","ref","useMultiStyleConfig","isLoaded","setIsLoaded","useState","showBorder","onLoadProp","borderColor","omitThemingProps","avatarStyles","borderWidth","container","span","cx","dataAttr","value","callAllHandlers","import_system5","import_shared_utils2","import_jsx_runtime5","placementMap","top","insetStart","transform","insetEnd","bottom","AvatarBadge2","placement","placementStyles","badgeStyles","badge","import_system6","import_shared_utils3","import_react_children_utils","compact","object","clone","Object","assign","key","import_react3","import_jsx_runtime6","AvatarGroup2","max","spacing","validChildren","getValidChildren","childrenWithinMax","slice","excess","reversedChildren","reverse","clones","map","child","index","isFirstAvatar","childProps","marginEnd","size","groupStyles","flexDirection","group","excessStyles","marginStart","excessLabel"],"sources":["../src/index.ts","../src/avatar.tsx","../src/avatar-context.tsx","../src/avatar-image.tsx","../src/avatar-name.tsx","../src/generic-avatar-icon.tsx","../src/avatar-badge.tsx","../src/avatar-group.tsx","../../../utilities/object-utils/src/compact.ts"],"sourcesContent":["export { Avatar } from \"./avatar\"\nexport type { AvatarProps } from \"./avatar\"\nexport { AvatarBadge } from \"./avatar-badge\"\nexport type { AvatarBadgeProps } from \"./avatar-badge\"\nexport { useAvatarStyles } from \"./avatar-context\"\nexport { AvatarGroup } from \"./avatar-group\"\nexport type { AvatarGroupProps } from \"./avatar-group\"\nexport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\n\nexport const [AvatarStylesProvider, useAvatarStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `AvatarStylesContext`,\n  hookName: `useAvatarStyles`,\n  providerName: \"<Avatar/>\",\n})\n","import { ImageProps, useImage } from \"@chakra-ui/image\"\nimport { chakra, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cloneElement } from \"react\"\nimport { AvatarName } from \"./avatar-name\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n\ntype AvatarImageProps = ImageProps & {\n  getInitials?: (name: string) => string\n  borderRadius?: SystemStyleObject[\"borderRadius\"]\n  icon: React.ReactElement\n  iconLabel?: string\n  name?: string\n}\n\nexport function AvatarImage(props: AvatarImageProps) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <GenericAvatarIcon />,\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      srcSet={srcSet}\n      alt={name}\n      onLoad={onLoad}\n      referrerPolicy={referrerPolicy}\n      crossOrigin={crossOrigin ?? undefined}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nAvatarImage.displayName = \"AvatarImage\"\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useAvatarStyles } from \"./avatar-context\"\nimport { AvatarOptions } from \"./avatar-types\"\n\nexport function initials(name: string) {\n  const names = name.split(\" \")\n  const firstName = names[0] ?? \"\"\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\"\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n/**\n * The avatar name container\n */\n\nexport function AvatarName(props: AvatarNameProps) {\n  const { name, getInitials, ...rest } = props\n  const styles = useAvatarStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\nAvatarName.displayName = \"AvatarName\"\n","import { chakra, ChakraComponent } from \"@chakra-ui/system\"\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nexport const GenericAvatarIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useAvatarStyles } from \"./avatar-context\"\n\ntype BadgePlacement = \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\"\n\nconst placementMap: Record<BadgePlacement, SystemStyleObject> = {\n  \"top-start\": {\n    top: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, -25%)\",\n  },\n  \"top-end\": {\n    top: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, -25%)\",\n  },\n  \"bottom-start\": {\n    bottom: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, 25%)\",\n  },\n  \"bottom-end\": {\n    bottom: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, 25%)\",\n  },\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {\n  placement?: BadgePlacement\n}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">(\n  function AvatarBadge(props, ref) {\n    const { placement = \"bottom-end\", className, ...rest } = props\n    const styles = useAvatarStyles()\n\n    const placementStyles = placementMap[placement]\n\n    const badgeStyles: SystemStyleObject = {\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      ...placementStyles,\n      ...styles.badge,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...rest}\n        className={cx(\"chakra-avatar__badge\", className)}\n        __css={badgeStyles}\n      />\n    )\n  },\n)\n\nAvatarBadge.displayName = \"AvatarBadge\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { baseStyle } from \"./avatar\"\nimport { cloneElement } from \"react\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @default \"-0.75rem\"\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">(\n  function AvatarGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Avatar\", props)\n\n    const {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      borderRadius = \"full\",\n      ...rest\n    } = omitThemingProps(props)\n\n    const validChildren = getValidChildren(children)\n\n    /**\n     * get the avatars within the max\n     */\n    const childrenWithinMax =\n      max != null ? validChildren.slice(0, max) : validChildren\n\n    /**\n     * get the remaining avatar count\n     */\n    const excess = max != null ? validChildren.length - max : 0\n\n    /**\n     * Reversing the children is a great way to avoid using zIndex\n     * to overlap the avatars\n     */\n    const reversedChildren = childrenWithinMax.reverse()\n\n    const clones = reversedChildren.map((child, index) => {\n      const isFirstAvatar = index === 0\n\n      const childProps = {\n        marginEnd: isFirstAvatar ? 0 : spacing,\n        size: props.size,\n        borderColor: child.props.borderColor ?? borderColor,\n        showBorder: true,\n      }\n\n      return cloneElement(child, compact(childProps))\n    })\n\n    const groupStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flexDirection: \"row-reverse\",\n      ...styles.group,\n    }\n\n    const excessStyles: SystemStyleObject = {\n      borderRadius,\n      marginStart: spacing,\n      ...baseStyle,\n      ...styles.excessLabel,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        {...rest}\n        className={cx(\"chakra-avatar__group\", props.className)}\n      >\n        {excess > 0 && (\n          <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n            {`+${excess}`}\n          </chakra.span>\n        )}\n        {clones}\n      </chakra.div>\n    )\n  },\n)\n\nAvatarGroup.displayName = \"AvatarGroup\"\n","export function compact<T extends Record<any, any>>(object: T) {\n  const clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}