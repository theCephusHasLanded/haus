{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ChakraProvider: () => ChakraProvider\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/chakra-provider.tsx\nvar import_css_reset = require(\"@chakra-ui/css-reset\");\nvar import_portal = require(\"@chakra-ui/portal\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_react_env = require(\"@chakra-ui/react-env\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar ChakraProvider = props => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetScope,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n    disableEnvironment,\n    disableGlobalStyle\n  } = props;\n  const _children = /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_react_env.EnvironmentProvider, {\n    environment,\n    disabled: disableEnvironment,\n    children\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.ThemeProvider, {\n    theme,\n    cssVarsRoot,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_system.ColorModeProvider, {\n      colorModeManager,\n      options: theme.config,\n      children: [resetCSS ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_css_reset.CSSReset, {\n        scope: resetScope\n      }) : /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_css_reset.CSSPolyfill, {}), !disableGlobalStyle && /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.GlobalStyle, {}), portalZIndex ? /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_portal.PortalManager, {\n        zIndex: portalZIndex,\n        children: _children\n      }) : _children]\n    })\n  });\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ChakraProvider\n});","map":{"version":3,"names":["src_exports","__export","ChakraProvider","module","exports","__toCommonJS","import_css_reset","require","import_portal","import_system","import_react_env","import_jsx_runtime","props","children","colorModeManager","portalZIndex","resetScope","resetCSS","theme","environment","cssVarsRoot","disableEnvironment","disableGlobalStyle","_children","jsx","EnvironmentProvider","disabled","ThemeProvider","jsxs","ColorModeProvider","options","config","CSSReset","scope","CSSPolyfill","GlobalStyle","PortalManager","zIndex"],"sources":["../src/index.ts","../src/chakra-provider.tsx"],"sourcesContent":["export { ChakraProvider } from \"./chakra-provider\"\nexport type { ChakraProviderProps } from \"./chakra-provider\"\n","import { CSSReset, CSSPolyfill } from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * The selector to scope the css reset styles to.\n   */\n  resetScope?: string\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n  /**\n   * Disabled the use of automatic window and document detection.\n   * This removed the injected `<span/>` element\n   */\n  disableEnvironment?: boolean\n  /**\n   * If `true`, Chakra will not mount the global styles defined in the theme.\n   */\n  disableGlobalStyle?: boolean\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider: React.FC<ChakraProviderProps> = (props) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetScope,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n    disableEnvironment,\n    disableGlobalStyle,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider\n      environment={environment}\n      disabled={disableEnvironment}\n    >\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <ThemeProvider theme={theme as Dict} cssVarsRoot={cssVarsRoot}>\n      <ColorModeProvider\n        colorModeManager={colorModeManager}\n        options={theme.config}\n      >\n        {resetCSS ? <CSSReset scope={resetScope} /> : <CSSPolyfill />}\n        {!disableGlobalStyle && <GlobalStyle />}\n        {portalZIndex ? (\n          <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n        ) : (\n          _children\n        )}\n      </ColorModeProvider>\n    </ThemeProvider>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,cAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,WAAA;;;ACAA,IAAAM,gBAAA,GAAsCC,OAAA;AACtC,IAAAC,aAAA,GAA8BD,OAAA;AAC9B,IAAAE,aAAA,GAMOF,OAAA;AAEP,IAAAG,gBAAA,GAGOH,OAAA;AA4EH,IAAAI,kBAAA,GAAAJ,OAAA;AAfG,IAAML,cAAA,GAAiDU,KAAA,IAAU;EACtE,MAAM;IACJC,QAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,UAAA;IACAC,QAAA,GAAW;IACXC,KAAA,GAAQ,CAAC;IACTC,WAAA;IACAC,WAAA;IACAC,kBAAA;IACAC;EACF,IAAIV,KAAA;EAEJ,MAAMW,SAAA,GACJ,mBAAAZ,kBAAA,CAAAa,GAAA,EAACd,gBAAA,CAAAe,mBAAA;IACCN,WAAA;IACAO,QAAA,EAAUL,kBAAA;IAETR;EAAA,CACH;EAGF,OACE,mBAAAF,kBAAA,CAAAa,GAAA,EAACf,aAAA,CAAAkB,aAAA;IAAcT,KAAA;IAAsBE,WAAA;IACnCP,QAAA,qBAAAF,kBAAA,CAAAiB,IAAA,EAACnB,aAAA,CAAAoB,iBAAA;MACCf,gBAAA;MACAgB,OAAA,EAASZ,KAAA,CAAMa,MAAA;MAEdlB,QAAA,GAAAI,QAAA,GAAW,mBAAAN,kBAAA,CAAAa,GAAA,EAAClB,gBAAA,CAAA0B,QAAA;QAASC,KAAA,EAAOjB;MAAA,CAAY,IAAK,mBAAAL,kBAAA,CAAAa,GAAA,EAAClB,gBAAA,CAAA4B,WAAA,IAAY,GAC1D,CAACZ,kBAAA,IAAsB,mBAAAX,kBAAA,CAAAa,GAAA,EAACf,aAAA,CAAA0B,WAAA,IAAY,GACpCpB,YAAA,GACC,mBAAAJ,kBAAA,CAAAa,GAAA,EAAChB,aAAA,CAAA4B,aAAA;QAAcC,MAAA,EAAQtB,YAAA;QAAeF,QAAA,EAAAU;MAAA,CAAU,IAEhDA,SAAA;IAAA,CAEJ;EAAA,CACF;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"script"}