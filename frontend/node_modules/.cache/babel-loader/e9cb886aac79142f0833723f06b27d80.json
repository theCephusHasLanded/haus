{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ColorModeContext: () => ColorModeContext,\n  ColorModeProvider: () => ColorModeProvider,\n  ColorModeScript: () => ColorModeScript,\n  DarkMode: () => DarkMode,\n  LightMode: () => LightMode,\n  cookieStorageManager: () => cookieStorageManager,\n  cookieStorageManagerSSR: () => cookieStorageManagerSSR,\n  createCookieStorageManager: () => createCookieStorageManager,\n  createLocalStorageManager: () => createLocalStorageManager,\n  getScriptSrc: () => getScriptSrc,\n  localStorageManager: () => localStorageManager,\n  useColorMode: () => useColorMode,\n  useColorModeValue: () => useColorModeValue\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/color-mode-provider.tsx\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react2 = require(\"react\");\n\n// src/color-mode-context.ts\nvar import_react = require(\"react\");\nvar ColorModeContext = (0, import_react.createContext)({});\nColorModeContext.displayName = \"ColorModeContext\";\nfunction useColorMode() {\n  const context = (0, import_react.useContext)(ColorModeContext);\n  if (context === void 0) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n}\nfunction useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === \"dark\" ? dark : light;\n}\n\n// src/color-mode.utils.ts\nvar classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\"\n};\nfunction getColorModeUtils(options = {}) {\n  const {\n    preventTransition = true\n  } = options;\n  const utils = {\n    setDataset: value => {\n      const cleanup = preventTransition ? utils.preventTransition() : void 0;\n      document.documentElement.dataset.theme = value;\n      document.documentElement.style.colorScheme = value;\n      cleanup == null ? void 0 : cleanup();\n    },\n    setClassName(dark) {\n      document.body.classList.add(dark ? classNames.dark : classNames.light);\n      document.body.classList.remove(dark ? classNames.light : classNames.dark);\n    },\n    query() {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\");\n    },\n    getSystemTheme(fallback) {\n      var _a;\n      const dark = (_a = utils.query().matches) != null ? _a : fallback === \"dark\";\n      return dark ? \"dark\" : \"light\";\n    },\n    addListener(fn) {\n      const mql = utils.query();\n      const listener = e => {\n        fn(e.matches ? \"dark\" : \"light\");\n      };\n      if (typeof mql.addListener === \"function\") mql.addListener(listener);else mql.addEventListener(\"change\", listener);\n      return () => {\n        if (typeof mql.removeListener === \"function\") mql.removeListener(listener);else mql.removeEventListener(\"change\", listener);\n      };\n    },\n    preventTransition() {\n      const css = document.createElement(\"style\");\n      css.appendChild(document.createTextNode(`*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`));\n      document.head.appendChild(css);\n      return () => {\n        ;\n        (() => window.getComputedStyle(document.body))();\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            document.head.removeChild(css);\n          });\n        });\n      };\n    }\n  };\n  return utils;\n}\n\n// src/storage-manager.ts\nvar STORAGE_KEY = \"chakra-ui-color-mode\";\nfunction createLocalStorageManager(key) {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get(init) {\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      let value;\n      try {\n        value = localStorage.getItem(key) || init;\n      } catch (e) {}\n      return value || init;\n    },\n    set(value) {\n      try {\n        localStorage.setItem(key, value);\n      } catch (e) {}\n    }\n  };\n}\nvar localStorageManager = createLocalStorageManager(STORAGE_KEY);\nfunction parseCookie(cookie, key) {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));\n  return match == null ? void 0 : match[2];\n}\nfunction createCookieStorageManager(key, cookie) {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get(init) {\n      if (cookie) return parseCookie(cookie, key);\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      return parseCookie(document.cookie, key) || init;\n    },\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`;\n    }\n  };\n}\nvar cookieStorageManager = createCookieStorageManager(STORAGE_KEY);\nvar cookieStorageManagerSSR = cookie => createCookieStorageManager(STORAGE_KEY, cookie);\n\n// src/color-mode-provider.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar noop = () => {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = (0, import_react2.useState)(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = (0, import_react2.useState)(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = (0, import_react2.useMemo)(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = (0, import_react2.useCallback)(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  (0, import_react2.useEffect)(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = (0, import_react2.useCallback)(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  (0, import_react2.useEffect)(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = (0, import_react2.useMemo)(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = (0, import_react2.useMemo)(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = (0, import_react2.useMemo)(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\nLightMode.displayName = \"LightMode\";\n\n// src/color-mode-script.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar VALID_VALUES = /* @__PURE__ */new Set([\"dark\", \"light\", \"system\"]);\nfunction normalize(initialColorMode) {\n  let value = initialColorMode;\n  if (!VALID_VALUES.has(value)) value = \"light\";\n  return value;\n}\nfunction getScriptSrc(props = {}) {\n  const {\n    initialColorMode = \"light\",\n    type = \"localStorage\",\n    storageKey: key = \"chakra-ui-color-mode\"\n  } = props;\n  const init = normalize(initialColorMode);\n  const isCookie = type === \"cookie\";\n  const cookieScript = `(function(){try{var a=function(o){var l=\"(prefers-color-scheme: dark)\",v=window.matchMedia(l).matches?\"dark\":\"light\",e=o===\"system\"?v:o,d=document.documentElement,m=document.body,i=\"chakra-ui-light\",n=\"chakra-ui-dark\",s=e===\"dark\";return m.classList.add(s?n:i),m.classList.remove(s?i:n),d.style.colorScheme=e,d.dataset.theme=e,e},u=a,h=\"${init}\",r=\"${key}\",t=document.cookie.match(new RegExp(\"(^| )\".concat(r,\"=([^;]+)\"))),c=t?t[2]:null;c?a(c):document.cookie=\"\".concat(r,\"=\").concat(a(h),\"; max-age=31536000; path=/\")}catch(a){}})();\n  `;\n  const localStorageScript = `(function(){try{var a=function(c){var v=\"(prefers-color-scheme: dark)\",h=window.matchMedia(v).matches?\"dark\":\"light\",r=c===\"system\"?h:c,o=document.documentElement,s=document.body,l=\"chakra-ui-light\",d=\"chakra-ui-dark\",i=r===\"dark\";return s.classList.add(i?d:l),s.classList.remove(i?l:d),o.style.colorScheme=r,o.dataset.theme=r,r},n=a,m=\"${init}\",e=\"${key}\",t=localStorage.getItem(e);t?a(t):localStorage.setItem(e,a(m))}catch(a){}})();\n  `;\n  const fn = isCookie ? cookieScript : localStorageScript;\n  return `!${fn}`.trim();\n}\nfunction ColorModeScript(props = {}) {\n  const {\n    nonce\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"script\", {\n    id: \"chakra-script\",\n    nonce,\n    dangerouslySetInnerHTML: {\n      __html: getScriptSrc(props)\n    }\n  });\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ColorModeContext,\n  ColorModeProvider,\n  ColorModeScript,\n  DarkMode,\n  LightMode,\n  cookieStorageManager,\n  cookieStorageManagerSSR,\n  createCookieStorageManager,\n  createLocalStorageManager,\n  getScriptSrc,\n  localStorageManager,\n  useColorMode,\n  useColorModeValue\n});","map":{"version":3,"names":["src_exports","__export","ColorModeContext","ColorModeProvider","ColorModeScript","DarkMode","LightMode","cookieStorageManager","cookieStorageManagerSSR","createCookieStorageManager","createLocalStorageManager","getScriptSrc","localStorageManager","useColorMode","useColorModeValue","module","exports","__toCommonJS","import_react_use_safe_layout_effect","require","import_react2","import_react","createContext","displayName","context","useContext","Error","light","dark","colorMode","classNames","getColorModeUtils","options","preventTransition","utils","setDataset","value","cleanup","document","documentElement","dataset","theme","style","colorScheme","setClassName","body","classList","add","remove","query","window","matchMedia","getSystemTheme","fallback","_a","matches","addListener","fn","mql","listener","e","addEventListener","removeListener","removeEventListener","css","createElement","appendChild","createTextNode","head","getComputedStyle","requestAnimationFrame","removeChild","STORAGE_KEY","key","ssr","type","get","init","globalThis","localStorage","getItem","set","setItem","parseCookie","cookie","match","RegExp","import_jsx_runtime","noop","getTheme","manager","props","children","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","defaultColorMode","rawSetColorMode","useState","resolvedColorMode","setResolvedColorMode","useMemo","resolvedValue","setColorMode","useCallback","value2","resolved","useSafeLayoutEffect","useEffect","managerValue","toggleColorMode","forced","jsx","Provider","import_jsx_runtime2","VALID_VALUES","Set","normalize","has","storageKey","isCookie","cookieScript","localStorageScript","trim","nonce","id","dangerouslySetInnerHTML","__html"],"sources":["../src/index.ts","../src/color-mode-provider.tsx","../src/color-mode-context.ts","../src/color-mode.utils.ts","../src/storage-manager.ts","../src/color-mode-script.tsx"],"sourcesContent":["export { ColorModeProvider, DarkMode, LightMode } from \"./color-mode-provider\"\nexport type { ColorModeProviderProps } from \"./color-mode-provider\"\nexport {\n  cookieStorageManager,\n  cookieStorageManagerSSR,\n  createCookieStorageManager,\n  localStorageManager,\n  createLocalStorageManager,\n} from \"./storage-manager\"\nexport { ColorModeScript } from \"./color-mode-script\"\nexport type { ColorModeScriptProps } from \"./color-mode-script\"\nexport {\n  useColorMode,\n  useColorModeValue,\n  ColorModeContext,\n} from \"./color-mode-context\"\nexport type {\n  ColorMode,\n  ColorModeContextType,\n  ConfigColorMode,\n  ColorModeWithSystem,\n} from \"./color-mode-types\"\nexport { getScriptSrc } from \"./color-mode-script\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n","import { createContext, useContext } from \"react\"\nimport { ColorModeContextType } from \"./color-mode-types\"\n\nexport const ColorModeContext = createContext({} as ColorModeContextType)\n\nColorModeContext.displayName = \"ColorModeContext\"\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport function useColorMode() {\n  const context = useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n","import { ColorMode } from \"./color-mode-types\"\n\nconst classNames = {\n  light: \"chakra-ui-light\",\n  dark: \"chakra-ui-dark\",\n}\n\ntype UtilOptions = {\n  preventTransition?: boolean\n}\n\nexport function getColorModeUtils(options: UtilOptions = {}) {\n  const { preventTransition = true } = options\n\n  const utils = {\n    setDataset: (value: ColorMode) => {\n      const cleanup = preventTransition ? utils.preventTransition() : undefined\n      document.documentElement.dataset.theme = value\n      document.documentElement.style.colorScheme = value\n      cleanup?.()\n    },\n    setClassName(dark: boolean) {\n      document.body.classList.add(dark ? classNames.dark : classNames.light)\n      document.body.classList.remove(dark ? classNames.light : classNames.dark)\n    },\n    query() {\n      return window.matchMedia(\"(prefers-color-scheme: dark)\")\n    },\n    getSystemTheme(fallback?: ColorMode) {\n      const dark = utils.query().matches ?? fallback === \"dark\"\n      return dark ? \"dark\" : \"light\"\n    },\n    addListener(fn: (cm: ColorMode) => unknown) {\n      const mql = utils.query()\n      const listener = (e: MediaQueryListEvent) => {\n        fn(e.matches ? \"dark\" : \"light\")\n      }\n\n      if (typeof mql.addListener === \"function\") mql.addListener(listener)\n      else mql.addEventListener(\"change\", listener)\n\n      return () => {\n        if (typeof mql.removeListener === \"function\")\n          mql.removeListener(listener)\n        else mql.removeEventListener(\"change\", listener)\n      }\n    },\n    preventTransition() {\n      const css = document.createElement(\"style\")\n      css.appendChild(\n        document.createTextNode(\n          `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`,\n        ),\n      )\n      document.head.appendChild(css)\n\n      return () => {\n        // force a reflow\n        ;(() => window.getComputedStyle(document.body))()\n\n        // wait for next tick\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            document.head.removeChild(css)\n          })\n        })\n      }\n    },\n  }\n\n  return utils\n}\n","import { ColorMode } from \"./color-mode-types\"\n\nexport const STORAGE_KEY = \"chakra-ui-color-mode\"\n\ntype MaybeColorMode = ColorMode | undefined\n\nexport interface StorageManager {\n  type: \"cookie\" | \"localStorage\"\n  ssr?: boolean\n  get(init?: ColorMode): MaybeColorMode\n  set(value: ColorMode | \"system\"): void\n}\n\nexport function createLocalStorageManager(key: string): StorageManager {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get(init?) {\n      if (!globalThis?.document) return init\n      let value: any\n      try {\n        value = localStorage.getItem(key) || init\n      } catch (e) {\n        // no op\n      }\n\n      return value || init\n    },\n    set(value) {\n      try {\n        localStorage.setItem(key, value)\n      } catch (e) {\n        // no op\n      }\n    },\n  }\n}\n\nexport const localStorageManager = createLocalStorageManager(STORAGE_KEY)\n\nfunction parseCookie(cookie: string, key: string): MaybeColorMode {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`))\n  return match?.[2] as MaybeColorMode\n}\n\nexport function createCookieStorageManager(\n  key: string,\n  cookie?: string,\n): StorageManager {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get(init?): MaybeColorMode {\n      if (cookie) return parseCookie(cookie, key)\n      if (!globalThis?.document) return init\n      return parseCookie(document.cookie, key) || init\n    },\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`\n    },\n  }\n}\n\nexport const cookieStorageManager = createCookieStorageManager(STORAGE_KEY)\n\nexport const cookieStorageManagerSSR = (cookie: string) =>\n  createCookieStorageManager(STORAGE_KEY, cookie)\n","export type ColorModeScriptProps = {\n  type?: \"localStorage\" | \"cookie\"\n  initialColorMode?: \"light\" | \"dark\" | \"system\"\n  storageKey?: string\n  nonce?: string\n}\n\nconst VALID_VALUES = new Set([\"dark\", \"light\", \"system\"])\n\n/**\n * runtime safe-guard against invalid color mode values\n */\nfunction normalize(initialColorMode: \"light\" | \"dark\" | \"system\") {\n  let value = initialColorMode\n  if (!VALID_VALUES.has(value)) value = \"light\"\n  return value\n}\n\nexport function getScriptSrc(props: ColorModeScriptProps = {}) {\n  const {\n    initialColorMode = \"light\",\n    type = \"localStorage\",\n    storageKey: key = \"chakra-ui-color-mode\",\n  } = props\n\n  // runtime safe-guard against invalid color mode values\n  const init = normalize(initialColorMode)\n\n  const isCookie = type === \"cookie\"\n\n  const cookieScript = `(function(){try{var a=function(o){var l=\"(prefers-color-scheme: dark)\",v=window.matchMedia(l).matches?\"dark\":\"light\",e=o===\"system\"?v:o,d=document.documentElement,m=document.body,i=\"chakra-ui-light\",n=\"chakra-ui-dark\",s=e===\"dark\";return m.classList.add(s?n:i),m.classList.remove(s?i:n),d.style.colorScheme=e,d.dataset.theme=e,e},u=a,h=\"${init}\",r=\"${key}\",t=document.cookie.match(new RegExp(\"(^| )\".concat(r,\"=([^;]+)\"))),c=t?t[2]:null;c?a(c):document.cookie=\"\".concat(r,\"=\").concat(a(h),\"; max-age=31536000; path=/\")}catch(a){}})();\n  `\n\n  const localStorageScript = `(function(){try{var a=function(c){var v=\"(prefers-color-scheme: dark)\",h=window.matchMedia(v).matches?\"dark\":\"light\",r=c===\"system\"?h:c,o=document.documentElement,s=document.body,l=\"chakra-ui-light\",d=\"chakra-ui-dark\",i=r===\"dark\";return s.classList.add(i?d:l),s.classList.remove(i?l:d),o.style.colorScheme=r,o.dataset.theme=r,r},n=a,m=\"${init}\",e=\"${key}\",t=localStorage.getItem(e);t?a(t):localStorage.setItem(e,a(m))}catch(a){}})();\n  `\n\n  const fn = isCookie ? cookieScript : localStorageScript\n  return `!${fn}`.trim()\n}\n\nexport function ColorModeScript(props: ColorModeScriptProps = {}) {\n  const { nonce } = props\n\n  return (\n    <script\n      id=\"chakra-script\"\n      nonce={nonce}\n      dangerouslySetInnerHTML={{ __html: getScriptSrc(props) }}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}