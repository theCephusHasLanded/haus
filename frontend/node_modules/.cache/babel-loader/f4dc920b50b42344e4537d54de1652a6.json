{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  PinInput: () => PinInput,\n  PinInputDescendantsProvider: () => PinInputDescendantsProvider,\n  PinInputField: () => PinInputField,\n  PinInputProvider: () => PinInputProvider,\n  usePinInput: () => usePinInput,\n  usePinInputContext: () => usePinInputContext,\n  usePinInputField: () => usePinInputField\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/pin-input.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react_children_utils = require(\"@chakra-ui/react-children-utils\");\n\n// src/use-pin-input.ts\nvar import_descendant = require(\"@chakra-ui/descendant\");\nvar import_react_use_controllable_state = require(\"@chakra-ui/react-use-controllable-state\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_react = require(\"react\");\nvar [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = (0, import_descendant.createDescendantContext)();\nvar [PinInputProvider, usePinInputContext] = (0, import_react_context.createContext)({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\nvar toArray = value => value == null ? void 0 : value.split(\"\");\nfunction validate(value, type) {\n  const NUMERIC_REGEX = /^[0-9]+$/;\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\nfunction usePinInput(props = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"\\u25CB\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask\n  } = props;\n  const uuid = (0, import_react.useId)();\n  const id = idProp != null ? idProp : `pin-input-${uuid}`;\n  const descendants = usePinInputDescendants();\n  const [moveFocus, setMoveFocus] = (0, import_react.useState)(true);\n  const [focusedIndex, setFocusedIndex] = (0, import_react.useState)(-1);\n  const [values, setValues] = (0, import_react_use_controllable_state.useControllableState)({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values2 => onChange == null ? void 0 : onChange(values2.join(\"\"))\n  });\n  (0, import_react.useEffect)(() => {\n    if (autoFocus) {\n      const first = descendants.first();\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus();\n        });\n      }\n    }\n  }, [descendants]);\n  const focusNext = (0, import_react.useCallback)(index => {\n    if (!moveFocus || !manageFocus) return;\n    const next = descendants.next(index, false);\n    if (next) {\n      requestAnimationFrame(() => {\n        next.node.focus();\n      });\n    }\n  }, [descendants, moveFocus, manageFocus]);\n  const setValue = (0, import_react.useCallback)((value2, index, handleFocus = true) => {\n    const nextValues = [...values];\n    nextValues[index] = value2;\n    setValues(nextValues);\n    const isComplete = value2 !== \"\" && nextValues.length === descendants.count() && nextValues.every(inputValue => inputValue != null && inputValue !== \"\");\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      if (handleFocus) focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  const clear = (0, import_react.useCallback)(() => {\n    var _a;\n    const values2 = Array(descendants.count()).fill(\"\");\n    setValues(values2);\n    const first = descendants.first();\n    (_a = first == null ? void 0 : first.node) == null ? void 0 : _a.focus();\n  }, [descendants, setValues]);\n  const getNextValue = (0, import_react.useCallback)((value2, eventValue) => {\n    let nextValue = eventValue;\n    if ((value2 == null ? void 0 : value2.length) > 0) {\n      if (value2[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value2[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n    return nextValue;\n  }, []);\n  const getInputProps = (0, import_react.useCallback)(props2 => {\n    const {\n      index,\n      ...rest\n    } = props2;\n    const onChange2 = event => {\n      const eventValue = event.target.value;\n      const currentValue = values[index];\n      const nextValue = getNextValue(currentValue, eventValue);\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      }\n      if (eventValue.length > 2) {\n        if (validate(eventValue, type)) {\n          const nextValue2 = eventValue.split(\"\").filter((_, index2) => index2 < descendants.count());\n          setValues(nextValue2);\n          if (nextValue2.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(nextValue2.join(\"\"));\n          }\n        }\n      } else {\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n        setMoveFocus(true);\n      }\n    };\n    const onKeyDown = event => {\n      var _a;\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          const prevInput = descendants.prev(index, false);\n          if (prevInput) {\n            setValue(\"\", index - 1, false);\n            (_a = prevInput.node) == null ? void 0 : _a.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n    const onFocus = () => {\n      setFocusedIndex(index);\n    };\n    const onBlur = () => {\n      setFocusedIndex(-1);\n    };\n    const hasFocus = focusedIndex === index;\n    const inputType = type === \"number\" ? \"tel\" : \"text\";\n    return {\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType,\n      ...rest,\n      id: `${id}-${index}`,\n      disabled: isDisabled,\n      \"aria-invalid\": (0, import_shared_utils.ariaAttr)(isInvalid),\n      onChange: (0, import_shared_utils.callAllHandlers)(rest.onChange, onChange2),\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(rest.onKeyDown, onKeyDown),\n      onFocus: (0, import_shared_utils.callAllHandlers)(rest.onFocus, onFocus),\n      onBlur: (0, import_shared_utils.callAllHandlers)(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    };\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear\n  };\n}\nfunction usePinInputField(props = {}, ref = null) {\n  const {\n    getInputProps\n  } = usePinInputContext();\n  const {\n    index,\n    register\n  } = usePinInputDescendant();\n  return getInputProps({\n    ...props,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(register, ref),\n    index\n  });\n}\n\n// src/pin-input.tsx\nvar import_react2 = require(\"react\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction PinInput(props) {\n  const styles = (0, import_system.useStyleConfig)(\"PinInput\", props);\n  const {\n    children,\n    ...rest\n  } = (0, import_system.omitThemingProps)(props);\n  const {\n    descendants,\n    ...context\n  } = usePinInput(rest);\n  const clones = (0, import_react_children_utils.getValidChildren)(children).map(child => (0, import_react2.cloneElement)(child, {\n    __css: styles\n  }));\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PinInputDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(PinInputProvider, {\n      value: context,\n      children: clones\n    })\n  });\n}\nPinInput.displayName = \"PinInput\";\nvar PinInputField = (0, import_system.forwardRef)(function PinInputField2(props, ref) {\n  const inputProps = usePinInputField(props, ref);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.input, {\n    ...inputProps,\n    className: (0, import_shared_utils2.cx)(\"chakra-pin-input\", props.className)\n  });\n});\nPinInputField.displayName = \"PinInputField\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  PinInput,\n  PinInputDescendantsProvider,\n  PinInputField,\n  PinInputProvider,\n  usePinInput,\n  usePinInputContext,\n  usePinInputField\n});","map":{"version":3,"names":["src_exports","__export","PinInput","PinInputDescendantsProvider","PinInputField","PinInputProvider","usePinInput","usePinInputContext","usePinInputField","module","exports","__toCommonJS","import_system","require","import_shared_utils2","import_react_children_utils","import_descendant","import_react_use_controllable_state","import_shared_utils","import_react_context","import_react_use_merge_refs","import_react","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","createDescendantContext","createContext","name","errorMessage","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","id","idProp","isDisabled","isInvalid","mask","uuid","useId","descendants","moveFocus","setMoveFocus","useState","focusedIndex","setFocusedIndex","values","setValues","useControllableState","values2","join","useEffect","first","requestAnimationFrame","node","focus","focusNext","useCallback","index","next","setValue","value2","handleFocus","nextValues","isComplete","length","count","every","inputValue","clear","_a","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","props2","rest","onChange2","event","target","currentValue","nextValue2","filter","_","index2","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","ariaAttr","callAllHandlers","autoComplete","ref","register","mergeRefs","import_react2","import_jsx_runtime","styles","useStyleConfig","children","omitThemingProps","context","clones","getValidChildren","map","child","cloneElement","__css","jsx","displayName","forwardRef","PinInputField2","inputProps","chakra","input","className","cx"],"sources":["../src/index.ts","../src/pin-input.tsx","../src/use-pin-input.ts"],"sourcesContent":["export { PinInput, PinInputField } from \"./pin-input\"\nexport type { PinInputFieldProps, PinInputProps } from \"./pin-input\"\nexport {\n  PinInputDescendantsProvider,\n  PinInputProvider,\n  usePinInput,\n  usePinInputContext,\n  usePinInputField,\n} from \"./use-pin-input\"\nexport type {\n  PinInputContext,\n  UsePinInputFieldProps,\n  UsePinInputProps,\n  UsePinInputReturn,\n} from \"./use-pin-input\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  PinInputDescendantsProvider,\n  PinInputProvider,\n  usePinInput,\n  usePinInputField,\n  UsePinInputProps,\n} from \"./use-pin-input\"\nimport { cloneElement } from \"react\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface PinInputProps\n  extends UsePinInputProps,\n    ThemingProps<\"PinInput\">,\n    InputOptions {\n  /**\n   * The children of the pin input component\n   */\n  children: React.ReactNode\n}\n\n/**\n * The `PinInput` component is similar to the Input component, but is optimized for entering sequences of digits quickly.\n *\n * @see Docs https://chakra-ui.com/docs/components/pin-input\n */\nexport function PinInput(props: PinInputProps) {\n  const styles = useStyleConfig(\"PinInput\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const { descendants, ...context } = usePinInput(rest)\n\n  const clones = getValidChildren(children).map((child) =>\n    cloneElement(child, { __css: styles }),\n  )\n\n  return (\n    <PinInputDescendantsProvider value={descendants}>\n      <PinInputProvider value={context}>{clones}</PinInputProvider>\n    </PinInputDescendantsProvider>\n  )\n}\n\nPinInput.displayName = \"PinInput\"\n\nexport interface PinInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  function PinInputField(props, ref) {\n    const inputProps = usePinInputField(props, ref)\n    return (\n      <chakra.input\n        {...inputProps}\n        className={cx(\"chakra-pin-input\", props.className)}\n      />\n    )\n  },\n)\n\nPinInputField.displayName = \"PinInputField\"\n","import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [PinInputProvider, usePinInputContext] =\n  createContext<PinInputContext>({\n    name: \"PinInputContext\",\n    errorMessage:\n      \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n  })\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = useState(true)\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus()\n        })\n      }\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) {\n        requestAnimationFrame(() => {\n          next.node.focus()\n        })\n      }\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number, handleFocus: boolean = true) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        if (handleFocus) focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    first?.node?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = useCallback((value: string, eventValue: string) => {\n    let nextValue = eventValue\n    if (value?.length > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1)\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0)\n      }\n    }\n    return nextValue\n  }, [])\n\n  const getInputProps = useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1, false)\n              prevInput.node?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}