{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Select: () => Select,\n  SelectField: () => SelectField\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/select.tsx\nvar import_form_control = require(\"@chakra-ui/form-control\");\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\n\n// ../../utilities/object-utils/src/split.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key)) picked[key] = value;else omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nvar import_react = require(\"react\");\n\n// src/select-field.tsx\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar SelectField = (0, import_system.forwardRef)(function SelectField2(props, ref) {\n  const {\n    children,\n    placeholder,\n    className,\n    ...rest\n  } = props;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsxs)(import_system.chakra.select, {\n    ...rest,\n    ref,\n    className: (0, import_shared_utils.cx)(\"chakra-select\", className),\n    children: [placeholder && /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"option\", {\n      value: \"\",\n      children: placeholder\n    }), children]\n  });\n});\nSelectField.displayName = \"SelectField\";\n\n// src/select.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar Select = (0, import_system2.forwardRef)((props, ref) => {\n  var _a;\n  const styles = (0, import_system2.useMultiStyleConfig)(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = (0, import_system2.omitThemingProps)(props);\n  const [layoutProps, otherProps] = split(rest, import_system2.layoutPropNames);\n  const ownProps = (0, import_form_control.useFormControl)(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...((_a = styles.field) == null ? void 0 : _a[\"_focus\"])\n    }\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsxs)(import_system2.chakra.div, {\n    className: \"chakra-select__wrapper\",\n    __css: rootStyles,\n    ...layoutProps,\n    ...rootProps,\n    children: [/* @__PURE__ */(0, import_jsx_runtime2.jsx)(SelectField, {\n      ref,\n      height: h != null ? h : height,\n      minH: minH != null ? minH : minHeight,\n      placeholder,\n      ...ownProps,\n      __css: fieldStyles,\n      children: props.children\n    }), /* @__PURE__ */(0, import_jsx_runtime2.jsx)(SelectIcon, {\n      \"data-disabled\": (0, import_shared_utils2.dataAttr)(ownProps.disabled),\n      ...((iconColor || color) && {\n        color: iconColor || color\n      }),\n      __css: styles.icon,\n      ...(iconSize && {\n        fontSize: iconSize\n      }),\n      children: icon\n    })]\n  });\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = props => /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"svg\", {\n  viewBox: \"0 0 24 24\",\n  ...props,\n  children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  })\n});\nvar IconWrapper = (0, import_system2.chakra)(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = props => {\n  const {\n    children = /* @__PURE__ */(0, import_jsx_runtime2.jsx)(DefaultIcon, {}),\n    ...rest\n  } = props;\n  const clone = (0, import_react.cloneElement)(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(IconWrapper, {\n    ...rest,\n    className: \"chakra-select__icon-wrapper\",\n    children: (0, import_react.isValidElement)(children) ? clone : null\n  });\n};\nSelectIcon.displayName = \"SelectIcon\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Select,\n  SelectField\n});","map":{"version":3,"names":["src_exports","__export","Select","SelectField","module","exports","__toCommonJS","import_form_control","require","import_system2","import_shared_utils2","split","object","keys","picked","omitted","key","value","Object","entries","includes","import_react","import_shared_utils","import_system","import_jsx_runtime","forwardRef","SelectField2","props","ref","children","placeholder","className","rest","jsxs","chakra","select","cx","jsx","displayName","import_jsx_runtime2","_a","styles","useMultiStyleConfig","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","omitThemingProps","layoutProps","otherProps","layoutPropNames","ownProps","useFormControl","rootStyles","width","position","fieldStyles","paddingEnd","field","_focus","zIndex","div","__css","SelectIcon","dataAttr","disabled","fontSize","DefaultIcon","viewBox","fill","d","IconWrapper","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","clone","cloneElement","role","focusable","style","isValidElement"],"sources":["../src/index.ts","../src/select.tsx","../../../utilities/object-utils/src/split.ts","../src/select-field.tsx"],"sourcesContent":["export { Select } from \"./select\"\nexport type { SelectProps } from \"./select\"\nexport { SelectField } from \"./select-field\"\nexport type { SelectFieldProps } from \"./select-field\"\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { dataAttr } from \"@chakra-ui/shared-utils\"\nimport { split } from \"@chakra-ui/object-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nimport { SelectField, SelectFieldProps } from \"./select-field\"\n\ninterface RootProps extends Omit<HTMLChakraProps<\"div\">, \"color\"> {}\n\ninterface SelectOptions extends FormControlOptions {\n  /**\n   * The border color when the select is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the select is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The placeholder for the select. We render an `<option/>` element that has\n   * empty value.\n   *\n   * ```jsx\n   * <option value=\"\">{placeholder}</option>\n   * ```\n   */\n  placeholder?: string\n  /**\n   * The size (width and height) of the icon\n   */\n  iconSize?: string\n  /**\n   * The color of the icon\n   */\n  iconColor?: string\n}\n\nexport interface SelectProps\n  extends SelectFieldProps,\n    ThemingProps<\"Select\">,\n    SelectOptions {\n  /**\n   * Props to forward to the root `div` element\n   */\n  rootProps?: RootProps\n  /**\n   * The icon element to use in the select\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement<any>\n}\n\n/**\n * React component used to select one item from a list of options.\n *\n * @see Docs https://chakra-ui.com/docs/components/select\n */\nexport const Select = forwardRef<SelectProps, \"select\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props)\n\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props)\n\n  const [layoutProps, otherProps] = split(rest, layoutPropNames as any[])\n\n  const ownProps = useFormControl(otherProps)\n\n  const rootStyles: SystemStyleObject = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color,\n  }\n\n  const fieldStyles: SystemStyleObject = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...(styles as any).field?.[\"_focus\"],\n    },\n  }\n\n  return (\n    <chakra.div\n      className=\"chakra-select__wrapper\"\n      __css={rootStyles}\n      {...layoutProps}\n      {...rootProps}\n    >\n      <SelectField\n        ref={ref}\n        height={h ?? height}\n        minH={minH ?? minHeight}\n        placeholder={placeholder}\n        {...ownProps}\n        __css={fieldStyles}\n      >\n        {props.children}\n      </SelectField>\n\n      <SelectIcon\n        data-disabled={dataAttr(ownProps.disabled)}\n        {...((iconColor || color) && { color: iconColor || color })}\n        __css={styles.icon}\n        {...(iconSize && { fontSize: iconSize })}\n      >\n        {icon}\n      </SelectIcon>\n    </chakra.div>\n  )\n})\n\nSelect.displayName = \"Select\"\n\nexport const DefaultIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n    />\n  </svg>\n)\n\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n  },\n})\n\ninterface SelectIconProps extends HTMLChakraProps<\"div\"> {}\n\nconst SelectIcon: React.FC<SelectIconProps> = (props) => {\n  const { children = <DefaultIcon />, ...rest } = props\n\n  const clone = cloneElement(children as any, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\",\n    },\n  })\n\n  return (\n    <IconWrapper {...rest} className=\"chakra-select__icon-wrapper\">\n      {isValidElement(children) ? clone : null}\n    </IconWrapper>\n  )\n}\n\nSelectIcon.displayName = \"SelectIcon\"\n","export function split<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keys: K[],\n) {\n  const picked: Record<string, any> = {}\n  const omitted: Record<string, any> = {}\n\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key as T[K])) picked[key] = value\n    else omitted[key] = value\n  }\n\n  return [picked, omitted] as [\n    {\n      [P in K]: T[P]\n    },\n    Omit<T, K>,\n  ]\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface SelectFieldProps\n  extends Omit<HTMLChakraProps<\"select\">, Omitted> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const SelectField = forwardRef<SelectFieldProps, \"select\">(\n  function SelectField(props, ref) {\n    const { children, placeholder, className, ...rest } = props\n\n    return (\n      <chakra.select\n        {...rest}\n        ref={ref}\n        className={cx(\"chakra-select\", className)}\n      >\n        {placeholder && <option value=\"\">{placeholder}</option>}\n        {children}\n      </chakra.select>\n    )\n  },\n)\n\nSelectField.displayName = \"SelectField\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}