{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Textarea: () => Textarea\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/textarea.tsx\nvar import_form_control = require(\"@chakra-ui/form-control\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = (0, import_system.forwardRef)((props, ref) => {\n  const styles = (0, import_system.useStyleConfig)(\"Textarea\", props);\n  const {\n    className,\n    rows,\n    ...rest\n  } = (0, import_system.omitThemingProps)(props);\n  const textareaProps = (0, import_form_control.useFormControl)(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_system.chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: (0, import_shared_utils.cx)(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Textarea\n});","map":{"version":3,"names":["src_exports","__export","Textarea","module","exports","__toCommonJS","import_form_control","require","import_system","import_shared_utils","omit","object","keysToOmit","clone","Object","assign","key","import_jsx_runtime","omitted","forwardRef","props","ref","styles","useStyleConfig","className","rows","rest","omitThemingProps","textareaProps","useFormControl","textareaStyles","jsx","chakra","textarea","cx","__css","displayName"],"sources":["../src/index.ts","../src/textarea.tsx","../../../utilities/object-utils/src/omit.ts"],"sourcesContent":["export { Textarea } from \"./textarea\"\nexport type { TextareaProps } from \"./textarea\"\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,QAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAL,WAAA;;;ACAA,IAAAM,mBAAA,GAAmDC,OAAA;AACnD,IAAAC,aAAA,GAOOD,OAAA;AACP,IAAAE,mBAAA,GAAmBF,OAAA;;;ACTZ,SAASG,KACdC,MAAA,EACAC,UAAA,GAAkB,EAAC,EACnB;EACA,MAAMC,KAAA,GAAiCC,MAAA,CAAOC,MAAA,CAAO,CAAC,GAAGJ,MAAM;EAC/D,WAAWK,GAAA,IAAOJ,UAAA,EAAY;IAC5B,IAAII,GAAA,IAAOH,KAAA,EAAO;MAChB,OAAOA,KAAA,CAAMG,GAAa;IAC5B;EACF;EACA,OAAOH,KAAA;AACT;;;ADwCI,IAAAI,kBAAA,GAAAV,OAAA;AAtBJ,IAAMW,OAAA,GAAU,CAAC,KAAK,QAAQ,UAAU,WAAW;AAY5C,IAAMhB,QAAA,OAAWM,aAAA,CAAAW,UAAA,EAAsC,CAACC,KAAA,EAAOC,GAAA,KAAQ;EAC5E,MAAMC,MAAA,OAASd,aAAA,CAAAe,cAAA,EAAe,YAAYH,KAAK;EAC/C,MAAM;IAAEI,SAAA;IAAWC,IAAA;IAAM,GAAGC;EAAK,QAAIlB,aAAA,CAAAmB,gBAAA,EAAiBP,KAAK;EAE3D,MAAMQ,aAAA,OAAgBtB,mBAAA,CAAAuB,cAAA,EAAoCH,IAAI;EAG9D,MAAMI,cAAA,GAAiBL,IAAA,GAAOf,IAAA,CAAKY,MAAA,EAAQJ,OAAO,IAAII,MAAA;EAEtD,OACE,mBAAAL,kBAAA,CAAAc,GAAA,EAACvB,aAAA,CAAAwB,MAAA,CAAOC,QAAA,EAAP;IACCZ,GAAA;IACAI,IAAA;IACC,GAAGG,aAAA;IACJJ,SAAA,MAAWf,mBAAA,CAAAyB,EAAA,EAAG,mBAAmBV,SAAS;IAC1CW,KAAA,EAAOL;EAAA,CACT;AAEJ,CAAC;AAED5B,QAAA,CAASkC,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"script"}