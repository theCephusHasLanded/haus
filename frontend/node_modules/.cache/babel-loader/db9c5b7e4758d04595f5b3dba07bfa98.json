{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Popover: () => Popover,\n  PopoverAnchor: () => PopoverAnchor,\n  PopoverArrow: () => PopoverArrow,\n  PopoverBody: () => PopoverBody,\n  PopoverCloseButton: () => PopoverCloseButton,\n  PopoverContent: () => PopoverContent,\n  PopoverFooter: () => PopoverFooter,\n  PopoverHeader: () => PopoverHeader,\n  PopoverTrigger: () => PopoverTrigger,\n  usePopover: () => usePopover,\n  usePopoverContext: () => usePopoverContext,\n  usePopoverStyles: () => usePopoverStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/popover.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\n\n// src/popover-context.ts\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar [PopoverProvider, usePopoverContext] = (0, import_react_context.createContext)({\n  name: \"PopoverContext\",\n  errorMessage: \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\"\n});\nvar [PopoverStylesProvider, usePopoverStyles] = (0, import_react_context.createContext)({\n  name: `PopoverStylesContext`,\n  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Popover />\" `\n});\n\n// src/use-popover.ts\nvar import_react_use_animation_state = require(\"@chakra-ui/react-use-animation-state\");\nvar import_react_use_focus_on_pointer_down = require(\"@chakra-ui/react-use-focus-on-pointer-down\");\nvar import_react_use_focus_effect = require(\"@chakra-ui/react-use-focus-effect\");\nvar import_react_use_disclosure = require(\"@chakra-ui/react-use-disclosure\");\nvar import_popper = require(\"@chakra-ui/popper\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_lazy_utils = require(\"@chakra-ui/lazy-utils\");\nvar import_react = require(\"react\");\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nfunction usePopover(props = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props;\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = (0, import_react_use_disclosure.useDisclosure)(props);\n  const anchorRef = (0, import_react.useRef)(null);\n  const triggerRef = (0, import_react.useRef)(null);\n  const popoverRef = (0, import_react.useRef)(null);\n  const isHoveringRef = (0, import_react.useRef)(false);\n  const hasBeenOpened = (0, import_react.useRef)(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  const [hasHeader, setHasHeader] = (0, import_react.useState)(false);\n  const [hasBody, setHasBody] = (0, import_react.useState)(false);\n  const uuid = (0, import_react.useId)();\n  const uid = id != null ? id : uuid;\n  const [triggerId, popoverId, headerId, bodyId] = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(id2 => `${id2}-${uid}`);\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = (0, import_popper.usePopper)({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount\n  });\n  const animated = (0, import_react_use_animation_state.useAnimationState)({\n    isOpen,\n    ref: popoverRef\n  });\n  (0, import_react_use_focus_on_pointer_down.useFocusOnPointerDown)({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  (0, import_react_use_focus_effect.useFocusOnHide)(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  (0, import_react_use_focus_effect.useFocusOnShow)(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  const shouldRenderChildren = (0, import_lazy_utils.lazyDisclosure)({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  const getPopoverProps = (0, import_react.useCallback)((props2 = {}, _ref = null) => {\n    const popoverProps = {\n      ...props2,\n      style: {\n        ...props2.style,\n        transformOrigin: import_popper.popperCSSVars.transformOrigin.varRef,\n        [import_popper.popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [import_popper.popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      },\n      ref: (0, import_react_use_merge_refs.mergeRefs)(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const targetIsPopover = contains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        const isValidBlur = !targetIsPopover && !targetIsTrigger;\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    };\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = (0, import_shared_utils.callAllHandlers)(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = (0, import_shared_utils.callAllHandlers)(props2.onMouseLeave, event => {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n        isHoveringRef.current = false;\n        setTimeout(() => onClose(), closeDelay);\n      });\n    }\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  const getPopoverPositionerProps = (0, import_react.useCallback)((props2 = {}, forwardedRef = null) => getPopperProps({\n    ...props2,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props2.style\n    }\n  }, forwardedRef), [isOpen, getPopperProps]);\n  const getAnchorProps = (0, import_react.useCallback)((props2, _ref = null) => {\n    return {\n      ...props2,\n      // If anchor is rendered, it is used as reference.\n      ref: (0, import_react_use_merge_refs.mergeRefs)(_ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  const openTimeout = (0, import_react.useRef)();\n  const closeTimeout = (0, import_react.useRef)();\n  const maybeReferenceRef = (0, import_react.useCallback)(node => {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  const getTriggerProps = (0, import_react.useCallback)((props2 = {}, _ref = null) => {\n    const triggerProps = {\n      ...props2,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    };\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = (0, import_shared_utils.callAllHandlers)(props2.onClick, onToggle);\n    }\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = (0, import_shared_utils.callAllHandlers)(props2.onFocus, () => {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = (0, import_shared_utils.callAllHandlers)(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const isValidBlur = !contains(popoverRef.current, relatedTarget);\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = (0, import_shared_utils.callAllHandlers)(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(() => onOpen(), openDelay);\n      });\n      triggerProps.onMouseLeave = (0, import_shared_utils.callAllHandlers)(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  (0, import_react.useEffect)(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  const getHeaderProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    id: headerId,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, node => {\n      setHasHeader(!!node);\n    })\n  }), [headerId]);\n  const getBodyProps = (0, import_react.useCallback)((props2 = {}, ref = null) => ({\n    ...props2,\n    id: bodyId,\n    ref: (0, import_react_use_merge_refs.mergeRefs)(ref, node => {\n      setHasBody(!!node);\n    })\n  }), [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\nfunction getRelatedTarget(event) {\n  var _a;\n  const activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\n\n// src/popover.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction Popover(props) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"Popover\", props);\n  const {\n    children,\n    ...rest\n  } = (0, import_system.omitThemingProps)(props);\n  const theme = (0, import_system.useTheme)();\n  const context = usePopover({\n    ...rest,\n    direction: theme.direction\n  });\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopoverProvider, {\n    value: context,\n    children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(PopoverStylesProvider, {\n      value: styles,\n      children: (0, import_shared_utils2.runIfFn)(children, {\n        isOpen: context.isOpen,\n        onClose: context.onClose,\n        forceUpdate: context.forceUpdate\n      })\n    })\n  });\n}\nPopover.displayName = \"Popover\";\n\n// src/popover-anchor.tsx\nvar import_react2 = require(\"react\");\nfunction PopoverAnchor(props) {\n  const child = import_react2.Children.only(props.children);\n  const {\n    getAnchorProps\n  } = usePopoverContext();\n  return (0, import_react2.cloneElement)(child, getAnchorProps(child.props, child.ref));\n}\nPopoverAnchor.displayName = \"PopoverAnchor\";\n\n// src/popover-arrow.tsx\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils3 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar resolveVar = (scale, value) => value ? `${scale}.${value}, ${value}` : void 0;\nfunction PopoverArrow(props) {\n  var _a;\n  const {\n    bg,\n    bgColor,\n    backgroundColor,\n    shadow,\n    boxShadow,\n    shadowColor\n  } = props;\n  const {\n    getArrowProps,\n    getArrowInnerProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  const arrowBg = (_a = bg != null ? bg : bgColor) != null ? _a : backgroundColor;\n  const arrowShadow = shadow != null ? shadow : boxShadow;\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n    ...getArrowProps(),\n    className: \"chakra-popover__arrow-positioner\",\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system2.chakra.div, {\n      className: (0, import_shared_utils3.cx)(\"chakra-popover__arrow\", props.className),\n      ...getArrowInnerProps(props),\n      __css: {\n        \"--popper-arrow-shadow-color\": resolveVar(\"colors\", shadowColor),\n        \"--popper-arrow-bg\": resolveVar(\"colors\", arrowBg),\n        \"--popper-arrow-shadow\": resolveVar(\"shadows\", arrowShadow),\n        ...styles.arrow\n      }\n    })\n  });\n}\nPopoverArrow.displayName = \"PopoverArrow\";\n\n// src/popover-body.tsx\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils4 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime3 = require(\"react/jsx-runtime\");\nvar PopoverBody = (0, import_system3.forwardRef)(function PopoverBody2(props, ref) {\n  const {\n    getBodyProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime3.jsx)(import_system3.chakra.div, {\n    ...getBodyProps(props, ref),\n    className: (0, import_shared_utils4.cx)(\"chakra-popover__body\", props.className),\n    __css: styles.body\n  });\n});\nPopoverBody.displayName = \"PopoverBody\";\n\n// src/popover-close-button.tsx\nvar import_close_button = require(\"@chakra-ui/close-button\");\nvar import_system4 = require(\"@chakra-ui/system\");\nvar import_shared_utils5 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime4 = require(\"react/jsx-runtime\");\nvar PopoverCloseButton = (0, import_system4.forwardRef)(function PopoverCloseButton2(props, ref) {\n  const {\n    onClose\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime4.jsx)(import_close_button.CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    className: (0, import_shared_utils5.cx)(\"chakra-popover__close-btn\", props.className),\n    __css: styles.closeButton,\n    ref,\n    ...props\n  });\n});\nPopoverCloseButton.displayName = \"PopoverCloseButton\";\n\n// src/popover-content.tsx\nvar import_shared_utils6 = require(\"@chakra-ui/shared-utils\");\nvar import_system6 = require(\"@chakra-ui/system\");\n\n// src/popover-transition.tsx\nvar import_system5 = require(\"@chakra-ui/system\");\nvar import_framer_motion = require(\"framer-motion\");\nvar import_jsx_runtime5 = require(\"react/jsx-runtime\");\nfunction mergeVariants(variants) {\n  if (!variants) return;\n  return {\n    enter: {\n      ...variants.enter,\n      visibility: \"visible\"\n    },\n    exit: {\n      ...variants.exit,\n      transitionEnd: {\n        visibility: \"hidden\"\n      }\n    }\n  };\n}\nvar scaleFade = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1]\n    }\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1]\n    }\n  }\n};\nvar MotionSection = (0, import_system5.chakra)(import_framer_motion.motion.section);\nvar PopoverTransition = (0, import_system5.forwardRef)(function PopoverTransition2(props, ref) {\n  const {\n    variants = scaleFade,\n    ...rest\n  } = props;\n  const {\n    isOpen\n  } = usePopoverContext();\n  return /* @__PURE__ */(0, import_jsx_runtime5.jsx)(MotionSection, {\n    ref,\n    variants: mergeVariants(variants),\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\",\n    ...rest\n  });\n});\nPopoverTransition.displayName = \"PopoverTransition\";\n\n// src/popover-content.tsx\nvar import_jsx_runtime6 = require(\"react/jsx-runtime\");\nvar PopoverContent = (0, import_system6.forwardRef)(function PopoverContent2(props, ref) {\n  const {\n    rootProps,\n    motionProps,\n    ...contentProps\n  } = props;\n  const {\n    getPopoverProps,\n    getPopoverPositionerProps,\n    onAnimationComplete\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  const contentStyles = {\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    ...styles.content\n  };\n  return /* @__PURE__ */(0, import_jsx_runtime6.jsx)(import_system6.chakra.div, {\n    ...getPopoverPositionerProps(rootProps),\n    __css: styles.popper,\n    className: \"chakra-popover__popper\",\n    children: /* @__PURE__ */(0, import_jsx_runtime6.jsx)(PopoverTransition, {\n      ...motionProps,\n      ...getPopoverProps(contentProps, ref),\n      onAnimationComplete: (0, import_shared_utils6.callAll)(onAnimationComplete, contentProps.onAnimationComplete),\n      className: (0, import_shared_utils6.cx)(\"chakra-popover__content\", props.className),\n      __css: contentStyles\n    })\n  });\n});\nPopoverContent.displayName = \"PopoverContent\";\n\n// src/popover-footer.tsx\nvar import_system7 = require(\"@chakra-ui/system\");\nvar import_shared_utils7 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime7 = require(\"react/jsx-runtime\");\nfunction PopoverFooter(props) {\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime7.jsx)(import_system7.chakra.footer, {\n    ...props,\n    className: (0, import_shared_utils7.cx)(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  });\n}\nPopoverFooter.displayName = \"PopoverFooter\";\n\n// src/popover-header.tsx\nvar import_system8 = require(\"@chakra-ui/system\");\nvar import_shared_utils8 = require(\"@chakra-ui/shared-utils\");\nvar import_jsx_runtime8 = require(\"react/jsx-runtime\");\nvar PopoverHeader = (0, import_system8.forwardRef)(function PopoverHeader2(props, ref) {\n  const {\n    getHeaderProps\n  } = usePopoverContext();\n  const styles = usePopoverStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime8.jsx)(import_system8.chakra.header, {\n    ...getHeaderProps(props, ref),\n    className: (0, import_shared_utils8.cx)(\"chakra-popover__header\", props.className),\n    __css: styles.header\n  });\n});\nPopoverHeader.displayName = \"PopoverHeader\";\n\n// src/popover-trigger.tsx\nvar import_react3 = require(\"react\");\nfunction PopoverTrigger(props) {\n  const child = import_react3.Children.only(props.children);\n  const {\n    getTriggerProps\n  } = usePopoverContext();\n  return (0, import_react3.cloneElement)(child, getTriggerProps(child.props, child.ref));\n}\nPopoverTrigger.displayName = \"PopoverTrigger\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Popover,\n  PopoverAnchor,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverFooter,\n  PopoverHeader,\n  PopoverTrigger,\n  usePopover,\n  usePopoverContext,\n  usePopoverStyles\n});","map":{"version":3,"names":["src_exports","__export","Popover","PopoverAnchor","PopoverArrow","PopoverBody","PopoverCloseButton","PopoverContent","PopoverFooter","PopoverHeader","PopoverTrigger","usePopover","usePopoverContext","usePopoverStyles","module","exports","__toCommonJS","import_system","require","import_shared_utils2","import_react_context","PopoverProvider","createContext","name","errorMessage","PopoverStylesProvider","import_react_use_animation_state","import_react_use_focus_on_pointer_down","import_react_use_focus_effect","import_react_use_disclosure","import_popper","import_react_use_merge_refs","import_shared_utils","import_lazy_utils","import_react","TRIGGER","click","hover","props","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","computePositionOnMount","popperProps","isOpen","onClose","onOpen","onToggle","useDisclosure","anchorRef","useRef","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","useState","hasBody","setHasBody","uuid","useId","uid","triggerId","popoverId","headerId","bodyId","map","id2","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","usePopper","enabled","animated","useAnimationState","ref","useFocusOnPointerDown","useFocusOnHide","focusRef","visible","shouldFocus","useFocusOnShow","shouldRenderChildren","lazyDisclosure","wasSelected","mode","isSelected","present","getPopoverProps","useCallback","props2","_ref","popoverProps","style","transformOrigin","popperCSSVars","varRef","var","mergeRefs","children","tabIndex","role","onKeyDown","callAllHandlers","event","key","onBlur","relatedTarget","getRelatedTarget","targetIsPopover","contains","targetIsTrigger","isValidBlur","onMouseEnter","onMouseLeave","nativeEvent","setTimeout","getPopoverPositionerProps","forwardedRef","visibility","getAnchorProps","openTimeout","closeTimeout","maybeReferenceRef","node","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","useEffect","getHeaderProps","getBodyProps","onAnimationComplete","onComplete","parent","child","_a","activeEl","currentTarget","ownerDocument","activeElement","import_jsx_runtime","styles","useMultiStyleConfig","rest","omitThemingProps","theme","useTheme","context","direction","jsx","value","runIfFn","displayName","import_react2","Children","only","cloneElement","import_system2","import_shared_utils3","import_jsx_runtime2","resolveVar","scale","bg","bgColor","backgroundColor","shadow","boxShadow","shadowColor","arrowBg","arrowShadow","chakra","div","className","cx","__css","arrow","import_system3","import_shared_utils4","import_jsx_runtime3","forwardRef","PopoverBody2","body","import_close_button","import_system4","import_shared_utils5","import_jsx_runtime4","PopoverCloseButton2","CloseButton","size","closeButton","import_shared_utils6","import_system6","import_system5","import_framer_motion","import_jsx_runtime5","mergeVariants","variants","enter","exit","transitionEnd","scaleFade","opacity","transition","duration","ease","MotionSection","motion","section","PopoverTransition","PopoverTransition2","initial","animate","import_jsx_runtime6","PopoverContent2","rootProps","motionProps","contentProps","contentStyles","position","display","flexDirection","content","popper","callAll","import_system7","import_shared_utils7","import_jsx_runtime7","footer","import_system8","import_shared_utils8","import_jsx_runtime8","PopoverHeader2","header","import_react3"],"sources":["../src/index.ts","../src/popover.tsx","../src/popover-context.ts","../src/use-popover.ts","../src/popover-anchor.tsx","../src/popover-arrow.tsx","../src/popover-body.tsx","../src/popover-close-button.tsx","../src/popover-content.tsx","../src/popover-transition.tsx","../src/popover-footer.tsx","../src/popover-header.tsx","../src/popover-trigger.tsx"],"sourcesContent":["export { Popover } from \"./popover\"\nexport type { PopoverProps } from \"./popover\"\nexport {\n  usePopover,\n  type UsePopoverProps,\n  type UsePopoverReturn,\n} from \"./use-popover\"\nexport { PopoverAnchor } from \"./popover-anchor\"\nexport { PopoverArrow } from \"./popover-arrow\"\nexport type { PopoverArrowProps } from \"./popover-arrow\"\nexport { PopoverBody } from \"./popover-body\"\nexport type { PopoverBodyProps } from \"./popover-body\"\nexport {\n  PopoverCloseButton,\n  type PopoverCloseButtonProps,\n} from \"./popover-close-button\"\nexport { PopoverContent } from \"./popover-content\"\nexport type { PopoverContentProps } from \"./popover-content\"\nexport { PopoverFooter } from \"./popover-footer\"\nexport type { PopoverFooterProps } from \"./popover-footer\"\nexport { PopoverHeader } from \"./popover-header\"\nexport type { PopoverHeaderProps } from \"./popover-header\"\nexport { PopoverTrigger } from \"./popover-trigger\"\nexport { usePopoverStyles, usePopoverContext } from \"./popover-context\"\n","import { MaybeRenderProp } from \"@chakra-ui/react-types\"\nimport {\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { PopoverProvider, PopoverStylesProvider } from \"./popover-context\"\nimport { usePopover, UsePopoverProps } from \"./use-popover\"\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n *\n * @see Docs https://chakra-ui.com/docs/components/popover\n */\nexport function Popover(props: PopoverProps) {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const theme = useTheme()\n  const context = usePopover({ ...rest, direction: theme.direction })\n\n  return (\n    <PopoverProvider value={context}>\n      <PopoverStylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </PopoverStylesProvider>\n    </PopoverProvider>\n  )\n}\n\nPopover.displayName = \"Popover\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\nimport { UsePopoverReturn } from \"./use-popover\"\n\nexport const [PopoverProvider, usePopoverContext] =\n  createContext<UsePopoverReturn>({\n    name: \"PopoverContext\",\n    errorMessage:\n      \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n  })\n\nexport const [PopoverStylesProvider, usePopoverStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `PopoverStylesContext`,\n  errorMessage: `usePopoverStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Popover />\" `,\n})\n","import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note 🚨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n","import { Children, cloneElement } from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n/**\n * PopoverAnchor is element that is used as the positioning reference\n * for the popover.\n */\n\nexport function PopoverAnchor(props: React.PropsWithChildren<{}>) {\n  // enforce a single child\n  const child: any = Children.only(props.children)\n  const { getAnchorProps } = usePopoverContext()\n\n  return cloneElement(child, getAnchorProps(child.props, child.ref))\n}\n\nPopoverAnchor.displayName = \"PopoverAnchor\"\n","import { chakra, HTMLChakraProps, SystemProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The color of the arrow's shadow\n   */\n  shadowColor?: SystemProps[\"color\"]\n}\n\nconst resolveVar = (scale: string, value: unknown) =>\n  value ? `${scale}.${value}, ${value}` : undefined\n\nexport function PopoverArrow(props: PopoverArrowProps) {\n  const { bg, bgColor, backgroundColor, shadow, boxShadow, shadowColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = usePopoverStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  const arrowShadow = shadow ?? boxShadow\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          \"--popper-arrow-shadow-color\": resolveVar(\"colors\", shadowColor),\n          \"--popper-arrow-bg\": resolveVar(\"colors\", arrowBg),\n          \"--popper-arrow-shadow\": resolveVar(\"shadows\", arrowShadow),\n          ...styles.arrow,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nPopoverArrow.displayName = \"PopoverArrow\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { getBodyProps } = usePopoverContext()\n\n    const styles = usePopoverStyles()\n\n    return (\n      <chakra.div\n        {...getBodyProps(props, ref)}\n        className={cx(\"chakra-popover__body\", props.className)}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nPopoverBody.displayName = \"PopoverBody\"\n","import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { forwardRef } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  function PopoverCloseButton(props, ref) {\n    const { onClose } = usePopoverContext()\n    const styles = usePopoverStyles()\n    return (\n      <CloseButton\n        size=\"sm\"\n        onClick={onClose}\n        className={cx(\"chakra-popover__close-btn\", props.className)}\n        __css={styles.closeButton}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\n\nPopoverCloseButton.displayName = \"PopoverCloseButton\"\n","import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { HTMLMotionProps } from \"framer-motion\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const { rootProps, motionProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps, onAnimationComplete } =\n      usePopoverContext()\n\n    const styles = usePopoverStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...motionProps}\n          {...getPopoverProps(contentProps, ref)}\n          onAnimationComplete={callAll(\n            onAnimationComplete,\n            contentProps.onAnimationComplete,\n          )}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nPopoverContent.displayName = \"PopoverContent\"\n","import { chakra, HTMLChakraProps, forwardRef } from \"@chakra-ui/system\"\nimport { HTMLMotionProps, motion, Variant } from \"framer-motion\"\nimport React from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\ntype HTMLMotionChakraProps<T extends keyof React.ReactHTML> = Omit<\n  HTMLChakraProps<T>,\n  keyof HTMLMotionProps<T>\n> &\n  Omit<\n    HTMLMotionProps<T>,\n    | \"style\"\n    | \"onDrag\"\n    | \"onDragEnd\"\n    | \"onDragStart\"\n    | \"onAnimationStart\"\n    | \"variants\"\n    | \"transition\"\n    | \"children\"\n  > & {\n    variants?: MotionVariants\n  }\n\ntype MotionVariants = Partial<Record<\"enter\" | \"exit\", Variant>>\n\nfunction mergeVariants(variants?: MotionVariants): any {\n  if (!variants) return\n  return {\n    enter: {\n      ...variants.enter,\n      visibility: \"visible\",\n    },\n    exit: {\n      ...variants.exit,\n      transitionEnd: {\n        visibility: \"hidden\",\n      },\n    },\n  }\n}\n\nconst scaleFade: MotionVariants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst MotionSection = chakra(motion.section)\n\nexport interface PopoverTransitionProps\n  extends HTMLMotionChakraProps<\"section\"> {}\n\nexport const PopoverTransition = forwardRef(function PopoverTransition(\n  props: PopoverTransitionProps,\n  ref: React.Ref<any>,\n) {\n  const { variants = scaleFade, ...rest } = props\n  const { isOpen } = usePopoverContext()\n  return (\n    <MotionSection\n      ref={ref}\n      variants={mergeVariants(variants)}\n      initial={false}\n      animate={isOpen ? \"enter\" : \"exit\"}\n      {...rest}\n    />\n  )\n})\n\nPopoverTransition.displayName = \"PopoverTransition\"\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport function PopoverFooter(props: PopoverFooterProps) {\n  const styles = usePopoverStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nPopoverFooter.displayName = \"PopoverFooter\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content, and it is first announced by screenreaders.\n */\n\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  function PopoverHeader(props, ref) {\n    const { getHeaderProps } = usePopoverContext()\n\n    const styles = usePopoverStyles()\n\n    return (\n      <chakra.header\n        {...getHeaderProps(props, ref)}\n        className={cx(\"chakra-popover__header\", props.className)}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nPopoverHeader.displayName = \"PopoverHeader\"\n","import { Children, cloneElement } from \"react\"\nimport { usePopoverContext } from \"./popover-context\"\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\nexport function PopoverTrigger(props: { children: React.ReactNode }) {\n  // enforce a single child\n  const child: any = Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA;AAAAC,QAAA,CAAAD,WAAA;EAAAE,OAAA,EAAAA,CAAA,KAAAA,OAAA;EAAAC,aAAA,EAAAA,CAAA,KAAAA,aAAA;EAAAC,YAAA,EAAAA,CAAA,KAAAA,YAAA;EAAAC,WAAA,EAAAA,CAAA,KAAAA,WAAA;EAAAC,kBAAA,EAAAA,CAAA,KAAAA,kBAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,aAAA,EAAAA,CAAA,KAAAA,aAAA;EAAAC,aAAA,EAAAA,CAAA,KAAAA,aAAA;EAAAC,cAAA,EAAAA,CAAA,KAAAA,cAAA;EAAAC,UAAA,EAAAA,CAAA,KAAAA,UAAA;EAAAC,iBAAA,EAAAA,CAAA,KAAAA,iBAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA;AAAA;AAAAC,MAAA,CAAAC,OAAA,GAAAC,YAAA,CAAAhB,WAAA;;;ACCA,IAAAiB,aAAA,GAKOC,OAAA;AACP,IAAAC,oBAAA,GAAwBD,OAAA;;;ACPxB,IAAAE,oBAAA,GAA8BF,OAAA;AAIvB,IAAM,CAACG,eAAA,EAAiBT,iBAAiB,QAC9CQ,oBAAA,CAAAE,aAAA,EAAgC;EAC9BC,IAAA,EAAM;EACNC,YAAA,EACE;AACJ,CAAC;AAEI,IAAM,CAACC,qBAAA,EAAuBZ,gBAAgB,QAAIO,oBAAA,CAAAE,aAAA,EAEvD;EACAC,IAAA,EAAM;EACNC,YAAA,EAAc;AAChB,CAAC;;;AChBD,IAAAE,gCAAA,GAAkCR,OAAA;AAClC,IAAAS,sCAAA,GAAsCT,OAAA;AACtC,IAAAU,6BAAA,GAGOV,OAAA;AACP,IAAAW,2BAAA,GAA8BX,OAAA;AAC9B,IAAAY,aAAA,GAAyDZ,OAAA;AAEzD,IAAAa,2BAAA,GAA0Bb,OAAA;AAC1B,IAAAc,mBAAA,GAAgCd,OAAA;AAChC,IAAAe,iBAAA,GAAyCf,OAAA;AACzC,IAAAgB,YAAA,GAAgEhB,OAAA;AAEhE,IAAMiB,OAAA,GAAU;EACdC,KAAA,EAAO;EACPC,KAAA,EAAO;AACT;AAuHO,SAAS1B,WAAW2B,KAAA,GAAyB,CAAC,GAAG;EACtD,MAAM;IACJC,WAAA,GAAc;IACdC,UAAA,GAAa;IACbC,eAAA;IACAC,EAAA;IACAC,kBAAA,GAAqB;IACrBC,SAAA,GAAY;IACZC,SAAA;IACAC,gBAAA;IACAC,OAAA,GAAUZ,OAAA,CAAQC,KAAA;IAClBY,SAAA,GAAY;IACZC,UAAA,GAAa;IACbC,MAAA;IACAC,YAAA,GAAe;IACfC,sBAAA;IACA,GAAGC;EACL,IAAIf,KAAA;EAEJ,MAAM;IAAEgB,MAAA;IAAQC,OAAA;IAASC,MAAA;IAAQC;EAAS,QAAI5B,2BAAA,CAAA6B,aAAA,EAAcpB,KAAK;EAEjE,MAAMqB,SAAA,OAAYzB,YAAA,CAAA0B,MAAA,EAAoB,IAAI;EAC1C,MAAMC,UAAA,OAAa3B,YAAA,CAAA0B,MAAA,EAAoB,IAAI;EAC3C,MAAME,UAAA,OAAa5B,YAAA,CAAA0B,MAAA,EAAoB,IAAI;EAE3C,MAAMG,aAAA,OAAgB7B,YAAA,CAAA0B,MAAA,EAAO,KAAK;EAElC,MAAMI,aAAA,OAAgB9B,YAAA,CAAA0B,MAAA,EAAO,KAAK;EAClC,IAAIN,MAAA,EAAQ;IACVU,aAAA,CAAcC,OAAA,GAAU;EAC1B;EAEA,MAAM,CAACC,SAAA,EAAWC,YAAY,QAAIjC,YAAA,CAAAkC,QAAA,EAAS,KAAK;EAChD,MAAM,CAACC,OAAA,EAASC,UAAU,QAAIpC,YAAA,CAAAkC,QAAA,EAAS,KAAK;EAE5C,MAAMG,IAAA,OAAOrC,YAAA,CAAAsC,KAAA,EAAM;EACnB,MAAMC,GAAA,GAAM/B,EAAA,WAAAA,EAAA,GAAM6B,IAAA;EAClB,MAAM,CAACG,SAAA,EAAWC,SAAA,EAAWC,QAAA,EAAUC,MAAM,IAAI,CAC/C,mBACA,mBACA,kBACA,eACF,CAAEC,GAAA,CAAKC,GAAA,IAAO,GAAGA,GAAE,IAAIN,GAAG,EAAE;EAE5B,MAAM;IACJO,YAAA;IACAC,aAAA;IACAC,cAAA;IACAC,kBAAA;IACAC;EACF,QAAItD,aAAA,CAAAuD,SAAA,EAAU;IACZ,GAAGhC,WAAA;IACHiC,OAAA,EAAShC,MAAA,IAAU,CAAC,CAACF;EACvB,CAAC;EAED,MAAMmC,QAAA,OAAW7D,gCAAA,CAAA8D,iBAAA,EAAkB;IAAElC,MAAA;IAAQmC,GAAA,EAAK3B;EAAW,CAAC;EAE9D,IAAAnC,sCAAA,CAAA+D,qBAAA,EAAsB;IACpBJ,OAAA,EAAShC,MAAA;IACTmC,GAAA,EAAK5B;EACP,CAAC;EAED,IAAAjC,6BAAA,CAAA+D,cAAA,EAAe7B,UAAA,EAAY;IACzB8B,QAAA,EAAU/B,UAAA;IACVgC,OAAA,EAASvC,MAAA;IACTwC,WAAA,EAAanD,kBAAA,IAAsBI,OAAA,KAAYZ,OAAA,CAAQC;EACzD,CAAC;EAED,IAAAR,6BAAA,CAAAmE,cAAA,EAAejC,UAAA,EAAY;IACzB8B,QAAA,EAAUnD,eAAA;IACVoD,OAAA,EAASvC,MAAA;IACTwC,WAAA,EAAalD,SAAA,IAAaG,OAAA,KAAYZ,OAAA,CAAQC;EAChD,CAAC;EAED,MAAM4D,oBAAA,OAAuB/D,iBAAA,CAAAgE,cAAA,EAAe;IAC1CC,WAAA,EAAalC,aAAA,CAAcC,OAAA;IAC3BqB,OAAA,EAASpC,MAAA;IACTiD,IAAA,EAAMhD,YAAA;IACNiD,UAAA,EAAYb,QAAA,CAASc;EACvB,CAAC;EAED,MAAMC,eAAA,OAA8BpE,YAAA,CAAAqE,WAAA,EAClC,CAACC,MAAA,GAAQ,CAAC,GAAGC,IAAA,GAAO,SAAS;IAC3B,MAAMC,YAAA,GAA8B;MAClC,GAAGF,MAAA;MACHG,KAAA,EAAO;QACL,GAAGH,MAAA,CAAMG,KAAA;QACTC,eAAA,EAAiB9E,aAAA,CAAA+E,aAAA,CAAcD,eAAA,CAAgBE,MAAA;QAC/C,CAAChF,aAAA,CAAA+E,aAAA,CAAchE,SAAA,CAAUkE,GAAG,GAAGlE,SAAA,GAC3B,GAAGA,SAAS,OACZ;QACJ,CAACf,aAAA,CAAA+E,aAAA,CAAc/D,gBAAA,CAAiBiE,GAAG,GAAGjE;MACxC;MACA2C,GAAA,MAAK1D,2BAAA,CAAAiF,SAAA,EAAUlD,UAAA,EAAY2C,IAAI;MAC/BQ,QAAA,EAAUjB,oBAAA,GAAuBQ,MAAA,CAAMS,QAAA,GAAW;MAClDvE,EAAA,EAAIiC,SAAA;MACJuC,QAAA,EAAU;MACVC,IAAA,EAAM;MACNC,SAAA,MAAWpF,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMY,SAAA,EAAYE,KAAA,IAAU;QACrD,IAAI9E,UAAA,IAAc8E,KAAA,CAAMC,GAAA,KAAQ,UAAU;UACxChE,OAAA,CAAQ;QACV;MACF,CAAC;MACDiE,MAAA,MAAQxF,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMgB,MAAA,EAASF,KAAA,IAAU;QAC/C,MAAMG,aAAA,GAAgBC,gBAAA,CAAiBJ,KAAK;QAC5C,MAAMK,eAAA,GAAkBC,QAAA,CAAS9D,UAAA,CAAWG,OAAA,EAASwD,aAAa;QAClE,MAAMI,eAAA,GAAkBD,QAAA,CAAS/D,UAAA,CAAWI,OAAA,EAASwD,aAAa;QAElE,MAAMK,WAAA,GAAc,CAACH,eAAA,IAAmB,CAACE,eAAA;QAEzC,IAAIvE,MAAA,IAAUf,WAAA,IAAeuF,WAAA,EAAa;UACxCvE,OAAA,CAAQ;QACV;MACF,CAAC;MACD,mBAAmBW,SAAA,GAAYU,QAAA,GAAW;MAC1C,oBAAoBP,OAAA,GAAUQ,MAAA,GAAS;IACzC;IAEA,IAAI9B,OAAA,KAAYZ,OAAA,CAAQE,KAAA,EAAO;MAC7BqE,YAAA,CAAaS,IAAA,GAAO;MACpBT,YAAA,CAAaqB,YAAA,OAAe/F,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMuB,YAAA,EAAc,MAAM;QACpEhE,aAAA,CAAcE,OAAA,GAAU;MAC1B,CAAC;MACDyC,YAAA,CAAasB,YAAA,OAAehG,mBAAA,CAAAqF,eAAA,EAC1Bb,MAAA,CAAMwB,YAAA,EACLV,KAAA,IAAU;QAET,IAAIA,KAAA,CAAMW,WAAA,CAAYR,aAAA,KAAkB,MAAM;UAC5C;QACF;QACA1D,aAAA,CAAcE,OAAA,GAAU;QACxBiE,UAAA,CAAW,MAAM3E,OAAA,CAAQ,GAAGN,UAAU;MACxC,CACF;IACF;IAEA,OAAOyD,YAAA;EACT,GACA,CACEV,oBAAA,EACArB,SAAA,EACAT,SAAA,EACAU,QAAA,EACAP,OAAA,EACAQ,MAAA,EACA9B,OAAA,EACAP,UAAA,EACAe,OAAA,EACAD,MAAA,EACAf,WAAA,EACAU,UAAA,EACAH,gBAAA,EACAD,SAAA,CAEJ;EAEA,MAAMsF,yBAAA,OAAwCjG,YAAA,CAAAqE,WAAA,EAC5C,CAACC,MAAA,GAAQ,CAAC,GAAG4B,YAAA,GAAe,SAC1BlD,cAAA,CACE;IACE,GAAGsB,MAAA;IACHG,KAAA,EAAO;MACL0B,UAAA,EAAY/E,MAAA,GAAS,YAAY;MACjC,GAAGkD,MAAA,CAAMG;IACX;EACF,GACAyB,YACF,GACF,CAAC9E,MAAA,EAAQ4B,cAAc,CACzB;EAEA,MAAMoD,cAAA,OAA6BpG,YAAA,CAAAqE,WAAA,EACjC,CAACC,MAAA,EAAOC,IAAA,GAAO,SAAS;IACtB,OAAO;MACL,GAAGD,MAAA;MAAA;MAEHf,GAAA,MAAK1D,2BAAA,CAAAiF,SAAA,EAAUP,IAAA,EAAM9C,SAAA,EAAWqB,YAAY;IAC9C;EACF,GACA,CAACrB,SAAA,EAAWqB,YAAY,CAC1B;EAEA,MAAMuD,WAAA,OAAcrG,YAAA,CAAA0B,MAAA,EAAe;EACnC,MAAM4E,YAAA,OAAetG,YAAA,CAAA0B,MAAA,EAAe;EAEpC,MAAM6E,iBAAA,OAAoBvG,YAAA,CAAAqE,WAAA,EACvBmC,IAAA,IAAkB;IAEjB,IAAI/E,SAAA,CAAUM,OAAA,IAAW,MAAM;MAC7Be,YAAA,CAAa0D,IAAI;IACnB;EACF,GACA,CAAC1D,YAAY,CACf;EAEA,MAAM2D,eAAA,OAA8BzG,YAAA,CAAAqE,WAAA,EAClC,CAACC,MAAA,GAAQ,CAAC,GAAGC,IAAA,GAAO,SAAS;IAC3B,MAAMmC,YAAA,GAA8B;MAClC,GAAGpC,MAAA;MACHf,GAAA,MAAK1D,2BAAA,CAAAiF,SAAA,EAAUnD,UAAA,EAAY4C,IAAA,EAAMgC,iBAAiB;MAClD/F,EAAA,EAAIgC,SAAA;MACJ,iBAAiB;MACjB,iBAAiBpB,MAAA;MACjB,iBAAiBqB;IACnB;IAEA,IAAI5B,OAAA,KAAYZ,OAAA,CAAQC,KAAA,EAAO;MAC7BwG,YAAA,CAAaC,OAAA,OAAU7G,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMqC,OAAA,EAASpF,QAAQ;IAChE;IAEA,IAAIV,OAAA,KAAYZ,OAAA,CAAQE,KAAA,EAAO;MAO7BuG,YAAA,CAAaE,OAAA,OAAU9G,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMsC,OAAA,EAAS,MAAM;QAE1D,IAAIP,WAAA,CAAYtE,OAAA,KAAY,QAAW;UACrCT,MAAA,CAAO;QACT;MACF,CAAC;MACDoF,YAAA,CAAapB,MAAA,OAASxF,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMgB,MAAA,EAASF,KAAA,IAAU;QAC7D,MAAMG,aAAA,GAAgBC,gBAAA,CAAiBJ,KAAK;QAC5C,MAAMQ,WAAA,GAAc,CAACF,QAAA,CAAS9D,UAAA,CAAWG,OAAA,EAASwD,aAAa;QAE/D,IAAInE,MAAA,IAAUf,WAAA,IAAeuF,WAAA,EAAa;UACxCvE,OAAA,CAAQ;QACV;MACF,CAAC;MAMDqF,YAAA,CAAaxB,SAAA,OAAYpF,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMY,SAAA,EAAYE,KAAA,IAAU;QACnE,IAAIA,KAAA,CAAMC,GAAA,KAAQ,UAAU;UAC1BhE,OAAA,CAAQ;QACV;MACF,CAAC;MAEDqF,YAAA,CAAab,YAAA,OAAe/F,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMuB,YAAA,EAAc,MAAM;QACpEhE,aAAA,CAAcE,OAAA,GAAU;QACxBsE,WAAA,CAAYtE,OAAA,GAAU8E,MAAA,CAAOb,UAAA,CAAW,MAAM1E,MAAA,CAAO,GAAGR,SAAS;MACnE,CAAC;MAED4F,YAAA,CAAaZ,YAAA,OAAehG,mBAAA,CAAAqF,eAAA,EAAgBb,MAAA,CAAMwB,YAAA,EAAc,MAAM;QACpEjE,aAAA,CAAcE,OAAA,GAAU;QAExB,IAAIsE,WAAA,CAAYtE,OAAA,EAAS;UACvB+E,YAAA,CAAaT,WAAA,CAAYtE,OAAO;UAChCsE,WAAA,CAAYtE,OAAA,GAAU;QACxB;QAEAuE,YAAA,CAAavE,OAAA,GAAU8E,MAAA,CAAOb,UAAA,CAAW,MAAM;UAC7C,IAAInE,aAAA,CAAcE,OAAA,KAAY,OAAO;YACnCV,OAAA,CAAQ;UACV;QACF,GAAGN,UAAU;MACf,CAAC;IACH;IAEA,OAAO2F,YAAA;EACT,GACA,CACElE,SAAA,EACApB,MAAA,EACAqB,SAAA,EACA5B,OAAA,EACA0F,iBAAA,EACAhF,QAAA,EACAD,MAAA,EACAjB,WAAA,EACAgB,OAAA,EACAP,SAAA,EACAC,UAAA,CAEJ;EAEA,IAAAf,YAAA,CAAA+G,SAAA,EAAU,MAAM;IACd,OAAO,MAAM;MACX,IAAIV,WAAA,CAAYtE,OAAA,EAAS;QACvB+E,YAAA,CAAaT,WAAA,CAAYtE,OAAO;MAClC;MACA,IAAIuE,YAAA,CAAavE,OAAA,EAAS;QACxB+E,YAAA,CAAaR,YAAA,CAAavE,OAAO;MACnC;IACF;EACF,GAAG,EAAE;EAEL,MAAMiF,cAAA,OAA6BhH,YAAA,CAAAqE,WAAA,EACjC,CAACC,MAAA,GAAQ,CAAC,GAAGf,GAAA,GAAM,UAAU;IAC3B,GAAGe,MAAA;IACH9D,EAAA,EAAIkC,QAAA;IACJa,GAAA,MAAK1D,2BAAA,CAAAiF,SAAA,EAAUvB,GAAA,EAAMiD,IAAA,IAA6B;MAChDvE,YAAA,CAAa,CAAC,CAACuE,IAAI;IACrB,CAAC;EACH,IACA,CAAC9D,QAAQ,CACX;EAEA,MAAMuE,YAAA,OAA2BjH,YAAA,CAAAqE,WAAA,EAC/B,CAACC,MAAA,GAAQ,CAAC,GAAGf,GAAA,GAAM,UAAU;IAC3B,GAAGe,MAAA;IACH9D,EAAA,EAAImC,MAAA;IACJY,GAAA,MAAK1D,2BAAA,CAAAiF,SAAA,EAAUvB,GAAA,EAAMiD,IAAA,IAAS;MAC5BpE,UAAA,CAAW,CAAC,CAACoE,IAAI;IACnB,CAAC;EACH,IACA,CAAC7D,MAAM,CACT;EAEA,OAAO;IACLO,WAAA;IACA9B,MAAA;IACA8F,mBAAA,EAAqB7D,QAAA,CAAS8D,UAAA;IAC9B9F,OAAA;IACA+E,cAAA;IACArD,aAAA;IACAE,kBAAA;IACAgD,yBAAA;IACA7B,eAAA;IACAqC,eAAA;IACAO,cAAA;IACAC;EACF;AACF;AAIA,SAASvB,SAAS0B,MAAA,EAA4BC,KAAA,EAA2B;EACvE,OAAOD,MAAA,KAAWC,KAAA,KAASD,MAAA,oBAAAA,MAAA,CAAQ1B,QAAA,CAAS2B,KAAA;AAC9C;AAEA,SAAS7B,iBAAiBJ,KAAA,EAAyB;EAvdnD,IAAAkC,EAAA;EAwdE,MAAMC,QAAA,GAAWnC,KAAA,CAAMoC,aAAA,CAAcC,aAAA,CAAcC,aAAA;EACnD,QAAQJ,EAAA,GAAAlC,KAAA,CAAMG,aAAA,KAAN,OAAA+B,EAAA,GAAuBC,QAAA;AACjC;;;AFpbM,IAAAI,kBAAA,GAAA3I,OAAA;AATC,SAAShB,QAAQoC,KAAA,EAAqB;EAC3C,MAAMwH,MAAA,OAAS7I,aAAA,CAAA8I,mBAAA,EAAoB,WAAWzH,KAAK;EAEnD,MAAM;IAAE2E,QAAA;IAAU,GAAG+C;EAAK,QAAI/I,aAAA,CAAAgJ,gBAAA,EAAiB3H,KAAK;EACpD,MAAM4H,KAAA,OAAQjJ,aAAA,CAAAkJ,QAAA,EAAS;EACvB,MAAMC,OAAA,GAAUzJ,UAAA,CAAW;IAAE,GAAGqJ,IAAA;IAAMK,SAAA,EAAWH,KAAA,CAAMG;EAAU,CAAC;EAElE,OACE,mBAAAR,kBAAA,CAAAS,GAAA,EAACjJ,eAAA;IAAgBkJ,KAAA,EAAOH,OAAA;IACtBnD,QAAA,qBAAA4C,kBAAA,CAAAS,GAAA,EAAC7I,qBAAA;MAAsB8I,KAAA,EAAOT,MAAA;MAC3B7C,QAAA,MAAA9F,oBAAA,CAAAqJ,OAAA,EAAQvD,QAAA,EAAU;QACjB3D,MAAA,EAAQ8G,OAAA,CAAQ9G,MAAA;QAChBC,OAAA,EAAS6G,OAAA,CAAQ7G,OAAA;QACjB6B,WAAA,EAAagF,OAAA,CAAQhF;MACvB,CAAC;IAAA,CACH;EAAA,CACF;AAEJ;AAEAlF,OAAA,CAAQuK,WAAA,GAAc;;;AGjDtB,IAAAC,aAAA,GAAuCxJ,OAAA;AAQhC,SAASf,cAAcmC,KAAA,EAAoC;EAEhE,MAAMiH,KAAA,GAAamB,aAAA,CAAAC,QAAA,CAASC,IAAA,CAAKtI,KAAA,CAAM2E,QAAQ;EAC/C,MAAM;IAAEqB;EAAe,IAAI1H,iBAAA,CAAkB;EAE7C,WAAO8J,aAAA,CAAAG,YAAA,EAAatB,KAAA,EAAOjB,cAAA,CAAeiB,KAAA,CAAMjH,KAAA,EAAOiH,KAAA,CAAM9D,GAAG,CAAC;AACnE;AAEAtF,aAAA,CAAcsK,WAAA,GAAc;;;AChB5B,IAAAK,cAAA,GAAqD5J,OAAA;AACrD,IAAA6J,oBAAA,GAAmB7J,OAAA;AAwBb,IAAA8J,mBAAA,GAAA9J,OAAA;AAdN,IAAM+J,UAAA,GAAaA,CAACC,KAAA,EAAeX,KAAA,KACjCA,KAAA,GAAQ,GAAGW,KAAK,IAAIX,KAAK,KAAKA,KAAK,KAAK;AAEnC,SAASnK,aAAakC,KAAA,EAA0B;EAdvD,IAAAkH,EAAA;EAeE,MAAM;IAAE2B,EAAA;IAAIC,OAAA;IAASC,eAAA;IAAiBC,MAAA;IAAQC,SAAA;IAAWC;EAAY,IAAIlJ,KAAA;EACzE,MAAM;IAAE2C,aAAA;IAAeE;EAAmB,IAAIvE,iBAAA,CAAkB;EAChE,MAAMkJ,MAAA,GAASjJ,gBAAA,CAAiB;EAChC,MAAM4K,OAAA,IAAUjC,EAAA,GAAA2B,EAAA,WAAAA,EAAA,GAAMC,OAAA,KAAN,OAAA5B,EAAA,GAAiB6B,eAAA;EACjC,MAAMK,WAAA,GAAcJ,MAAA,WAAAA,MAAA,GAAUC,SAAA;EAC9B,OACE,mBAAAP,mBAAA,CAAAV,GAAA,EAACQ,cAAA,CAAAa,MAAA,CAAOC,GAAA,EAAP;IACE,GAAG3G,aAAA,CAAc;IAClB4G,SAAA,EAAU;IAEV5E,QAAA,qBAAA+D,mBAAA,CAAAV,GAAA,EAACQ,cAAA,CAAAa,MAAA,CAAOC,GAAA,EAAP;MACCC,SAAA,MAAWd,oBAAA,CAAAe,EAAA,EAAG,yBAAyBxJ,KAAA,CAAMuJ,SAAS;MACrD,GAAG1G,kBAAA,CAAmB7C,KAAK;MAC5ByJ,KAAA,EAAO;QACL,+BAA+Bd,UAAA,CAAW,UAAUO,WAAW;QAC/D,qBAAqBP,UAAA,CAAW,UAAUQ,OAAO;QACjD,yBAAyBR,UAAA,CAAW,WAAWS,WAAW;QAC1D,GAAG5B,MAAA,CAAOkC;MACZ;IAAA,CACF;EAAA,CACF;AAEJ;AAEA5L,YAAA,CAAaqK,WAAA,GAAc;;;ACvC3B,IAAAwB,cAAA,GAAoD/K,OAAA;AACpD,IAAAgL,oBAAA,GAAmBhL,OAAA;AAgBb,IAAAiL,mBAAA,GAAAjL,OAAA;AAPC,IAAMb,WAAA,OAAc4L,cAAA,CAAAG,UAAA,EACzB,SAASC,aAAY/J,KAAA,EAAOmD,GAAA,EAAK;EAC/B,MAAM;IAAE0D;EAAa,IAAIvI,iBAAA,CAAkB;EAE3C,MAAMkJ,MAAA,GAASjJ,gBAAA,CAAiB;EAEhC,OACE,mBAAAsL,mBAAA,CAAA7B,GAAA,EAAC2B,cAAA,CAAAN,MAAA,CAAOC,GAAA,EAAP;IACE,GAAGzC,YAAA,CAAa7G,KAAA,EAAOmD,GAAG;IAC3BoG,SAAA,MAAWK,oBAAA,CAAAJ,EAAA,EAAG,wBAAwBxJ,KAAA,CAAMuJ,SAAS;IACrDE,KAAA,EAAOjC,MAAA,CAAOwC;EAAA,CAChB;AAEJ,CACF;AAEAjM,WAAA,CAAYoK,WAAA,GAAc;;;AC1B1B,IAAA8B,mBAAA,GAA8CrL,OAAA;AAC9C,IAAAsL,cAAA,GAA2BtL,OAAA;AAC3B,IAAAuL,oBAAA,GAAmBvL,OAAA;AAUb,IAAAwL,mBAAA,GAAAxL,OAAA;AALC,IAAMZ,kBAAA,OAAqBkM,cAAA,CAAAJ,UAAA,EAChC,SAASO,oBAAmBrK,KAAA,EAAOmD,GAAA,EAAK;EACtC,MAAM;IAAElC;EAAQ,IAAI3C,iBAAA,CAAkB;EACtC,MAAMkJ,MAAA,GAASjJ,gBAAA,CAAiB;EAChC,OACE,mBAAA6L,mBAAA,CAAApC,GAAA,EAACiC,mBAAA,CAAAK,WAAA;IACCC,IAAA,EAAK;IACLhE,OAAA,EAAStF,OAAA;IACTsI,SAAA,MAAWY,oBAAA,CAAAX,EAAA,EAAG,6BAA6BxJ,KAAA,CAAMuJ,SAAS;IAC1DE,KAAA,EAAOjC,MAAA,CAAOgD,WAAA;IACdrH,GAAA;IACC,GAAGnD;EAAA,CACN;AAEJ,CACF;AAEAhC,kBAAA,CAAmBmK,WAAA,GAAc;;;ACxBjC,IAAAsC,oBAAA,GAA4B7L,OAAA;AAC5B,IAAA8L,cAAA,GAKO9L,OAAA;;;ACNP,IAAA+L,cAAA,GAAoD/L,OAAA;AACpD,IAAAgM,oBAAA,GAAiDhM,OAAA;AAuE7C,IAAAiM,mBAAA,GAAAjM,OAAA;AA/CJ,SAASkM,cAAcC,QAAA,EAAgC;EACrD,IAAI,CAACA,QAAA,EAAU;EACf,OAAO;IACLC,KAAA,EAAO;MACL,GAAGD,QAAA,CAASC,KAAA;MACZjF,UAAA,EAAY;IACd;IACAkF,IAAA,EAAM;MACJ,GAAGF,QAAA,CAASE,IAAA;MACZC,aAAA,EAAe;QACbnF,UAAA,EAAY;MACd;IACF;EACF;AACF;AAEA,IAAMoF,SAAA,GAA4B;EAChCF,IAAA,EAAM;IACJG,OAAA,EAAS;IACTxC,KAAA,EAAO;IACPyC,UAAA,EAAY;MACVC,QAAA,EAAU;MACVC,IAAA,EAAM,CAAC,KAAK,GAAG,GAAG,CAAC;IACrB;EACF;EACAP,KAAA,EAAO;IACLpC,KAAA,EAAO;IACPwC,OAAA,EAAS;IACTC,UAAA,EAAY;MACVC,QAAA,EAAU;MACVC,IAAA,EAAM,CAAC,GAAG,GAAG,KAAK,CAAC;IACrB;EACF;AACF;AAEA,IAAMC,aAAA,OAAgBb,cAAA,CAAAtB,MAAA,EAAOuB,oBAAA,CAAAa,MAAA,CAAOC,OAAO;AAKpC,IAAMC,iBAAA,OAAoBhB,cAAA,CAAAb,UAAA,EAAW,SAAS8B,mBACnD5L,KAAA,EACAmD,GAAA,EACA;EACA,MAAM;IAAE4H,QAAA,GAAWI,SAAA;IAAW,GAAGzD;EAAK,IAAI1H,KAAA;EAC1C,MAAM;IAAEgB;EAAO,IAAI1C,iBAAA,CAAkB;EACrC,OACE,mBAAAuM,mBAAA,CAAA7C,GAAA,EAACwD,aAAA;IACCrI,GAAA;IACA4H,QAAA,EAAUD,aAAA,CAAcC,QAAQ;IAChCc,OAAA,EAAS;IACTC,OAAA,EAAS9K,MAAA,GAAS,UAAU;IAC3B,GAAG0G;EAAA,CACN;AAEJ,CAAC;AAEDiE,iBAAA,CAAkBxD,WAAA,GAAc;;;AD7CxB,IAAA4D,mBAAA,GAAAnN,OAAA;AArBD,IAAMX,cAAA,OAAiByM,cAAA,CAAAZ,UAAA,EAC5B,SAASkC,gBAAehM,KAAA,EAAOmD,GAAA,EAAK;EAClC,MAAM;IAAE8I,SAAA;IAAWC,WAAA;IAAa,GAAGC;EAAa,IAAInM,KAAA;EAEpD,MAAM;IAAEgE,eAAA;IAAiB6B,yBAAA;IAA2BiB;EAAoB,IACtExI,iBAAA,CAAkB;EAEpB,MAAMkJ,MAAA,GAASjJ,gBAAA,CAAiB;EAChC,MAAM6N,aAAA,GAAmC;IACvCC,QAAA,EAAU;IACVC,OAAA,EAAS;IACTC,aAAA,EAAe;IACf,GAAG/E,MAAA,CAAOgF;EACZ;EAEA,OACE,mBAAAT,mBAAA,CAAA/D,GAAA,EAAC0C,cAAA,CAAArB,MAAA,CAAOC,GAAA,EAAP;IACE,GAAGzD,yBAAA,CAA0BoG,SAAS;IACvCxC,KAAA,EAAOjC,MAAA,CAAOiF,MAAA;IACdlD,SAAA,EAAU;IAEV5E,QAAA,qBAAAoH,mBAAA,CAAA/D,GAAA,EAAC2D,iBAAA;MACE,GAAGO,WAAA;MACH,GAAGlI,eAAA,CAAgBmI,YAAA,EAAchJ,GAAG;MACrC2D,mBAAA,MAAqB2D,oBAAA,CAAAiC,OAAA,EACnB5F,mBAAA,EACAqF,YAAA,CAAarF,mBACf;MACAyC,SAAA,MAAWkB,oBAAA,CAAAjB,EAAA,EAAG,2BAA2BxJ,KAAA,CAAMuJ,SAAS;MACxDE,KAAA,EAAO2C;IAAA,CACT;EAAA,CACF;AAEJ,CACF;AAEAnO,cAAA,CAAekK,WAAA,GAAc;;;AEpD7B,IAAAwE,cAAA,GAAwC/N,OAAA;AACxC,IAAAgO,oBAAA,GAAmBhO,OAAA;AAQf,IAAAiO,mBAAA,GAAAjO,OAAA;AAHG,SAASV,cAAc8B,KAAA,EAA2B;EACvD,MAAMwH,MAAA,GAASjJ,gBAAA,CAAiB;EAChC,OACE,mBAAAsO,mBAAA,CAAA7E,GAAA,EAAC2E,cAAA,CAAAtD,MAAA,CAAOyD,MAAA,EAAP;IACE,GAAG9M,KAAA;IACJuJ,SAAA,MAAWqD,oBAAA,CAAApD,EAAA,EAAG,0BAA0BxJ,KAAA,CAAMuJ,SAAS;IACvDE,KAAA,EAAOjC,MAAA,CAAOsF;EAAA,CAChB;AAEJ;AAEA5O,aAAA,CAAciK,WAAA,GAAc;;;ACjB5B,IAAA4E,cAAA,GAAoDnO,OAAA;AACpD,IAAAoO,oBAAA,GAAmBpO,OAAA;AAgBb,IAAAqO,mBAAA,GAAArO,OAAA;AAPC,IAAMT,aAAA,OAAgB4O,cAAA,CAAAjD,UAAA,EAC3B,SAASoD,eAAclN,KAAA,EAAOmD,GAAA,EAAK;EACjC,MAAM;IAAEyD;EAAe,IAAItI,iBAAA,CAAkB;EAE7C,MAAMkJ,MAAA,GAASjJ,gBAAA,CAAiB;EAEhC,OACE,mBAAA0O,mBAAA,CAAAjF,GAAA,EAAC+E,cAAA,CAAA1D,MAAA,CAAO8D,MAAA,EAAP;IACE,GAAGvG,cAAA,CAAe5G,KAAA,EAAOmD,GAAG;IAC7BoG,SAAA,MAAWyD,oBAAA,CAAAxD,EAAA,EAAG,0BAA0BxJ,KAAA,CAAMuJ,SAAS;IACvDE,KAAA,EAAOjC,MAAA,CAAO2F;EAAA,CAChB;AAEJ,CACF;AAEAhP,aAAA,CAAcgK,WAAA,GAAc;;;AC1B5B,IAAAiF,aAAA,GAAuCxO,OAAA;AAQhC,SAASR,eAAe4B,KAAA,EAAsC;EAEnE,MAAMiH,KAAA,GAAamG,aAAA,CAAA/E,QAAA,CAASC,IAAA,CAAKtI,KAAA,CAAM2E,QAAQ;EAC/C,MAAM;IAAE0B;EAAgB,IAAI/H,iBAAA,CAAkB;EAC9C,WAAO8O,aAAA,CAAA7E,YAAA,EAAatB,KAAA,EAAOZ,eAAA,CAAgBY,KAAA,CAAMjH,KAAA,EAAOiH,KAAA,CAAM9D,GAAG,CAAC;AACpE;AAEA/E,cAAA,CAAe+J,WAAA,GAAc","ignoreList":[]},"metadata":{},"sourceType":"script"}