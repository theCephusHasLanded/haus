{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  NumberDecrementStepper: () => NumberDecrementStepper,\n  NumberIncrementStepper: () => NumberIncrementStepper,\n  NumberInput: () => NumberInput,\n  NumberInputField: () => NumberInputField,\n  NumberInputStepper: () => NumberInputStepper,\n  useNumberInput: () => useNumberInput,\n  useNumberInputStyles: () => useNumberInputStyles\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/number-input.tsx\nvar import_form_control = require(\"@chakra-ui/form-control\");\nvar import_react_context = require(\"@chakra-ui/react-context\");\nvar import_system = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_react4 = require(\"react\");\n\n// src/icons.tsx\nvar import_icon = require(\"@chakra-ui/icon\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nvar TriangleDownIcon = props => /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_icon.Icon, {\n  viewBox: \"0 0 24 24\",\n  ...props,\n  children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"path\", {\n    fill: \"currentColor\",\n    d: \"M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z\"\n  })\n});\nvar TriangleUpIcon = props => /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_icon.Icon, {\n  viewBox: \"0 0 24 24\",\n  ...props,\n  children: /* @__PURE__ */(0, import_jsx_runtime.jsx)(\"path\", {\n    fill: \"currentColor\",\n    d: \"M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z\"\n  })\n});\n\n// src/use-number-input.ts\nvar import_counter = require(\"@chakra-ui/counter\");\nvar import_react_use_event_listener = require(\"@chakra-ui/react-use-event-listener\");\nvar import_react_use_update_effect = require(\"@chakra-ui/react-use-update-effect\");\nvar import_react_use_safe_layout_effect = require(\"@chakra-ui/react-use-safe-layout-effect\");\nvar import_react_use_callback_ref = require(\"@chakra-ui/react-use-callback-ref\");\nvar import_react_use_merge_refs = require(\"@chakra-ui/react-use-merge-refs\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nvar import_react3 = require(\"react\");\n\n// src/use-attr-observer.ts\nvar import_react = require(\"react\");\nfunction useAttributeObserver(ref, attributes, fn, enabled) {\n  (0, import_react.useEffect)(() => {\n    var _a;\n    if (!ref.current || !enabled) return;\n    const win = (_a = ref.current.ownerDocument.defaultView) != null ? _a : window;\n    const attrs = Array.isArray(attributes) ? attributes : [attributes];\n    const obs = new win.MutationObserver(changes => {\n      for (const change of changes) {\n        if (change.type === \"attributes\" && change.attributeName && attrs.includes(change.attributeName)) {\n          fn(change);\n        }\n      }\n    });\n    obs.observe(ref.current, {\n      attributes: true,\n      attributeFilter: attrs\n    });\n    return () => obs.disconnect();\n  });\n}\n\n// src/use-spinner.ts\nvar import_react_use_interval = require(\"@chakra-ui/react-use-interval\");\nvar import_react2 = require(\"react\");\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\nvar CONTINUOUS_CHANGE_DELAY = 300;\nfunction useSpinner(increment, decrement) {\n  const [isSpinning, setIsSpinning] = (0, import_react2.useState)(false);\n  const [action, setAction] = (0, import_react2.useState)(null);\n  const [runOnce, setRunOnce] = (0, import_react2.useState)(true);\n  const timeoutRef = (0, import_react2.useRef)(null);\n  const removeTimeout = () => clearTimeout(timeoutRef.current);\n  (0, import_react_use_interval.useInterval)(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);\n  const up = (0, import_react2.useCallback)(() => {\n    if (runOnce) {\n      increment();\n    }\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]);\n  const down = (0, import_react2.useCallback)(() => {\n    if (runOnce) {\n      decrement();\n    }\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]);\n  const stop = (0, import_react2.useCallback)(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  (0, import_react2.useEffect)(() => {\n    return () => removeTimeout();\n  }, []);\n  return {\n    up,\n    down,\n    stop,\n    isSpinning\n  };\n}\n\n// src/use-number-input.ts\nvar FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\nfunction isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\nfunction isValidNumericKeyboardEvent(event, isValid) {\n  if (event.key == null) return true;\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n  const isSingleCharacterKey = event.key.length === 1;\n  if (!isSingleCharacterKey || isModifierKey) return true;\n  return isValid(event.key);\n}\nfunction useNumberInput(props = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props;\n  const onFocus = (0, import_react_use_callback_ref.useCallbackRef)(onFocusProp);\n  const onBlur = (0, import_react_use_callback_ref.useCallbackRef)(onBlurProp);\n  const onInvalid = (0, import_react_use_callback_ref.useCallbackRef)(onInvalidProp);\n  const isValidCharacter = (0, import_react_use_callback_ref.useCallbackRef)(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);\n  const getAriaValueText = (0, import_react_use_callback_ref.useCallbackRef)(getAriaValueTextProp);\n  const counter = (0, import_counter.useCounter)(props);\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  const [isFocused, setFocused] = (0, import_react3.useState)(false);\n  const isInteractive = !(isReadOnly || isDisabled);\n  const inputRef = (0, import_react3.useRef)(null);\n  const inputSelectionRef = (0, import_react3.useRef)(null);\n  const incrementButtonRef = (0, import_react3.useRef)(null);\n  const decrementButtonRef = (0, import_react3.useRef)(null);\n  const sanitize = (0, import_react3.useCallback)(value => value.split(\"\").filter(isValidCharacter).join(\"\"), [isValidCharacter]);\n  const parse = (0, import_react3.useCallback)(value => {\n    var _a;\n    return (_a = parseValue == null ? void 0 : parseValue(value)) != null ? _a : value;\n  }, [parseValue]);\n  const format = (0, import_react3.useCallback)(value => {\n    var _a;\n    return ((_a = formatValue == null ? void 0 : formatValue(value)) != null ? _a : value).toString();\n  }, [formatValue]);\n  (0, import_react_use_update_effect.useUpdateEffect)(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    } else if (counter.valueAsNumber < min) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid]);\n  (0, import_react_use_safe_layout_effect.useSafeLayoutEffect)(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.value != counter.value;\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value);\n      counter.setValue(sanitize(parsedInput));\n    }\n  }, [parse, sanitize]);\n  const increment = (0, import_react3.useCallback)((step = stepProp) => {\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  const decrement = (0, import_react3.useCallback)((step = stepProp) => {\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  const spinner = useSpinner(increment, decrement);\n  useAttributeObserver(incrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  useAttributeObserver(decrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  const onChange = (0, import_react3.useCallback)(event => {\n    const evt = event.nativeEvent;\n    if (evt.isComposing) return;\n    const parsedInput = parse(event.currentTarget.value);\n    updateFn(sanitize(parsedInput));\n    inputSelectionRef.current = {\n      start: event.currentTarget.selectionStart,\n      end: event.currentTarget.selectionEnd\n    };\n  }, [updateFn, sanitize, parse]);\n  const _onFocus = (0, import_react3.useCallback)(event => {\n    var _a, _b, _c;\n    onFocus == null ? void 0 : onFocus(event);\n    if (!inputSelectionRef.current) return;\n    event.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = event.currentTarget.value) == null ? void 0 : _a.length;\n    event.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : event.currentTarget.selectionStart;\n  }, [onFocus]);\n  const onKeyDown = (0, import_react3.useCallback)(event => {\n    if (event.nativeEvent.isComposing) return;\n    if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n      event.preventDefault();\n    }\n    const stepFactor = getStepFactor(event) * stepProp;\n    const eventKey = event.key;\n    const keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [isValidCharacter, stepProp, increment, decrement, updateFn, min, max]);\n  const getStepFactor = event => {\n    let ratio = 1;\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n    return ratio;\n  };\n  const ariaValueText = (0, import_react3.useMemo)(() => {\n    const text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n    if (text != null) return text;\n    const defaultText = counter.value.toString();\n    return !defaultText ? void 0 : defaultText;\n  }, [counter.value, getAriaValueText]);\n  const validateAndClamp = (0, import_react3.useCallback)(() => {\n    let next = counter.value;\n    if (counter.value === \"\") return;\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString());\n    if (valueStartsWithE) {\n      counter.setValue(\"\");\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min;\n      }\n      if (counter.valueAsNumber > max) {\n        next = max;\n      }\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  const onInputBlur = (0, import_react3.useCallback)(() => {\n    setFocused(false);\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  const focusInput = (0, import_react3.useCallback)(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        var _a;\n        (_a = inputRef.current) == null ? void 0 : _a.focus();\n      });\n    }\n  }, [focusInputOnChange]);\n  const spinUp = (0, import_react3.useCallback)(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  const spinDown = (0, import_react3.useCallback)(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  (0, import_react_use_event_listener.useEventListener)(() => inputRef.current, \"wheel\", event => {\n    var _a, _b;\n    const doc = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n    const isInputFocused = doc.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    const stepFactor = getStepFactor(event) * stepProp;\n    const direction = Math.sign(event.deltaY);\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, {\n    passive: false\n  });\n  const getIncrementButtonProps = (0, import_react3.useCallback)((props2 = {}, ref = null) => {\n    const disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return {\n      ...props2,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(ref, incrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: (0, import_shared_utils.callAllHandlers)(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinUp(event);\n      }),\n      onPointerLeave: (0, import_shared_utils.callAllHandlers)(props2.onPointerLeave, spinner.stop),\n      onPointerUp: (0, import_shared_utils.callAllHandlers)(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": (0, import_shared_utils.ariaAttr)(disabled)\n    };\n  }, [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  const getDecrementButtonProps = (0, import_react3.useCallback)((props2 = {}, ref = null) => {\n    const disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return {\n      ...props2,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(ref, decrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: (0, import_shared_utils.callAllHandlers)(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinDown(event);\n      }),\n      onPointerLeave: (0, import_shared_utils.callAllHandlers)(props2.onPointerLeave, spinner.stop),\n      onPointerUp: (0, import_shared_utils.callAllHandlers)(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": (0, import_shared_utils.ariaAttr)(disabled)\n    };\n  }, [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  const getInputProps = (0, import_react3.useCallback)((props2 = {}, ref = null) => {\n    var _a, _b, _c, _d;\n    return {\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props2,\n      readOnly: (_a = props2.readOnly) != null ? _a : isReadOnly,\n      \"aria-readonly\": (_b = props2.readOnly) != null ? _b : isReadOnly,\n      \"aria-required\": (_c = props2.required) != null ? _c : isRequired,\n      required: (_d = props2.required) != null ? _d : isRequired,\n      ref: (0, import_react_use_merge_refs.mergeRefs)(inputRef, ref),\n      value: format(counter.value),\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? void 0 : counter.valueAsNumber,\n      \"aria-invalid\": (0, import_shared_utils.ariaAttr)(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: (0, import_shared_utils.callAllHandlers)(props2.onChange, onChange),\n      onKeyDown: (0, import_shared_utils.callAllHandlers)(props2.onKeyDown, onKeyDown),\n      onFocus: (0, import_shared_utils.callAllHandlers)(props2.onFocus, _onFocus, () => setFocused(true)),\n      onBlur: (0, import_shared_utils.callAllHandlers)(props2.onBlur, onBlur, onInputBlur)\n    };\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, format, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, _onFocus, onBlur, onInputBlur]);\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}\n\n// src/number-input.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nvar [NumberInputStylesProvider, useNumberInputStyles] = (0, import_react_context.createContext)({\n  name: `NumberInputStylesContext`,\n  errorMessage: `useNumberInputStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<NumberInput />\" `\n});\nvar [NumberInputProvider, useNumberInputContext] = (0, import_react_context.createContext)({\n  name: \"NumberInputContext\",\n  errorMessage: \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\"\n});\nvar NumberInput = (0, import_system.forwardRef)(function NumberInput2(props, ref) {\n  const styles = (0, import_system.useMultiStyleConfig)(\"NumberInput\", props);\n  const ownProps = (0, import_system.omitThemingProps)(props);\n  const controlProps = (0, import_form_control.useFormControlProps)(ownProps);\n  const {\n    htmlProps,\n    ...context\n  } = useNumberInput(controlProps);\n  const ctx = (0, import_react4.useMemo)(() => context, [context]);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(NumberInputProvider, {\n    value: ctx,\n    children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(NumberInputStylesProvider, {\n      value: styles,\n      children: /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system.chakra.div, {\n        ...htmlProps,\n        ref,\n        className: (0, import_shared_utils2.cx)(\"chakra-numberinput\", props.className),\n        __css: {\n          position: \"relative\",\n          zIndex: 0,\n          ...styles.root\n        }\n      })\n    })\n  });\n});\nNumberInput.displayName = \"NumberInput\";\nvar NumberInputStepper = (0, import_system.forwardRef)(function NumberInputStepper2(props, ref) {\n  const styles = useNumberInputStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system.chakra.div, {\n    \"aria-hidden\": true,\n    ref,\n    ...props,\n    __css: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"absolute\",\n      top: \"0\",\n      insetEnd: \"0px\",\n      margin: \"1px\",\n      height: \"calc(100% - 2px)\",\n      zIndex: 1,\n      ...styles.stepperGroup\n    }\n  });\n});\nNumberInputStepper.displayName = \"NumberInputStepper\";\nvar NumberInputField = (0, import_system.forwardRef)(function NumberInputField2(props, ref) {\n  const {\n    getInputProps\n  } = useNumberInputContext();\n  const input = getInputProps(props, ref);\n  const styles = useNumberInputStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(import_system.chakra.input, {\n    ...input,\n    className: (0, import_shared_utils2.cx)(\"chakra-numberinput__field\", props.className),\n    __css: {\n      width: \"100%\",\n      ...styles.field\n    }\n  });\n});\nNumberInputField.displayName = \"NumberInputField\";\nvar StyledStepper = (0, import_system.chakra)(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transitionProperty: \"common\",\n    transitionDuration: \"normal\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\"\n  }\n});\nvar NumberDecrementStepper = (0, import_system.forwardRef)(function NumberDecrementStepper2(props, ref) {\n  var _a;\n  const styles = useNumberInputStyles();\n  const {\n    getDecrementButtonProps\n  } = useNumberInputContext();\n  const decrement = getDecrementButtonProps(props, ref);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(StyledStepper, {\n    ...decrement,\n    __css: styles.stepper,\n    children: (_a = props.children) != null ? _a : /* @__PURE__ */(0, import_jsx_runtime2.jsx)(TriangleDownIcon, {})\n  });\n});\nNumberDecrementStepper.displayName = \"NumberDecrementStepper\";\nvar NumberIncrementStepper = (0, import_system.forwardRef)(function NumberIncrementStepper2(props, ref) {\n  var _a;\n  const {\n    getIncrementButtonProps\n  } = useNumberInputContext();\n  const increment = getIncrementButtonProps(props, ref);\n  const styles = useNumberInputStyles();\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(StyledStepper, {\n    ...increment,\n    __css: styles.stepper,\n    children: (_a = props.children) != null ? _a : /* @__PURE__ */(0, import_jsx_runtime2.jsx)(TriangleUpIcon, {})\n  });\n});\nNumberIncrementStepper.displayName = \"NumberIncrementStepper\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  useNumberInput,\n  useNumberInputStyles\n});","map":{"version":3,"names":["src_exports","__export","NumberDecrementStepper","NumberIncrementStepper","NumberInput","NumberInputField","NumberInputStepper","useNumberInput","useNumberInputStyles","module","exports","__toCommonJS","import_form_control","require","import_react_context","import_system","import_shared_utils2","import_react4","import_icon","import_jsx_runtime","TriangleDownIcon","props","jsx","Icon","viewBox","children","fill","d","TriangleUpIcon","import_counter","import_react_use_event_listener","import_react_use_update_effect","import_react_use_safe_layout_effect","import_react_use_callback_ref","import_react_use_merge_refs","import_shared_utils","import_react3","import_react","useAttributeObserver","ref","attributes","fn","enabled","useEffect","_a","current","win","ownerDocument","defaultView","window","attrs","Array","isArray","obs","MutationObserver","changes","change","type","attributeName","includes","observe","attributeFilter","disconnect","import_react_use_interval","import_react2","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","useState","action","setAction","runOnce","setRunOnce","timeoutRef","useRef","removeTimeout","clearTimeout","useInterval","up","useCallback","setTimeout","down","stop","FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","isValid","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","step","stepProp","isReadOnly","isDisabled","isRequired","isInvalid","pattern","inputMode","allowMouseWheel","id","onChange","_","precision","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onFocusProp","onBlur","onBlurProp","onInvalid","onInvalidProp","getAriaValueText","getAriaValueTextProp","isValidCharacter","isValidCharacterProp","format","formatValue","parse","parseValue","htmlProps","useCallbackRef","counter","useCounter","update","updateFn","incrementFn","decrementFn","isFocused","setFocused","isInteractive","inputRef","inputSelectionRef","incrementButtonRef","decrementButtonRef","sanitize","value","split","filter","join","toString","useUpdateEffect","valueAsNumber","useSafeLayoutEffect","notInSync","parsedInput","setValue","spinner","evt","nativeEvent","isComposing","currentTarget","start","selectionStart","end","selectionEnd","_onFocus","_b","_c","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","ratio","shiftKey","ariaValueText","useMemo","text","defaultText","validateAndClamp","next","valueStartsWithE","cast","onInputBlur","focusInput","requestAnimationFrame","focus","spinUp","spinDown","useEventListener","doc","document","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","props2","disabled","isAtMax","mergeRefs","role","tabIndex","onPointerDown","callAllHandlers","button","onPointerLeave","onPointerUp","ariaAttr","getDecrementButtonProps","isAtMin","getInputProps","_d","readOnly","required","isNaN","isOutOfRange","autoComplete","autoCorrect","import_jsx_runtime2","NumberInputStylesProvider","createContext","errorMessage","NumberInputProvider","useNumberInputContext","forwardRef","NumberInput2","styles","useMultiStyleConfig","ownProps","omitThemingProps","controlProps","useFormControlProps","context","ctx","chakra","div","className","cx","__css","position","zIndex","root","displayName","NumberInputStepper2","display","flexDirection","top","insetEnd","margin","height","stepperGroup","NumberInputField2","input","width","field","StyledStepper","baseStyle","justifyContent","alignItems","flex","transitionProperty","transitionDuration","userSelect","cursor","lineHeight","NumberDecrementStepper2","stepper","NumberIncrementStepper2"],"sources":["../src/index.ts","../src/number-input.tsx","../src/icons.tsx","../src/use-number-input.ts","../src/use-attr-observer.ts","../src/use-spinner.ts"],"sourcesContent":["export {\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  useNumberInputStyles,\n} from \"./number-input\"\nexport type {\n  NumberDecrementStepperProps,\n  NumberIncrementStepperProps,\n  NumberInputFieldProps,\n  NumberInputProps,\n  NumberInputStepperProps,\n} from \"./number-input\"\nexport { useNumberInput } from \"./use-number-input\"\nexport type {\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n","import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\nconst [NumberInputStylesProvider, useNumberInputStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `NumberInputStylesContext`,\n  errorMessage: `useNumberInputStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<NumberInput />\" `,\n})\n\nexport { useNumberInputStyles }\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [NumberInputProvider, useNumberInputContext] =\n  createContext<NumberInputContext>({\n    name: \"NumberInputContext\",\n    errorMessage:\n      \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n  })\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps<\"NumberInput\">,\n    InputOptions,\n    Omit<HTMLChakraProps<\"div\">, keyof UseNumberInputProps> {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">(\n  function NumberInput(props, ref) {\n    const styles = useMultiStyleConfig(\"NumberInput\", props)\n\n    const ownProps = omitThemingProps(props)\n    const controlProps = useFormControlProps(ownProps)\n\n    const { htmlProps, ...context } = useNumberInput(controlProps)\n    const ctx = useMemo(() => context, [context])\n\n    return (\n      <NumberInputProvider value={ctx}>\n        <NumberInputStylesProvider value={styles}>\n          <chakra.div\n            {...htmlProps}\n            ref={ref}\n            className={cx(\"chakra-numberinput\", props.className)}\n            __css={{\n              position: \"relative\",\n              zIndex: 0,\n              ...styles.root,\n            }}\n          />\n        </NumberInputStylesProvider>\n      </NumberInputProvider>\n    )\n  },\n)\n\nNumberInput.displayName = \"NumberInput\"\n\nexport interface NumberInputStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  function NumberInputStepper(props, ref) {\n    const styles = useNumberInputStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          insetEnd: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nNumberInputStepper.displayName = \"NumberInputStepper\"\n\nexport interface NumberInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  function NumberInputField(props, ref) {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useNumberInputStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        className={cx(\"chakra-numberinput__field\", props.className)}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nNumberInputField.displayName = \"NumberInputField\"\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transitionProperty: \"common\",\n    transitionDuration: \"normal\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>(function NumberDecrementStepper(props, ref) {\n  const styles = useNumberInputStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nNumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n\nexport interface NumberIncrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>(function NumberIncrementStepper(props, ref) {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useNumberInputStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nNumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\n\nexport const TriangleDownIcon: React.FC<IconProps> = (props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z\"\n    />\n  </Icon>\n)\n\nexport const TriangleUpIcon: React.FC<IconProps> = (props) => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z\"\n    />\n  </Icon>\n)\n","import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useMemo, useRef, useState } from \"react\"\nimport { useAttributeObserver } from \"./use-attr-observer\"\nimport { useSpinner } from \"./use-spinner\"\n\nconst FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nfunction isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\nfunction isValidNumericKeyboardEvent(\n  event: React.KeyboardEvent,\n  isValid: (key: string) => boolean,\n) {\n  if (event.key == null) return true\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n  const isSingleCharacterKey = event.key.length === 1\n  if (!isSingleCharacterKey || isModifierKey) return true\n  return isValid(event.key)\n}\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: string | number): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * Whether the input should be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * Whether the input is required\n   */\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  onInvalid?: (\n    message: ValidityState,\n    value: string,\n    valueAsNumber: number,\n  ) => void\n  /**\n   * Whether the pressed key should be allowed in the input.\n   * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/\n   */\n  isValidCharacter?: (value: string) => boolean\n  /**\n   * If using a custom display format, this converts the custom format to a format `parseFloat` understands.\n   */\n  parse?: (value: string) => string\n  /**\n   * If using a custom display format, this converts the default format to the custom format.\n   */\n  format?: (value: string | number) => string | number\n}\n\ntype ValidityState = \"rangeUnderflow\" | \"rangeOverflow\"\ntype InputSelection = { start: number | null; end: number | null }\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props\n\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n  const onInvalid = useCallbackRef(onInvalidProp)\n  const isValidCharacter = useCallbackRef(\n    isValidCharacterProp ?? isFloatingPointNumericCharacter,\n  )\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const inputSelectionRef = useRef<InputSelection | null>(null)\n  const incrementButtonRef = useRef<HTMLButtonElement>(null)\n  const decrementButtonRef = useRef<HTMLButtonElement>(null)\n\n  const sanitize = useCallback(\n    (value: string) => value.split(\"\").filter(isValidCharacter).join(\"\"),\n    [isValidCharacter],\n  )\n\n  const parse = useCallback(\n    (value: string) => parseValue?.(value) ?? value,\n    [parseValue],\n  )\n\n  const format = useCallback(\n    (value: string | number) => (formatValue?.(value) ?? value).toString(),\n    [formatValue],\n  )\n\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    } else if (counter.valueAsNumber < min) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid])\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value)\n      counter.setValue(sanitize(parsedInput))\n    }\n  }, [parse, sanitize])\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  useAttributeObserver(\n    incrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n  useAttributeObserver(\n    decrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const evt = event.nativeEvent as InputEvent\n      if (evt.isComposing) return\n      const parsedInput = parse(event.currentTarget.value)\n      updateFn(sanitize(parsedInput))\n      inputSelectionRef.current = {\n        start: event.currentTarget.selectionStart,\n        end: event.currentTarget.selectionEnd,\n      }\n    },\n    [updateFn, sanitize, parse],\n  )\n\n  const _onFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocus?.(event)\n      if (!inputSelectionRef.current) return\n      /**\n       * restore selection if custom format string replacement moved it to the end\n       */\n      event.target.selectionStart =\n        inputSelectionRef.current.start ?? event.currentTarget.value?.length\n      event.currentTarget.selectionEnd =\n        inputSelectionRef.current.end ?? event.currentTarget.selectionStart\n    },\n    [onFocus],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.nativeEvent.isComposing) return\n\n      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [isValidCharacter, stepProp, increment, decrement, updateFn, min, max],\n  )\n\n  const getStepFactor = <\n    Event extends React.KeyboardEvent | React.WheelEvent | WheelEvent,\n  >(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText?.(counter.value)\n    if (text != null) return text\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueText])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as string | number\n    if (counter.value === \"\") return\n\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString())\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\")\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min\n      }\n      if (counter.valueAsNumber > max) {\n        next = max\n      }\n\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onInputBlur = useCallback(() => {\n    setFocused(false)\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        inputRef.current?.focus()\n      })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  useEventListener(\n    () => inputRef.current,\n    \"wheel\",\n    (event: WheelEvent) => {\n      const doc = inputRef.current?.ownerDocument ?? document\n      const isInputFocused = doc.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref: mergeRefs(ref, incrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinUp(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref: mergeRefs(ref, decrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinDown(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled],\n  )\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => ({\n        name,\n        inputMode,\n        type: \"text\",\n        pattern,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-describedby\": ariaDescBy,\n        id,\n        disabled: isDisabled,\n        ...props,\n        readOnly: props.readOnly ?? isReadOnly,\n        \"aria-readonly\": props.readOnly ?? isReadOnly,\n        \"aria-required\": props.required ?? isRequired,\n        required: props.required ?? isRequired,\n        ref: mergeRefs(inputRef, ref),\n        value: format(counter.value),\n        role: \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, _onFocus, () =>\n          setFocused(true),\n        ),\n        onBlur: callAllHandlers(props.onBlur, onBlur, onInputBlur),\n      }),\n      [\n        name,\n        inputMode,\n        pattern,\n        ariaLabelledBy,\n        ariaLabel,\n        format,\n        ariaDescBy,\n        id,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        counter.value,\n        counter.valueAsNumber,\n        counter.isOutOfRange,\n        min,\n        max,\n        ariaValueText,\n        onChange,\n        onKeyDown,\n        _onFocus,\n        onBlur,\n        onInputBlur,\n      ],\n    )\n\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n","import { useEffect } from \"react\"\n\nexport function useAttributeObserver(\n  ref: React.RefObject<HTMLElement | null>,\n  attributes: string | string[],\n  fn: (v: MutationRecord) => void,\n  enabled: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current || !enabled) return\n    const win = ref.current.ownerDocument.defaultView ?? window\n    const attrs = Array.isArray(attributes) ? attributes : [attributes]\n    const obs = new win.MutationObserver((changes) => {\n      for (const change of changes) {\n        if (\n          change.type === \"attributes\" &&\n          change.attributeName &&\n          attrs.includes(change.attributeName)\n        ) {\n          fn(change)\n        }\n      }\n    })\n\n    obs.observe(ref.current, { attributes: true, attributeFilter: attrs })\n\n    return () => obs.disconnect()\n  })\n}\n","import { useInterval } from \"@chakra-ui/react-use-interval\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first time\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first time\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinning (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useEffect(() => {\n    return () => removeTimeout()\n  }, [])\n\n  return { up, down, stop, isSpinning }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}