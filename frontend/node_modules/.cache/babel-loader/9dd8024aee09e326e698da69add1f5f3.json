{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  getInteractionModality: () => getInteractionModality,\n  setInteractionModality: () => setInteractionModality,\n  trackFocusVisible: () => trackFocusVisible,\n  trackInteractionModality: () => trackInteractionModality\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_dom_query = require(\"@zag-js/dom-query\");\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar hasBlurredWindowRecently = false;\nvar handlers = /* @__PURE__ */new Set();\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\nfunction isValidKey(e) {\n  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\n    let matches = false;\n    try {\n      matches = target.matches(\":focus-visible\");\n    } catch {}\n    if (matches) return;\n    trigger(\"pointer\", event);\n  }\n}\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\nfunction onClickEvent(e) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    modality = \"virtual\";\n  }\n}\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\";\n    trigger(\"virtual\", event);\n  }\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\nfunction setupGlobalFocusEvents() {\n  if (!(0, import_dom_query.isDom)() || hasSetup) {\n    return;\n  }\n  const {\n    focus\n  } = HTMLElement.prototype;\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true;\n    focus.apply(this, args);\n  };\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  document.addEventListener(\"click\", onClickEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n  hasSetup = true;\n}\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n  const handler = () => fn(isFocusVisible());\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\nfunction trackInteractionModality(fn) {\n  setupGlobalFocusEvents();\n  fn(modality);\n  const handler = () => fn(modality);\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\nfunction setInteractionModality(value) {\n  modality = value;\n  trigger(value, null);\n}\nfunction getInteractionModality() {\n  return modality;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  getInteractionModality,\n  setInteractionModality,\n  trackFocusVisible,\n  trackInteractionModality\n});","map":{"version":3,"names":["src_exports","__export","getInteractionModality","setInteractionModality","trackFocusVisible","trackInteractionModality","module","exports","__toCommonJS","import_dom_query","require","hasSetup","modality","hasEventBeforeFocus","hasBlurredWindowRecently","handlers","Set","trigger","modality2","event","forEach","handler","isMac","window","navigator","test","platform","isValidKey","e","metaKey","altKey","ctrlKey","key","onKeyboardEvent","onPointerEvent","type","target","composedPath","matches","isVirtualClick","mozInputSource","isTrusted","detail","pointerType","onClickEvent","onWindowFocus","document","onWindowBlur","isFocusVisible","setupGlobalFocusEvents","isDom","focus","HTMLElement","prototype","focusElement","args","apply","addEventListener","PointerEvent","fn","add","delete","value"],"sources":["../src/index.ts"],"sourcesContent":["import { isDom } from \"@zag-js/dom-query\"\n\ntype Modality = \"keyboard\" | \"pointer\" | \"virtual\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent | null) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\nlet hasBlurredWindowRecently = false\n\nconst handlers = new Set<Handler>()\n\nfunction trigger(modality: Modality, event: HandlerEvent | null) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(e: KeyboardEvent) {\n  return !(\n    e.metaKey ||\n    (!isMac && e.altKey) ||\n    e.ctrlKey ||\n    e.key === \"Control\" ||\n    e.key === \"Shift\" ||\n    e.key === \"Meta\"\n  )\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    const target = event.composedPath ? event.composedPath()[0] : event.target\n\n    let matches = false\n    try {\n      matches = (target as any).matches(\":focus-visible\")\n    } catch {}\n\n    if (matches) return\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) return true\n  return event.detail === 0 && !(event as PointerEvent).pointerType\n}\n\nfunction onClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true\n    modality = \"virtual\"\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\"\n    trigger(\"virtual\", event)\n  }\n\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = true\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n  document.addEventListener(\"click\", onClickEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function trackInteractionModality(fn: (value: Modality | null) => void) {\n  setupGlobalFocusEvents()\n\n  fn(modality)\n  const handler = () => fn(modality)\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function setInteractionModality(value: Modality) {\n  modality = value\n  trigger(value, null)\n}\n\nexport function getInteractionModality() {\n  return modality\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}