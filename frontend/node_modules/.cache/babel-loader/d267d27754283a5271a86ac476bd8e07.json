{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Hide: () => Hide,\n  Show: () => Show,\n  useBreakpoint: () => useBreakpoint,\n  useBreakpointValue: () => useBreakpointValue,\n  useColorModePreference: () => useColorModePreference,\n  useMediaQuery: () => useMediaQuery,\n  usePrefersReducedMotion: () => usePrefersReducedMotion,\n  useQuery: () => useQuery\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/media-query.tsx\nvar import_system = require(\"@chakra-ui/system\");\nvar getBreakpoint = (theme, value) => {\n  var _a, _b;\n  return (_b = (_a = theme == null ? void 0 : theme.breakpoints) == null ? void 0 : _a[value]) != null ? _b : value;\n};\nfunction useQuery(props) {\n  const {\n    breakpoint = \"\",\n    below,\n    above\n  } = props;\n  const theme = (0, import_system.useTheme)();\n  const bpBelow = getBreakpoint(theme, below);\n  const bpAbove = getBreakpoint(theme, above);\n  let query = breakpoint;\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`;\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`;\n  }\n  return query;\n}\n\n// src/use-media-query.ts\nvar import_react_env = require(\"@chakra-ui/react-env\");\nvar import_react = require(\"react\");\nfunction useMediaQuery(query, options = {}) {\n  const {\n    ssr = true,\n    fallback\n  } = options;\n  const {\n    getWindow\n  } = (0, import_react_env.useEnvironment)();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(v => v != null);\n  const [value, setValue] = (0, import_react.useState)(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n    }));\n  });\n  (0, import_react.useEffect)(() => {\n    const win = getWindow();\n    setValue(queries.map(query2 => ({\n      media: query2,\n      matches: win.matchMedia(query2).matches\n    })));\n    const mql = queries.map(query2 => win.matchMedia(query2));\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return {\n            ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n    mql.forEach(mql2 => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach(mql2 => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(item => item.matches);\n}\n\n// src/visibility.tsx\nfunction Visibility(props) {\n  const {\n    breakpoint,\n    hide,\n    children,\n    ssr\n  } = props;\n  const [show] = useMediaQuery(breakpoint, {\n    ssr\n  });\n  const isVisible = hide ? !show : show;\n  const rendered = isVisible ? children : null;\n  return rendered;\n}\n\n// src/hide.tsx\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction Hide(props) {\n  const {\n    children,\n    ssr\n  } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */(0, import_jsx_runtime.jsx)(Visibility, {\n    breakpoint: query,\n    hide: true,\n    ssr,\n    children\n  });\n}\nHide.displayName = \"Hide\";\n\n// src/media-query.hook.ts\nfunction usePrefersReducedMotion(options) {\n  const [prefersReducedMotion] = useMediaQuery(\"(prefers-reduced-motion: reduce)\", options);\n  return prefersReducedMotion;\n}\nfunction useColorModePreference(options) {\n  const [isLight, isDark] = useMediaQuery([\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"], options);\n  if (isLight) return \"light\";\n  if (isDark) return \"dark\";\n  return void 0;\n}\n\n// src/show.tsx\nvar import_jsx_runtime2 = require(\"react/jsx-runtime\");\nfunction Show(props) {\n  const {\n    children,\n    ssr\n  } = props;\n  const query = useQuery(props);\n  return /* @__PURE__ */(0, import_jsx_runtime2.jsx)(Visibility, {\n    breakpoint: query,\n    ssr,\n    children\n  });\n}\nShow.displayName = \"Show\";\n\n// src/use-breakpoint.ts\nvar import_system2 = require(\"@chakra-ui/system\");\nvar import_shared_utils = require(\"@chakra-ui/shared-utils\");\nfunction useBreakpoint(arg) {\n  var _a, _b;\n  const opts = (0, import_shared_utils.isObject)(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const theme = (0, import_system2.useTheme)();\n  const breakpoints = theme.__breakpoints.details.map(({\n    minMaxQuery,\n    breakpoint\n  }) => ({\n    breakpoint,\n    query: minMaxQuery.replace(\"@media screen and \", \"\")\n  }));\n  const fallback = breakpoints.map(bp => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: opts.ssr\n  });\n  const index = values.findIndex(value => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\n\n// src/use-breakpoint-value.ts\nvar import_system3 = require(\"@chakra-ui/system\");\nvar import_shared_utils2 = require(\"@chakra-ui/shared-utils\");\nvar import_breakpoint_utils2 = require(\"@chakra-ui/breakpoint-utils\");\n\n// src/media-query.utils.ts\nvar import_breakpoint_utils = require(\"@chakra-ui/breakpoint-utils\");\nfunction getClosestValue(values, breakpoint, breakpoints = import_breakpoint_utils.breakpoints) {\n  let index = Object.keys(values).indexOf(breakpoint);\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n  let stopIndex = breakpoints.indexOf(breakpoint);\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex];\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n    stopIndex -= 1;\n  }\n  if (index !== -1) {\n    const key = breakpoints[index];\n    return values[key];\n  }\n  return void 0;\n}\n\n// src/use-breakpoint-value.ts\nfunction useBreakpointValue(values, arg) {\n  var _a;\n  const opts = (0, import_shared_utils2.isObject)(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const breakpoint = useBreakpoint(opts);\n  const theme = (0, import_system3.useTheme)();\n  if (!breakpoint) return;\n  const breakpoints = Array.from(((_a = theme.__breakpoints) == null ? void 0 : _a.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries((0, import_breakpoint_utils2.arrayToObjectNotation)(values, breakpoints)).map(([key, value]) => [key, value])) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Hide,\n  Show,\n  useBreakpoint,\n  useBreakpointValue,\n  useColorModePreference,\n  useMediaQuery,\n  usePrefersReducedMotion,\n  useQuery\n});","map":{"version":3,"names":["src_exports","__export","Hide","Show","useBreakpoint","useBreakpointValue","useColorModePreference","useMediaQuery","usePrefersReducedMotion","useQuery","module","exports","__toCommonJS","import_system","require","getBreakpoint","theme","value","_a","_b","breakpoints","props","breakpoint","below","above","useTheme","bpBelow","bpAbove","query","import_react_env","import_react","options","ssr","fallback","getWindow","useEnvironment","queries","Array","isArray","fallbackValues","filter","v","setValue","useState","map","query2","index","media","matches","matchMedia","useEffect","win","mql","handler","evt","prev","slice","item","forEach","mql2","addListener","addEventListener","removeListener","removeEventListener","Visibility","hide","children","show","isVisible","rendered","import_jsx_runtime","jsx","displayName","prefersReducedMotion","isLight","isDark","import_jsx_runtime2","import_system2","import_shared_utils","arg","opts","isObject","__breakpoints","details","minMaxQuery","replace","bp","values","findIndex","import_system3","import_shared_utils2","import_breakpoint_utils2","import_breakpoint_utils","getClosestValue","Object","keys","indexOf","stopIndex","key","hasOwnProperty","from","obj","fromEntries","entries","arrayToObjectNotation"],"sources":["../src/index.ts","../src/media-query.tsx","../src/use-media-query.ts","../src/visibility.tsx","../src/hide.tsx","../src/media-query.hook.ts","../src/show.tsx","../src/use-breakpoint.ts","../src/use-breakpoint-value.ts","../src/media-query.utils.ts"],"sourcesContent":["export { Hide } from \"./hide\"\nexport type { HideProps } from \"./hide\"\nexport { useQuery } from \"./media-query\"\nexport type { UseQueryProps } from \"./media-query\"\nexport {\n  useColorModePreference,\n  usePrefersReducedMotion,\n} from \"./media-query.hook\"\nexport { Show } from \"./show\"\nexport type { ShowProps } from \"./show\"\nexport { useBreakpoint } from \"./use-breakpoint\"\nexport type { UseBreakpointOptions } from \"./use-breakpoint\"\nexport { useBreakpointValue } from \"./use-breakpoint-value\"\nexport { useMediaQuery } from \"./use-media-query\"\nexport type { UseMediaQueryOptions } from \"./use-media-query\"\n","import { useTheme } from \"@chakra-ui/system\"\n\nconst getBreakpoint = (theme: Record<string, any>, value: any) => {\n  return theme?.breakpoints?.[value] ?? value\n}\n\nexport interface UseQueryProps {\n  breakpoint?: string\n  below?: string\n  above?: string\n}\n\nexport function useQuery(props: UseQueryProps) {\n  const { breakpoint = \"\", below, above } = props\n\n  const theme = useTheme()\n  const bpBelow = getBreakpoint(theme, below)\n  const bpAbove = getBreakpoint(theme, above)\n\n  let query = breakpoint\n\n  if (bpBelow) {\n    query = `(max-width: ${bpBelow})`\n  } else if (bpAbove) {\n    query = `(min-width: ${bpAbove})`\n  }\n\n  return query\n}\n","import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n","import { useMediaQuery } from \"./use-media-query\"\n\ninterface VisibilityProps {\n  ssr?: boolean\n  breakpoint: string\n  hide?: boolean\n  children: React.ReactNode\n}\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nexport function Visibility(props: VisibilityProps) {\n  const { breakpoint, hide, children, ssr } = props\n  const [show] = useMediaQuery(breakpoint, { ssr })\n  const isVisible = hide ? !show : show\n\n  const rendered = isVisible ? children : null\n  return rendered as React.ReactElement\n}\n","import { useQuery } from \"./media-query\"\nimport { Visibility } from \"./visibility\"\nimport { ShowProps } from \"./show\"\n\nexport type HideProps = ShowProps\n\n/**\n * `Hide` wraps a component to not render if the provided media query matches.\n *\n * @see Docs https://chakra-ui.com/docs/components/show-hide\n */\nexport function Hide(props: HideProps) {\n  const { children, ssr } = props\n  const query = useQuery(props)\n  return (\n    <Visibility breakpoint={query} hide ssr={ssr}>\n      {children}\n    </Visibility>\n  )\n}\n\nHide.displayName = \"Hide\"\n","import { useMediaQuery, UseMediaQueryOptions } from \"./use-media-query\"\n\n/**\n * React hook used to get the user's animation preference.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-prefers-reduced-motion\n */\nexport function usePrefersReducedMotion(\n  options?: UseMediaQueryOptions,\n): boolean {\n  const [prefersReducedMotion] = useMediaQuery(\n    \"(prefers-reduced-motion: reduce)\",\n    options,\n  )\n  return prefersReducedMotion\n}\n\n/**\n * React hook for getting the user's color mode preference.\n */\nexport function useColorModePreference(\n  options?: UseMediaQueryOptions,\n): \"dark\" | \"light\" | undefined {\n  const [isLight, isDark] = useMediaQuery(\n    [\"(prefers-color-scheme: light)\", \"(prefers-color-scheme: dark)\"],\n    options,\n  )\n\n  if (isLight) return \"light\"\n  if (isDark) return \"dark\"\n  return undefined\n}\n","import { useQuery } from \"./media-query\"\nimport { Visibility } from \"./visibility\"\n\nexport interface ShowProps {\n  /**\n   * A custom css media query that determines when the `children` are rendered.\n   * Will render `children` if that query resolves to `true`.\n   */\n  breakpoint?: string\n  /**\n   * A value from the `breakpoints` section in the theme. Will render `children`\n   * from that breakpoint and below. Default breakpoint values: `sm`, `md`, `lg`, `xl`, `2xl`.\n   */\n  below?: string\n  /**\n   * A value from the `breakpoints` section in the theme. Will render `children`\n   * from that breakpoint and above. Default breakpoint values: `sm`, `md`, `lg`, `xl`, `2xl`.\n   */\n  above?: string\n  ssr?: boolean\n  children?: React.ReactNode\n}\n\n/**\n * `Show` wraps a component to render if the provided media query matches.\n *\n * @see Docs https://chakra-ui.com/docs/components/show-hide\n */\nexport function Show(props: ShowProps) {\n  const { children, ssr } = props\n  const query = useQuery(props)\n  return (\n    <Visibility breakpoint={query} ssr={ssr}>\n      {children}\n    </Visibility>\n  )\n}\n\nShow.displayName = \"Show\"\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n","import { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}